(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Color = require("../Color");
var Color_Scale = require("../Color.Scale");
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var matplotlibScale = function (dictPartial) {
    return function (rgbs) {
        var toColor = function (v) {
            if (v.length === 3) {
                return Color["rgb'"](v[0])(v[1])(v[2]);
            };
            return Color["rgb'"](0.0)(0.0)(0.0);
        };
        var stop = toColor(Data_Array_Partial.last(dictPartial)(rgbs));
        var start = toColor(Data_Array_Partial.head(dictPartial)(rgbs));
        var middle = Data_Functor.map(Data_Functor.functorArray)(toColor)(Data_Array.slice(1)(255)(rgbs));
        return Color_Scale.uniformScale(Data_Foldable.foldableArray)(Color.RGB.value)(start)(middle)(stop);
    };
};
var _viridis_data = [ [ 0.267004, 4.874e-3, 0.329415 ], [ 0.26851, 9.605e-3, 0.335427 ], [ 0.269944, 1.4625e-2, 0.341379 ], [ 0.271305, 1.9942e-2, 0.347269 ], [ 0.272594, 2.5563e-2, 0.353093 ], [ 0.273809, 3.1497e-2, 0.358853 ], [ 0.274952, 3.7752e-2, 0.364543 ], [ 0.276022, 4.4167e-2, 0.370164 ], [ 0.277018, 5.0344e-2, 0.375715 ], [ 0.277941, 5.6324e-2, 0.381191 ], [ 0.278791, 6.2145e-2, 0.386592 ], [ 0.279566, 6.7836e-2, 0.391917 ], [ 0.280267, 7.3417e-2, 0.397163 ], [ 0.280894, 7.8907e-2, 0.402329 ], [ 0.281446, 8.432e-2, 0.407414 ], [ 0.281924, 8.9666e-2, 0.412415 ], [ 0.282327, 9.4955e-2, 0.417331 ], [ 0.282656, 0.100196, 0.42216 ], [ 0.28291, 0.105393, 0.426902 ], [ 0.283091, 0.110553, 0.431554 ], [ 0.283197, 0.11568, 0.436115 ], [ 0.283229, 0.120777, 0.440584 ], [ 0.283187, 0.125848, 0.44496 ], [ 0.283072, 0.130895, 0.449241 ], [ 0.282884, 0.13592, 0.453427 ], [ 0.282623, 0.140926, 0.457517 ], [ 0.28229, 0.145912, 0.46151 ], [ 0.281887, 0.150881, 0.465405 ], [ 0.281412, 0.155834, 0.469201 ], [ 0.280868, 0.160771, 0.472899 ], [ 0.280255, 0.165693, 0.476498 ], [ 0.279574, 0.170599, 0.479997 ], [ 0.278826, 0.17549, 0.483397 ], [ 0.278012, 0.180367, 0.486697 ], [ 0.277134, 0.185228, 0.489898 ], [ 0.276194, 0.190074, 0.493001 ], [ 0.275191, 0.194905, 0.496005 ], [ 0.274128, 0.199721, 0.498911 ], [ 0.273006, 0.20452, 0.501721 ], [ 0.271828, 0.209303, 0.504434 ], [ 0.270595, 0.214069, 0.507052 ], [ 0.269308, 0.218818, 0.509577 ], [ 0.267968, 0.223549, 0.512008 ], [ 0.26658, 0.228262, 0.514349 ], [ 0.265145, 0.232956, 0.516599 ], [ 0.263663, 0.237631, 0.518762 ], [ 0.262138, 0.242286, 0.520837 ], [ 0.260571, 0.246922, 0.522828 ], [ 0.258965, 0.251537, 0.524736 ], [ 0.257322, 0.25613, 0.526563 ], [ 0.255645, 0.260703, 0.528312 ], [ 0.253935, 0.265254, 0.529983 ], [ 0.252194, 0.269783, 0.531579 ], [ 0.250425, 0.27429, 0.533103 ], [ 0.248629, 0.278775, 0.534556 ], [ 0.246811, 0.283237, 0.535941 ], [ 0.244972, 0.287675, 0.53726 ], [ 0.243113, 0.292092, 0.538516 ], [ 0.241237, 0.296485, 0.539709 ], [ 0.239346, 0.300855, 0.540844 ], [ 0.237441, 0.305202, 0.541921 ], [ 0.235526, 0.309527, 0.542944 ], [ 0.233603, 0.313828, 0.543914 ], [ 0.231674, 0.318106, 0.544834 ], [ 0.229739, 0.322361, 0.545706 ], [ 0.227802, 0.326594, 0.546532 ], [ 0.225863, 0.330805, 0.547314 ], [ 0.223925, 0.334994, 0.548053 ], [ 0.221989, 0.339161, 0.548752 ], [ 0.220057, 0.343307, 0.549413 ], [ 0.21813, 0.347432, 0.550038 ], [ 0.21621, 0.351535, 0.550627 ], [ 0.214298, 0.355619, 0.551184 ], [ 0.212395, 0.359683, 0.55171 ], [ 0.210503, 0.363727, 0.552206 ], [ 0.208623, 0.367752, 0.552675 ], [ 0.206756, 0.371758, 0.553117 ], [ 0.204903, 0.375746, 0.553533 ], [ 0.203063, 0.379716, 0.553925 ], [ 0.201239, 0.38367, 0.554294 ], [ 0.19943, 0.387607, 0.554642 ], [ 0.197636, 0.391528, 0.554969 ], [ 0.19586, 0.395433, 0.555276 ], [ 0.1941, 0.399323, 0.555565 ], [ 0.192357, 0.403199, 0.555836 ], [ 0.190631, 0.407061, 0.556089 ], [ 0.188923, 0.41091, 0.556326 ], [ 0.187231, 0.414746, 0.556547 ], [ 0.185556, 0.41857, 0.556753 ], [ 0.183898, 0.422383, 0.556944 ], [ 0.182256, 0.426184, 0.55712 ], [ 0.180629, 0.429975, 0.557282 ], [ 0.179019, 0.433756, 0.55743 ], [ 0.177423, 0.437527, 0.557565 ], [ 0.175841, 0.44129, 0.557685 ], [ 0.174274, 0.445044, 0.557792 ], [ 0.172719, 0.448791, 0.557885 ], [ 0.171176, 0.45253, 0.557965 ], [ 0.169646, 0.456262, 0.55803 ], [ 0.168126, 0.459988, 0.558082 ], [ 0.166617, 0.463708, 0.558119 ], [ 0.165117, 0.467423, 0.558141 ], [ 0.163625, 0.471133, 0.558148 ], [ 0.162142, 0.474838, 0.55814 ], [ 0.160665, 0.47854, 0.558115 ], [ 0.159194, 0.482237, 0.558073 ], [ 0.157729, 0.485932, 0.558013 ], [ 0.15627, 0.489624, 0.557936 ], [ 0.154815, 0.493313, 0.55784 ], [ 0.153364, 0.497, 0.557724 ], [ 0.151918, 0.500685, 0.557587 ], [ 0.150476, 0.504369, 0.55743 ], [ 0.149039, 0.508051, 0.55725 ], [ 0.147607, 0.511733, 0.557049 ], [ 0.14618, 0.515413, 0.556823 ], [ 0.144759, 0.519093, 0.556572 ], [ 0.143343, 0.522773, 0.556295 ], [ 0.141935, 0.526453, 0.555991 ], [ 0.140536, 0.530132, 0.555659 ], [ 0.139147, 0.533812, 0.555298 ], [ 0.13777, 0.537492, 0.554906 ], [ 0.136408, 0.541173, 0.554483 ], [ 0.135066, 0.544853, 0.554029 ], [ 0.133743, 0.548535, 0.553541 ], [ 0.132444, 0.552216, 0.553018 ], [ 0.131172, 0.555899, 0.552459 ], [ 0.129933, 0.559582, 0.551864 ], [ 0.128729, 0.563265, 0.551229 ], [ 0.127568, 0.566949, 0.550556 ], [ 0.126453, 0.570633, 0.549841 ], [ 0.125394, 0.574318, 0.549086 ], [ 0.124395, 0.578002, 0.548287 ], [ 0.123463, 0.581687, 0.547445 ], [ 0.122606, 0.585371, 0.546557 ], [ 0.121831, 0.589055, 0.545623 ], [ 0.121148, 0.592739, 0.544641 ], [ 0.120565, 0.596422, 0.543611 ], [ 0.120092, 0.600104, 0.54253 ], [ 0.119738, 0.603785, 0.5414 ], [ 0.119512, 0.607464, 0.540218 ], [ 0.119423, 0.611141, 0.538982 ], [ 0.119483, 0.614817, 0.537692 ], [ 0.119699, 0.61849, 0.536347 ], [ 0.120081, 0.622161, 0.534946 ], [ 0.120638, 0.625828, 0.533488 ], [ 0.12138, 0.629492, 0.531973 ], [ 0.122312, 0.633153, 0.530398 ], [ 0.123444, 0.636809, 0.528763 ], [ 0.12478, 0.640461, 0.527068 ], [ 0.126326, 0.644107, 0.525311 ], [ 0.128087, 0.647749, 0.523491 ], [ 0.130067, 0.651384, 0.521608 ], [ 0.132268, 0.655014, 0.519661 ], [ 0.134692, 0.658636, 0.517649 ], [ 0.137339, 0.662252, 0.515571 ], [ 0.14021, 0.665859, 0.513427 ], [ 0.143303, 0.669459, 0.511215 ], [ 0.146616, 0.67305, 0.508936 ], [ 0.150148, 0.676631, 0.506589 ], [ 0.153894, 0.680203, 0.504172 ], [ 0.157851, 0.683765, 0.501686 ], [ 0.162016, 0.687316, 0.499129 ], [ 0.166383, 0.690856, 0.496502 ], [ 0.170948, 0.694384, 0.493803 ], [ 0.175707, 0.6979, 0.491033 ], [ 0.180653, 0.701402, 0.488189 ], [ 0.185783, 0.704891, 0.485273 ], [ 0.19109, 0.708366, 0.482284 ], [ 0.196571, 0.711827, 0.479221 ], [ 0.202219, 0.715272, 0.476084 ], [ 0.20803, 0.718701, 0.472873 ], [ 0.214, 0.722114, 0.469588 ], [ 0.220124, 0.725509, 0.466226 ], [ 0.226397, 0.728888, 0.462789 ], [ 0.232815, 0.732247, 0.459277 ], [ 0.239374, 0.735588, 0.455688 ], [ 0.24607, 0.73891, 0.452024 ], [ 0.252899, 0.742211, 0.448284 ], [ 0.259857, 0.745492, 0.444467 ], [ 0.266941, 0.748751, 0.440573 ], [ 0.274149, 0.751988, 0.436601 ], [ 0.281477, 0.755203, 0.432552 ], [ 0.288921, 0.758394, 0.428426 ], [ 0.296479, 0.761561, 0.424223 ], [ 0.304148, 0.764704, 0.419943 ], [ 0.311925, 0.767822, 0.415586 ], [ 0.319809, 0.770914, 0.411152 ], [ 0.327796, 0.77398, 0.40664 ], [ 0.335885, 0.777018, 0.402049 ], [ 0.344074, 0.780029, 0.397381 ], [ 0.35236, 0.783011, 0.392636 ], [ 0.360741, 0.785964, 0.387814 ], [ 0.369214, 0.788888, 0.382914 ], [ 0.377779, 0.791781, 0.377939 ], [ 0.386433, 0.794644, 0.372886 ], [ 0.395174, 0.797475, 0.367757 ], [ 0.404001, 0.800275, 0.362552 ], [ 0.412913, 0.803041, 0.357269 ], [ 0.421908, 0.805774, 0.35191 ], [ 0.430983, 0.808473, 0.346476 ], [ 0.440137, 0.811138, 0.340967 ], [ 0.449368, 0.813768, 0.335384 ], [ 0.458674, 0.816363, 0.329727 ], [ 0.468053, 0.818921, 0.323998 ], [ 0.477504, 0.821444, 0.318195 ], [ 0.487026, 0.823929, 0.312321 ], [ 0.496615, 0.826376, 0.306377 ], [ 0.506271, 0.828786, 0.300362 ], [ 0.515992, 0.831158, 0.294279 ], [ 0.525776, 0.833491, 0.288127 ], [ 0.535621, 0.835785, 0.281908 ], [ 0.545524, 0.838039, 0.275626 ], [ 0.555484, 0.840254, 0.269281 ], [ 0.565498, 0.84243, 0.262877 ], [ 0.575563, 0.844566, 0.256415 ], [ 0.585678, 0.846661, 0.249897 ], [ 0.595839, 0.848717, 0.243329 ], [ 0.606045, 0.850733, 0.236712 ], [ 0.616293, 0.852709, 0.230052 ], [ 0.626579, 0.854645, 0.223353 ], [ 0.636902, 0.856542, 0.21662 ], [ 0.647257, 0.8584, 0.209861 ], [ 0.657642, 0.860219, 0.203082 ], [ 0.668054, 0.861999, 0.196293 ], [ 0.678489, 0.863742, 0.189503 ], [ 0.688944, 0.865448, 0.182725 ], [ 0.699415, 0.867117, 0.175971 ], [ 0.709898, 0.868751, 0.169257 ], [ 0.720391, 0.87035, 0.162603 ], [ 0.730889, 0.871916, 0.156029 ], [ 0.741388, 0.873449, 0.149561 ], [ 0.751884, 0.874951, 0.143228 ], [ 0.762373, 0.876424, 0.137064 ], [ 0.772852, 0.877868, 0.131109 ], [ 0.783315, 0.879285, 0.125405 ], [ 0.79376, 0.880678, 0.120005 ], [ 0.804182, 0.882046, 0.114965 ], [ 0.814576, 0.883393, 0.110347 ], [ 0.82494, 0.88472, 0.106217 ], [ 0.83527, 0.886029, 0.102646 ], [ 0.845561, 0.887322, 9.9702e-2 ], [ 0.85581, 0.888601, 9.7452e-2 ], [ 0.866013, 0.889868, 9.5953e-2 ], [ 0.876168, 0.891125, 9.525e-2 ], [ 0.886271, 0.892374, 9.5374e-2 ], [ 0.89632, 0.893616, 9.6335e-2 ], [ 0.906311, 0.894855, 9.8125e-2 ], [ 0.916242, 0.896091, 0.100717 ], [ 0.926106, 0.89733, 0.104071 ], [ 0.935904, 0.89857, 0.108131 ], [ 0.945636, 0.899815, 0.112838 ], [ 0.9553, 0.901065, 0.118128 ], [ 0.964894, 0.902323, 0.123941 ], [ 0.974417, 0.90359, 0.130215 ], [ 0.983868, 0.904867, 0.136897 ], [ 0.993248, 0.906157, 0.143936 ] ];
var viridis = matplotlibScale()(_viridis_data);
var _plasma_data = [ [ 5.0383e-2, 2.9803e-2, 0.527975 ], [ 6.3536e-2, 2.8426e-2, 0.533124 ], [ 7.5353e-2, 2.7206e-2, 0.538007 ], [ 8.6222e-2, 2.6125e-2, 0.542658 ], [ 9.6379e-2, 2.5165e-2, 0.547103 ], [ 0.10598, 2.4309e-2, 0.551368 ], [ 0.115124, 2.3556e-2, 0.555468 ], [ 0.123903, 2.2878e-2, 0.559423 ], [ 0.132381, 2.2258e-2, 0.56325 ], [ 0.140603, 2.1687e-2, 0.566959 ], [ 0.148607, 2.1154e-2, 0.570562 ], [ 0.156421, 2.0651e-2, 0.574065 ], [ 0.16407, 2.0171e-2, 0.577478 ], [ 0.171574, 1.9706e-2, 0.580806 ], [ 0.17895, 1.9252e-2, 0.584054 ], [ 0.186213, 1.8803e-2, 0.587228 ], [ 0.193374, 1.8354e-2, 0.59033 ], [ 0.200445, 1.7902e-2, 0.593364 ], [ 0.207435, 1.7442e-2, 0.596333 ], [ 0.21435, 1.6973e-2, 0.599239 ], [ 0.221197, 1.6497e-2, 0.602083 ], [ 0.227983, 1.6007e-2, 0.604867 ], [ 0.234715, 1.5502e-2, 0.607592 ], [ 0.241396, 1.4979e-2, 0.610259 ], [ 0.248032, 1.4439e-2, 0.612868 ], [ 0.254627, 1.3882e-2, 0.615419 ], [ 0.261183, 1.3308e-2, 0.617911 ], [ 0.267703, 1.2716e-2, 0.620346 ], [ 0.274191, 1.2109e-2, 0.622722 ], [ 0.280648, 1.1488e-2, 0.625038 ], [ 0.287076, 1.0855e-2, 0.627295 ], [ 0.293478, 1.0213e-2, 0.62949 ], [ 0.299855, 9.561e-3, 0.631624 ], [ 0.30621, 8.902e-3, 0.633694 ], [ 0.312543, 8.239e-3, 0.6357 ], [ 0.318856, 7.576e-3, 0.63764 ], [ 0.32515, 6.915e-3, 0.639512 ], [ 0.331426, 6.261e-3, 0.641316 ], [ 0.337683, 5.618e-3, 0.643049 ], [ 0.343925, 4.991e-3, 0.64471 ], [ 0.35015, 4.382e-3, 0.646298 ], [ 0.356359, 3.798e-3, 0.64781 ], [ 0.362553, 3.243e-3, 0.649245 ], [ 0.368733, 2.724e-3, 0.650601 ], [ 0.374897, 2.245e-3, 0.651876 ], [ 0.381047, 1.814e-3, 0.653068 ], [ 0.387183, 1.434e-3, 0.654177 ], [ 0.393304, 1.114e-3, 0.655199 ], [ 0.399411, 8.59e-4, 0.656133 ], [ 0.405503, 6.78e-4, 0.656977 ], [ 0.41158, 5.77e-4, 0.65773 ], [ 0.417642, 5.64e-4, 0.65839 ], [ 0.423689, 6.46e-4, 0.658956 ], [ 0.429719, 8.31e-4, 0.659425 ], [ 0.435734, 1.127e-3, 0.659797 ], [ 0.441732, 1.54e-3, 0.660069 ], [ 0.447714, 2.08e-3, 0.66024 ], [ 0.453677, 2.755e-3, 0.66031 ], [ 0.459623, 3.574e-3, 0.660277 ], [ 0.46555, 4.545e-3, 0.660139 ], [ 0.471457, 5.678e-3, 0.659897 ], [ 0.477344, 6.98e-3, 0.659549 ], [ 0.48321, 8.46e-3, 0.659095 ], [ 0.489055, 1.0127e-2, 0.658534 ], [ 0.494877, 1.199e-2, 0.657865 ], [ 0.500678, 1.4055e-2, 0.657088 ], [ 0.506454, 1.6333e-2, 0.656202 ], [ 0.512206, 1.8833e-2, 0.655209 ], [ 0.517933, 2.1563e-2, 0.654109 ], [ 0.523633, 2.4532e-2, 0.652901 ], [ 0.529306, 2.7747e-2, 0.651586 ], [ 0.534952, 3.1217e-2, 0.650165 ], [ 0.54057, 3.495e-2, 0.64864 ], [ 0.546157, 3.8954e-2, 0.64701 ], [ 0.551715, 4.3136e-2, 0.645277 ], [ 0.557243, 4.7331e-2, 0.643443 ], [ 0.562738, 5.1545e-2, 0.641509 ], [ 0.568201, 5.5778e-2, 0.639477 ], [ 0.573632, 6.0028e-2, 0.637349 ], [ 0.579029, 6.4296e-2, 0.635126 ], [ 0.584391, 6.8579e-2, 0.632812 ], [ 0.589719, 7.2878e-2, 0.630408 ], [ 0.595011, 7.719e-2, 0.627917 ], [ 0.600266, 8.1516e-2, 0.625342 ], [ 0.605485, 8.5854e-2, 0.622686 ], [ 0.610667, 9.0204e-2, 0.619951 ], [ 0.615812, 9.4564e-2, 0.61714 ], [ 0.620919, 9.8934e-2, 0.614257 ], [ 0.625987, 0.103312, 0.611305 ], [ 0.631017, 0.107699, 0.608287 ], [ 0.636008, 0.112092, 0.605205 ], [ 0.640959, 0.116492, 0.602065 ], [ 0.645872, 0.120898, 0.598867 ], [ 0.650746, 0.125309, 0.595617 ], [ 0.65558, 0.129725, 0.592317 ], [ 0.660374, 0.134144, 0.588971 ], [ 0.665129, 0.138566, 0.585582 ], [ 0.669845, 0.142992, 0.582154 ], [ 0.674522, 0.147419, 0.578688 ], [ 0.67916, 0.151848, 0.575189 ], [ 0.683758, 0.156278, 0.57166 ], [ 0.688318, 0.160709, 0.568103 ], [ 0.69284, 0.165141, 0.564522 ], [ 0.697324, 0.169573, 0.560919 ], [ 0.701769, 0.174005, 0.557296 ], [ 0.706178, 0.178437, 0.553657 ], [ 0.710549, 0.182868, 0.550004 ], [ 0.714883, 0.187299, 0.546338 ], [ 0.719181, 0.191729, 0.542663 ], [ 0.723444, 0.196158, 0.538981 ], [ 0.72767, 0.200586, 0.535293 ], [ 0.731862, 0.205013, 0.531601 ], [ 0.736019, 0.209439, 0.527908 ], [ 0.740143, 0.213864, 0.524216 ], [ 0.744232, 0.218288, 0.520524 ], [ 0.748289, 0.222711, 0.516834 ], [ 0.752312, 0.227133, 0.513149 ], [ 0.756304, 0.231555, 0.509468 ], [ 0.760264, 0.235976, 0.505794 ], [ 0.764193, 0.240396, 0.502126 ], [ 0.76809, 0.244817, 0.498465 ], [ 0.771958, 0.249237, 0.494813 ], [ 0.775796, 0.253658, 0.491171 ], [ 0.779604, 0.258078, 0.487539 ], [ 0.783383, 0.2625, 0.483918 ], [ 0.787133, 0.266922, 0.480307 ], [ 0.790855, 0.271345, 0.476706 ], [ 0.794549, 0.27577, 0.473117 ], [ 0.798216, 0.280197, 0.469538 ], [ 0.801855, 0.284626, 0.465971 ], [ 0.805467, 0.289057, 0.462415 ], [ 0.809052, 0.293491, 0.45887 ], [ 0.812612, 0.297928, 0.455338 ], [ 0.816144, 0.302368, 0.451816 ], [ 0.819651, 0.306812, 0.448306 ], [ 0.823132, 0.311261, 0.444806 ], [ 0.826588, 0.315714, 0.441316 ], [ 0.830018, 0.320172, 0.437836 ], [ 0.833422, 0.324635, 0.434366 ], [ 0.836801, 0.329105, 0.430905 ], [ 0.840155, 0.33358, 0.427455 ], [ 0.843484, 0.338062, 0.424013 ], [ 0.846788, 0.342551, 0.420579 ], [ 0.850066, 0.347048, 0.417153 ], [ 0.853319, 0.351553, 0.413734 ], [ 0.856547, 0.356066, 0.410322 ], [ 0.85975, 0.360588, 0.406917 ], [ 0.862927, 0.365119, 0.403519 ], [ 0.866078, 0.36966, 0.400126 ], [ 0.869203, 0.374212, 0.396738 ], [ 0.872303, 0.378774, 0.393355 ], [ 0.875376, 0.383347, 0.389976 ], [ 0.878423, 0.387932, 0.3866 ], [ 0.881443, 0.392529, 0.383229 ], [ 0.884436, 0.397139, 0.37986 ], [ 0.887402, 0.401762, 0.376494 ], [ 0.89034, 0.406398, 0.37313 ], [ 0.89325, 0.411048, 0.369768 ], [ 0.896131, 0.415712, 0.366407 ], [ 0.898984, 0.420392, 0.363047 ], [ 0.901807, 0.425087, 0.359688 ], [ 0.904601, 0.429797, 0.356329 ], [ 0.907365, 0.434524, 0.35297 ], [ 0.910098, 0.439268, 0.34961 ], [ 0.9128, 0.444029, 0.346251 ], [ 0.915471, 0.448807, 0.34289 ], [ 0.918109, 0.453603, 0.339529 ], [ 0.920714, 0.458417, 0.336166 ], [ 0.923287, 0.463251, 0.332801 ], [ 0.925825, 0.468103, 0.329435 ], [ 0.928329, 0.472975, 0.326067 ], [ 0.930798, 0.477867, 0.322697 ], [ 0.933232, 0.48278, 0.319325 ], [ 0.93563, 0.487712, 0.315952 ], [ 0.93799, 0.492667, 0.312575 ], [ 0.940313, 0.497642, 0.309197 ], [ 0.942598, 0.502639, 0.305816 ], [ 0.944844, 0.507658, 0.302433 ], [ 0.947051, 0.512699, 0.299049 ], [ 0.949217, 0.517763, 0.295662 ], [ 0.951344, 0.52285, 0.292275 ], [ 0.953428, 0.52796, 0.288883 ], [ 0.95547, 0.533093, 0.28549 ], [ 0.957469, 0.53825, 0.282096 ], [ 0.959424, 0.543431, 0.278701 ], [ 0.961336, 0.548636, 0.275305 ], [ 0.963203, 0.553865, 0.271909 ], [ 0.965024, 0.559118, 0.268513 ], [ 0.966798, 0.564396, 0.265118 ], [ 0.968526, 0.5697, 0.261721 ], [ 0.970205, 0.575028, 0.258325 ], [ 0.971835, 0.580382, 0.254931 ], [ 0.973416, 0.585761, 0.25154 ], [ 0.974947, 0.591165, 0.248151 ], [ 0.976428, 0.596595, 0.244767 ], [ 0.977856, 0.602051, 0.241387 ], [ 0.979233, 0.607532, 0.238013 ], [ 0.980556, 0.613039, 0.234646 ], [ 0.981826, 0.618572, 0.231287 ], [ 0.983041, 0.624131, 0.227937 ], [ 0.984199, 0.629718, 0.224595 ], [ 0.985301, 0.63533, 0.221265 ], [ 0.986345, 0.640969, 0.217948 ], [ 0.987332, 0.646633, 0.214648 ], [ 0.98826, 0.652325, 0.211364 ], [ 0.989128, 0.658043, 0.2081 ], [ 0.989935, 0.663787, 0.204859 ], [ 0.990681, 0.669558, 0.201642 ], [ 0.991365, 0.675355, 0.198453 ], [ 0.991985, 0.681179, 0.195295 ], [ 0.992541, 0.68703, 0.19217 ], [ 0.993032, 0.692907, 0.189084 ], [ 0.993456, 0.69881, 0.186041 ], [ 0.993814, 0.704741, 0.183043 ], [ 0.994103, 0.710698, 0.180097 ], [ 0.994324, 0.716681, 0.177208 ], [ 0.994474, 0.722691, 0.174381 ], [ 0.994553, 0.728728, 0.171622 ], [ 0.994561, 0.734791, 0.168938 ], [ 0.994495, 0.74088, 0.166335 ], [ 0.994355, 0.746995, 0.163821 ], [ 0.994141, 0.753137, 0.161404 ], [ 0.993851, 0.759304, 0.159092 ], [ 0.993482, 0.765499, 0.156891 ], [ 0.993033, 0.77172, 0.154808 ], [ 0.992505, 0.777967, 0.152855 ], [ 0.991897, 0.784239, 0.151042 ], [ 0.991209, 0.790537, 0.149377 ], [ 0.990439, 0.796859, 0.14787 ], [ 0.989587, 0.803205, 0.146529 ], [ 0.988648, 0.809579, 0.145357 ], [ 0.987621, 0.815978, 0.144363 ], [ 0.986509, 0.822401, 0.143557 ], [ 0.985314, 0.828846, 0.142945 ], [ 0.984031, 0.835315, 0.142528 ], [ 0.982653, 0.841812, 0.142303 ], [ 0.98119, 0.848329, 0.142279 ], [ 0.979644, 0.854866, 0.142453 ], [ 0.977995, 0.861432, 0.142808 ], [ 0.976265, 0.868016, 0.143351 ], [ 0.974443, 0.874622, 0.144061 ], [ 0.97253, 0.88125, 0.144923 ], [ 0.970533, 0.887896, 0.145919 ], [ 0.968443, 0.894564, 0.147014 ], [ 0.966271, 0.901249, 0.14818 ], [ 0.964021, 0.90795, 0.14937 ], [ 0.961681, 0.914672, 0.15052 ], [ 0.959276, 0.921407, 0.151566 ], [ 0.956808, 0.928152, 0.152409 ], [ 0.954287, 0.934908, 0.152921 ], [ 0.951726, 0.941671, 0.152925 ], [ 0.949151, 0.948435, 0.152178 ], [ 0.946602, 0.95519, 0.150328 ], [ 0.944152, 0.961916, 0.146861 ], [ 0.941896, 0.96859, 0.140956 ], [ 0.940015, 0.975158, 0.131326 ] ];
var plasma = matplotlibScale()(_plasma_data);
var _magma_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.258e-3, 1.295e-3, 1.8331e-2 ], [ 3.279e-3, 2.305e-3, 2.3708e-2 ], [ 4.512e-3, 3.49e-3, 2.9965e-2 ], [ 5.95e-3, 4.843e-3, 3.713e-2 ], [ 7.588e-3, 6.356e-3, 4.4973e-2 ], [ 9.426e-3, 8.022e-3, 5.2844e-2 ], [ 1.1465e-2, 9.828e-3, 6.075e-2 ], [ 1.3708e-2, 1.1771e-2, 6.8667e-2 ], [ 1.6156e-2, 1.384e-2, 7.6603e-2 ], [ 1.8815e-2, 1.6026e-2, 8.4584e-2 ], [ 2.1692e-2, 1.832e-2, 9.261e-2 ], [ 2.4792e-2, 2.0715e-2, 0.100676 ], [ 2.8123e-2, 2.3201e-2, 0.108787 ], [ 3.1696e-2, 2.5765e-2, 0.116965 ], [ 3.552e-2, 2.8397e-2, 0.125209 ], [ 3.9608e-2, 3.109e-2, 0.133515 ], [ 4.383e-2, 3.383e-2, 0.141886 ], [ 4.8062e-2, 3.6607e-2, 0.150327 ], [ 5.232e-2, 3.9407e-2, 0.158841 ], [ 5.6615e-2, 4.216e-2, 0.167446 ], [ 6.0949e-2, 4.4794e-2, 0.176129 ], [ 6.533e-2, 4.7318e-2, 0.184892 ], [ 6.9764e-2, 4.9726e-2, 0.193735 ], [ 7.4257e-2, 5.2017e-2, 0.20266 ], [ 7.8815e-2, 5.4184e-2, 0.211667 ], [ 8.3446e-2, 5.6225e-2, 0.220755 ], [ 8.8155e-2, 5.8133e-2, 0.229922 ], [ 9.2949e-2, 5.9904e-2, 0.239164 ], [ 9.7833e-2, 6.1531e-2, 0.248477 ], [ 0.102815, 6.301e-2, 0.257854 ], [ 0.107899, 6.4335e-2, 0.267289 ], [ 0.113094, 6.5492e-2, 0.276784 ], [ 0.118405, 6.6479e-2, 0.286321 ], [ 0.123833, 6.7295e-2, 0.295879 ], [ 0.12938, 6.7935e-2, 0.305443 ], [ 0.135053, 6.8391e-2, 0.315 ], [ 0.140858, 6.8654e-2, 0.324538 ], [ 0.146785, 6.8738e-2, 0.334011 ], [ 0.152839, 6.8637e-2, 0.343404 ], [ 0.159018, 6.8354e-2, 0.352688 ], [ 0.165308, 6.7911e-2, 0.361816 ], [ 0.171713, 6.7305e-2, 0.370771 ], [ 0.178212, 6.6576e-2, 0.379497 ], [ 0.184801, 6.5732e-2, 0.387973 ], [ 0.19146, 6.4818e-2, 0.396152 ], [ 0.198177, 6.3862e-2, 0.404009 ], [ 0.204935, 6.2907e-2, 0.411514 ], [ 0.211718, 6.1992e-2, 0.418647 ], [ 0.218512, 6.1158e-2, 0.425392 ], [ 0.225302, 6.0445e-2, 0.431742 ], [ 0.232077, 5.9889e-2, 0.437695 ], [ 0.238826, 5.9517e-2, 0.443256 ], [ 0.245543, 5.9352e-2, 0.448436 ], [ 0.25222, 5.9415e-2, 0.453248 ], [ 0.258857, 5.9706e-2, 0.45771 ], [ 0.265447, 6.0237e-2, 0.46184 ], [ 0.271994, 6.0994e-2, 0.46566 ], [ 0.278493, 6.1978e-2, 0.46919 ], [ 0.284951, 6.3168e-2, 0.472451 ], [ 0.291366, 6.4553e-2, 0.475462 ], [ 0.29774, 6.6117e-2, 0.478243 ], [ 0.304081, 6.7835e-2, 0.480812 ], [ 0.310382, 6.9702e-2, 0.483186 ], [ 0.316654, 7.169e-2, 0.48538 ], [ 0.322899, 7.3782e-2, 0.487408 ], [ 0.329114, 7.5972e-2, 0.489287 ], [ 0.335308, 7.8236e-2, 0.491024 ], [ 0.341482, 8.0564e-2, 0.492631 ], [ 0.347636, 8.2946e-2, 0.494121 ], [ 0.353773, 8.5373e-2, 0.495501 ], [ 0.359898, 8.7831e-2, 0.496778 ], [ 0.366012, 9.0314e-2, 0.49796 ], [ 0.372116, 9.2816e-2, 0.499053 ], [ 0.378211, 9.5332e-2, 0.500067 ], [ 0.384299, 9.7855e-2, 0.501002 ], [ 0.390384, 0.100379, 0.501864 ], [ 0.396467, 0.102902, 0.502658 ], [ 0.402548, 0.10542, 0.503386 ], [ 0.408629, 0.10793, 0.504052 ], [ 0.414709, 0.110431, 0.504662 ], [ 0.420791, 0.11292, 0.505215 ], [ 0.426877, 0.115395, 0.505714 ], [ 0.432967, 0.117855, 0.50616 ], [ 0.439062, 0.120298, 0.506555 ], [ 0.445163, 0.122724, 0.506901 ], [ 0.451271, 0.125132, 0.507198 ], [ 0.457386, 0.127522, 0.507448 ], [ 0.463508, 0.129893, 0.507652 ], [ 0.46964, 0.132245, 0.507809 ], [ 0.47578, 0.134577, 0.507921 ], [ 0.481929, 0.136891, 0.507989 ], [ 0.488088, 0.139186, 0.508011 ], [ 0.494258, 0.141462, 0.507988 ], [ 0.500438, 0.143719, 0.50792 ], [ 0.506629, 0.145958, 0.507806 ], [ 0.512831, 0.148179, 0.507648 ], [ 0.519045, 0.150383, 0.507443 ], [ 0.52527, 0.152569, 0.507192 ], [ 0.531507, 0.154739, 0.506895 ], [ 0.537755, 0.156894, 0.506551 ], [ 0.544015, 0.159033, 0.506159 ], [ 0.550287, 0.161158, 0.505719 ], [ 0.556571, 0.163269, 0.50523 ], [ 0.562866, 0.165368, 0.504692 ], [ 0.569172, 0.167454, 0.504105 ], [ 0.57549, 0.16953, 0.503466 ], [ 0.581819, 0.171596, 0.502777 ], [ 0.588158, 0.173652, 0.502035 ], [ 0.594508, 0.175701, 0.501241 ], [ 0.600868, 0.177743, 0.500394 ], [ 0.607238, 0.179779, 0.499492 ], [ 0.613617, 0.181811, 0.498536 ], [ 0.620005, 0.18384, 0.497524 ], [ 0.626401, 0.185867, 0.496456 ], [ 0.632805, 0.187893, 0.495332 ], [ 0.639216, 0.189921, 0.49415 ], [ 0.645633, 0.191952, 0.49291 ], [ 0.652056, 0.193986, 0.491611 ], [ 0.658483, 0.196027, 0.490253 ], [ 0.664915, 0.198075, 0.488836 ], [ 0.671349, 0.200133, 0.487358 ], [ 0.677786, 0.202203, 0.485819 ], [ 0.684224, 0.204286, 0.484219 ], [ 0.690661, 0.206384, 0.482558 ], [ 0.697098, 0.208501, 0.480835 ], [ 0.703532, 0.210638, 0.479049 ], [ 0.709962, 0.212797, 0.477201 ], [ 0.716387, 0.214982, 0.47529 ], [ 0.722805, 0.217194, 0.473316 ], [ 0.729216, 0.219437, 0.471279 ], [ 0.735616, 0.221713, 0.46918 ], [ 0.742004, 0.224025, 0.467018 ], [ 0.748378, 0.226377, 0.464794 ], [ 0.754737, 0.228772, 0.462509 ], [ 0.761077, 0.231214, 0.460162 ], [ 0.767398, 0.233705, 0.457755 ], [ 0.773695, 0.236249, 0.455289 ], [ 0.779968, 0.238851, 0.452765 ], [ 0.786212, 0.241514, 0.450184 ], [ 0.792427, 0.244242, 0.447543 ], [ 0.798608, 0.24704, 0.444848 ], [ 0.804752, 0.249911, 0.442102 ], [ 0.810855, 0.252861, 0.439305 ], [ 0.816914, 0.255895, 0.436461 ], [ 0.822926, 0.259016, 0.433573 ], [ 0.828886, 0.262229, 0.430644 ], [ 0.834791, 0.26554, 0.427671 ], [ 0.840636, 0.268953, 0.424666 ], [ 0.846416, 0.272473, 0.421631 ], [ 0.852126, 0.276106, 0.418573 ], [ 0.857763, 0.279857, 0.415496 ], [ 0.86332, 0.283729, 0.412403 ], [ 0.868793, 0.287728, 0.409303 ], [ 0.874176, 0.291859, 0.406205 ], [ 0.879464, 0.296125, 0.403118 ], [ 0.884651, 0.30053, 0.400047 ], [ 0.889731, 0.305079, 0.397002 ], [ 0.8947, 0.309773, 0.393995 ], [ 0.899552, 0.314616, 0.391037 ], [ 0.904281, 0.31961, 0.388137 ], [ 0.908884, 0.324755, 0.385308 ], [ 0.913354, 0.330052, 0.382563 ], [ 0.917689, 0.3355, 0.379915 ], [ 0.921884, 0.341098, 0.377376 ], [ 0.925937, 0.346844, 0.374959 ], [ 0.929845, 0.352734, 0.372677 ], [ 0.933606, 0.358764, 0.370541 ], [ 0.937221, 0.364929, 0.368567 ], [ 0.940687, 0.371224, 0.366762 ], [ 0.944006, 0.377643, 0.365136 ], [ 0.94718, 0.384178, 0.363701 ], [ 0.95021, 0.39082, 0.362468 ], [ 0.953099, 0.397563, 0.361438 ], [ 0.955849, 0.4044, 0.360619 ], [ 0.958464, 0.411324, 0.360014 ], [ 0.960949, 0.418323, 0.35963 ], [ 0.96331, 0.42539, 0.359469 ], [ 0.965549, 0.432519, 0.359529 ], [ 0.967671, 0.439703, 0.35981 ], [ 0.96968, 0.446936, 0.360311 ], [ 0.971582, 0.45421, 0.36103 ], [ 0.973381, 0.46152, 0.361965 ], [ 0.975082, 0.468861, 0.363111 ], [ 0.97669, 0.476226, 0.364466 ], [ 0.97821, 0.483612, 0.366025 ], [ 0.979645, 0.491014, 0.367783 ], [ 0.981, 0.498428, 0.369734 ], [ 0.982279, 0.505851, 0.371874 ], [ 0.983485, 0.51328, 0.374198 ], [ 0.984622, 0.520713, 0.376698 ], [ 0.985693, 0.528148, 0.379371 ], [ 0.9867, 0.535582, 0.38221 ], [ 0.987646, 0.543015, 0.38521 ], [ 0.988533, 0.550446, 0.388365 ], [ 0.989363, 0.557873, 0.391671 ], [ 0.990138, 0.565296, 0.395122 ], [ 0.990871, 0.572706, 0.398714 ], [ 0.991558, 0.580107, 0.402441 ], [ 0.992196, 0.587502, 0.406299 ], [ 0.992785, 0.594891, 0.410283 ], [ 0.993326, 0.602275, 0.41439 ], [ 0.993834, 0.609644, 0.418613 ], [ 0.994309, 0.616999, 0.42295 ], [ 0.994738, 0.62435, 0.427397 ], [ 0.995122, 0.631696, 0.431951 ], [ 0.99548, 0.639027, 0.436607 ], [ 0.99581, 0.646344, 0.441361 ], [ 0.996096, 0.653659, 0.446213 ], [ 0.996341, 0.660969, 0.45116 ], [ 0.99658, 0.668256, 0.456192 ], [ 0.996775, 0.675541, 0.461314 ], [ 0.996925, 0.682828, 0.466526 ], [ 0.997077, 0.690088, 0.471811 ], [ 0.997186, 0.697349, 0.477182 ], [ 0.997254, 0.704611, 0.482635 ], [ 0.997325, 0.711848, 0.488154 ], [ 0.997351, 0.719089, 0.493755 ], [ 0.997351, 0.726324, 0.499428 ], [ 0.997341, 0.733545, 0.505167 ], [ 0.997285, 0.740772, 0.510983 ], [ 0.997228, 0.747981, 0.516859 ], [ 0.997138, 0.75519, 0.522806 ], [ 0.997019, 0.762398, 0.528821 ], [ 0.996898, 0.769591, 0.534892 ], [ 0.996727, 0.776795, 0.541039 ], [ 0.996571, 0.783977, 0.547233 ], [ 0.996369, 0.791167, 0.553499 ], [ 0.996162, 0.798348, 0.55982 ], [ 0.995932, 0.805527, 0.566202 ], [ 0.99568, 0.812706, 0.572645 ], [ 0.995424, 0.819875, 0.57914 ], [ 0.995131, 0.827052, 0.585701 ], [ 0.994851, 0.834213, 0.592307 ], [ 0.994524, 0.841387, 0.598983 ], [ 0.994222, 0.84854, 0.605696 ], [ 0.993866, 0.855711, 0.612482 ], [ 0.993545, 0.862859, 0.619299 ], [ 0.99317, 0.870024, 0.626189 ], [ 0.992831, 0.877168, 0.633109 ], [ 0.99244, 0.88433, 0.640099 ], [ 0.992089, 0.89147, 0.647116 ], [ 0.991688, 0.898627, 0.654202 ], [ 0.991332, 0.905763, 0.661309 ], [ 0.99093, 0.912915, 0.668481 ], [ 0.99057, 0.920049, 0.675675 ], [ 0.990175, 0.927196, 0.682926 ], [ 0.989815, 0.934329, 0.690198 ], [ 0.989434, 0.94147, 0.697519 ], [ 0.989077, 0.948604, 0.704863 ], [ 0.988717, 0.955742, 0.712242 ], [ 0.988367, 0.962878, 0.719649 ], [ 0.988033, 0.970012, 0.727077 ], [ 0.987691, 0.977154, 0.734536 ], [ 0.987387, 0.984288, 0.742002 ], [ 0.987053, 0.991438, 0.749504 ] ];
var magma = matplotlibScale()(_magma_data);
var _inferno_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.267e-3, 1.27e-3, 1.857e-2 ], [ 3.299e-3, 2.249e-3, 2.4239e-2 ], [ 4.547e-3, 3.392e-3, 3.0909e-2 ], [ 6.006e-3, 4.692e-3, 3.8558e-2 ], [ 7.676e-3, 6.136e-3, 4.6836e-2 ], [ 9.561e-3, 7.713e-3, 5.5143e-2 ], [ 1.1663e-2, 9.417e-3, 6.346e-2 ], [ 1.3995e-2, 1.1225e-2, 7.1862e-2 ], [ 1.6561e-2, 1.3136e-2, 8.0282e-2 ], [ 1.9373e-2, 1.5133e-2, 8.8767e-2 ], [ 2.2447e-2, 1.7199e-2, 9.7327e-2 ], [ 2.5793e-2, 1.9331e-2, 0.10593 ], [ 2.9432e-2, 2.1503e-2, 0.114621 ], [ 3.3385e-2, 2.3702e-2, 0.123397 ], [ 3.7668e-2, 2.5921e-2, 0.132232 ], [ 4.2253e-2, 2.8139e-2, 0.141141 ], [ 4.6915e-2, 3.0324e-2, 0.150164 ], [ 5.1644e-2, 3.2474e-2, 0.159254 ], [ 5.6449e-2, 3.4569e-2, 0.168414 ], [ 6.134e-2, 3.659e-2, 0.177642 ], [ 6.6331e-2, 3.8504e-2, 0.186962 ], [ 7.1429e-2, 4.0294e-2, 0.196354 ], [ 7.6637e-2, 4.1905e-2, 0.205799 ], [ 8.1962e-2, 4.3328e-2, 0.215289 ], [ 8.7411e-2, 4.4556e-2, 0.224813 ], [ 9.299e-2, 4.5583e-2, 0.234358 ], [ 9.8702e-2, 4.6402e-2, 0.243904 ], [ 0.104551, 4.7008e-2, 0.25343 ], [ 0.110536, 4.7399e-2, 0.262912 ], [ 0.116656, 4.7574e-2, 0.272321 ], [ 0.122908, 4.7536e-2, 0.281624 ], [ 0.129285, 4.7293e-2, 0.290788 ], [ 0.135778, 4.6856e-2, 0.299776 ], [ 0.142378, 4.6242e-2, 0.308553 ], [ 0.149073, 4.5468e-2, 0.317085 ], [ 0.15585, 4.4559e-2, 0.325338 ], [ 0.162689, 4.3554e-2, 0.333277 ], [ 0.169575, 4.2489e-2, 0.340874 ], [ 0.176493, 4.1402e-2, 0.348111 ], [ 0.183429, 4.0329e-2, 0.354971 ], [ 0.190367, 3.9309e-2, 0.361447 ], [ 0.197297, 3.84e-2, 0.367535 ], [ 0.204209, 3.7632e-2, 0.373238 ], [ 0.211095, 3.703e-2, 0.378563 ], [ 0.217949, 3.6615e-2, 0.383522 ], [ 0.224763, 3.6405e-2, 0.388129 ], [ 0.231538, 3.6405e-2, 0.3924 ], [ 0.238273, 3.6621e-2, 0.396353 ], [ 0.244967, 3.7055e-2, 0.400007 ], [ 0.25162, 3.7705e-2, 0.403378 ], [ 0.258234, 3.8571e-2, 0.406485 ], [ 0.26481, 3.9647e-2, 0.409345 ], [ 0.271347, 4.0922e-2, 0.411976 ], [ 0.27785, 4.2353e-2, 0.414392 ], [ 0.284321, 4.3933e-2, 0.416608 ], [ 0.290763, 4.5644e-2, 0.418637 ], [ 0.297178, 4.747e-2, 0.420491 ], [ 0.303568, 4.9396e-2, 0.422182 ], [ 0.309935, 5.1407e-2, 0.423721 ], [ 0.316282, 5.349e-2, 0.425116 ], [ 0.32261, 5.5634e-2, 0.426377 ], [ 0.328921, 5.7827e-2, 0.427511 ], [ 0.335217, 6.006e-2, 0.428524 ], [ 0.3415, 6.2325e-2, 0.429425 ], [ 0.347771, 6.4616e-2, 0.430217 ], [ 0.354032, 6.6925e-2, 0.430906 ], [ 0.360284, 6.9247e-2, 0.431497 ], [ 0.366529, 7.1579e-2, 0.431994 ], [ 0.372768, 7.3915e-2, 0.4324 ], [ 0.379001, 7.6253e-2, 0.432719 ], [ 0.385228, 7.8591e-2, 0.432955 ], [ 0.391453, 8.0927e-2, 0.433109 ], [ 0.397674, 8.3257e-2, 0.433183 ], [ 0.403894, 8.558e-2, 0.433179 ], [ 0.410113, 8.7896e-2, 0.433098 ], [ 0.416331, 9.0203e-2, 0.432943 ], [ 0.422549, 9.2501e-2, 0.432714 ], [ 0.428768, 9.479e-2, 0.432412 ], [ 0.434987, 9.7069e-2, 0.432039 ], [ 0.441207, 9.9338e-2, 0.431594 ], [ 0.447428, 0.101597, 0.43108 ], [ 0.453651, 0.103848, 0.430498 ], [ 0.459875, 0.106089, 0.429846 ], [ 0.4661, 0.108322, 0.429125 ], [ 0.472328, 0.110547, 0.428334 ], [ 0.478558, 0.112764, 0.427475 ], [ 0.484789, 0.114974, 0.426548 ], [ 0.491022, 0.117179, 0.425552 ], [ 0.497257, 0.119379, 0.424488 ], [ 0.503493, 0.121575, 0.423356 ], [ 0.50973, 0.123769, 0.422156 ], [ 0.515967, 0.12596, 0.420887 ], [ 0.522206, 0.12815, 0.419549 ], [ 0.528444, 0.130341, 0.418142 ], [ 0.534683, 0.132534, 0.416667 ], [ 0.54092, 0.134729, 0.415123 ], [ 0.547157, 0.136929, 0.413511 ], [ 0.553392, 0.139134, 0.411829 ], [ 0.559624, 0.141346, 0.410078 ], [ 0.565854, 0.143567, 0.408258 ], [ 0.572081, 0.145797, 0.406369 ], [ 0.578304, 0.148039, 0.404411 ], [ 0.584521, 0.150294, 0.402385 ], [ 0.590734, 0.152563, 0.40029 ], [ 0.59694, 0.154848, 0.398125 ], [ 0.603139, 0.157151, 0.395891 ], [ 0.60933, 0.159474, 0.393589 ], [ 0.615513, 0.161817, 0.391219 ], [ 0.621685, 0.164184, 0.388781 ], [ 0.627847, 0.166575, 0.386276 ], [ 0.633998, 0.168992, 0.383704 ], [ 0.640135, 0.171438, 0.381065 ], [ 0.64626, 0.173914, 0.378359 ], [ 0.652369, 0.176421, 0.375586 ], [ 0.658463, 0.178962, 0.372748 ], [ 0.66454, 0.181539, 0.369846 ], [ 0.670599, 0.184153, 0.366879 ], [ 0.676638, 0.186807, 0.363849 ], [ 0.682656, 0.189501, 0.360757 ], [ 0.688653, 0.192239, 0.357603 ], [ 0.694627, 0.195021, 0.354388 ], [ 0.700576, 0.197851, 0.351113 ], [ 0.7065, 0.200728, 0.347777 ], [ 0.712396, 0.203656, 0.344383 ], [ 0.718264, 0.206636, 0.340931 ], [ 0.724103, 0.20967, 0.337424 ], [ 0.729909, 0.212759, 0.333861 ], [ 0.735683, 0.215906, 0.330245 ], [ 0.741423, 0.219112, 0.326576 ], [ 0.747127, 0.222378, 0.322856 ], [ 0.752794, 0.225706, 0.319085 ], [ 0.758422, 0.229097, 0.315266 ], [ 0.76401, 0.232554, 0.311399 ], [ 0.769556, 0.236077, 0.307485 ], [ 0.775059, 0.239667, 0.303526 ], [ 0.780517, 0.243327, 0.299523 ], [ 0.785929, 0.247056, 0.295477 ], [ 0.791293, 0.250856, 0.29139 ], [ 0.796607, 0.254728, 0.287264 ], [ 0.801871, 0.258674, 0.283099 ], [ 0.807082, 0.262692, 0.278898 ], [ 0.812239, 0.266786, 0.274661 ], [ 0.817341, 0.270954, 0.27039 ], [ 0.822386, 0.275197, 0.266085 ], [ 0.827372, 0.279517, 0.26175 ], [ 0.832299, 0.283913, 0.257383 ], [ 0.837165, 0.288385, 0.252988 ], [ 0.841969, 0.292933, 0.248564 ], [ 0.846709, 0.297559, 0.244113 ], [ 0.851384, 0.30226, 0.239636 ], [ 0.855992, 0.307038, 0.235133 ], [ 0.860533, 0.311892, 0.230606 ], [ 0.865006, 0.316822, 0.226055 ], [ 0.869409, 0.321827, 0.221482 ], [ 0.873741, 0.326906, 0.216886 ], [ 0.878001, 0.33206, 0.212268 ], [ 0.882188, 0.337287, 0.207628 ], [ 0.886302, 0.342586, 0.202968 ], [ 0.890341, 0.347957, 0.198286 ], [ 0.894305, 0.353399, 0.193584 ], [ 0.898192, 0.358911, 0.18886 ], [ 0.902003, 0.364492, 0.184116 ], [ 0.905735, 0.37014, 0.17935 ], [ 0.90939, 0.375856, 0.174563 ], [ 0.912966, 0.381636, 0.169755 ], [ 0.916462, 0.387481, 0.164924 ], [ 0.919879, 0.393389, 0.16007 ], [ 0.923215, 0.399359, 0.155193 ], [ 0.92647, 0.405389, 0.150292 ], [ 0.929644, 0.411479, 0.145367 ], [ 0.932737, 0.417627, 0.140417 ], [ 0.935747, 0.423831, 0.13544 ], [ 0.938675, 0.430091, 0.130438 ], [ 0.941521, 0.436405, 0.125409 ], [ 0.944285, 0.442772, 0.120354 ], [ 0.946965, 0.449191, 0.115272 ], [ 0.949562, 0.45566, 0.110164 ], [ 0.952075, 0.462178, 0.105031 ], [ 0.954506, 0.468744, 9.9874e-2 ], [ 0.956852, 0.475356, 9.4695e-2 ], [ 0.959114, 0.482014, 8.9499e-2 ], [ 0.961293, 0.488716, 8.4289e-2 ], [ 0.963387, 0.495462, 7.9073e-2 ], [ 0.965397, 0.502249, 7.3859e-2 ], [ 0.967322, 0.509078, 6.8659e-2 ], [ 0.969163, 0.515946, 6.3488e-2 ], [ 0.970919, 0.522853, 5.8367e-2 ], [ 0.97259, 0.529798, 5.3324e-2 ], [ 0.974176, 0.53678, 4.8392e-2 ], [ 0.975677, 0.543798, 4.3618e-2 ], [ 0.977092, 0.55085, 3.905e-2 ], [ 0.978422, 0.557937, 3.4931e-2 ], [ 0.979666, 0.565057, 3.1409e-2 ], [ 0.980824, 0.572209, 2.8508e-2 ], [ 0.981895, 0.579392, 2.625e-2 ], [ 0.982881, 0.586606, 2.4661e-2 ], [ 0.983779, 0.593849, 2.377e-2 ], [ 0.984591, 0.601122, 2.3606e-2 ], [ 0.985315, 0.608422, 2.4202e-2 ], [ 0.985952, 0.61575, 2.5592e-2 ], [ 0.986502, 0.623105, 2.7814e-2 ], [ 0.986964, 0.630485, 3.0908e-2 ], [ 0.987337, 0.63789, 3.4916e-2 ], [ 0.987622, 0.64532, 3.9886e-2 ], [ 0.987819, 0.652773, 4.5581e-2 ], [ 0.987926, 0.66025, 5.175e-2 ], [ 0.987945, 0.667748, 5.8329e-2 ], [ 0.987874, 0.675267, 6.5257e-2 ], [ 0.987714, 0.682807, 7.2489e-2 ], [ 0.987464, 0.690366, 7.999e-2 ], [ 0.987124, 0.697944, 8.7731e-2 ], [ 0.986694, 0.70554, 9.5694e-2 ], [ 0.986175, 0.713153, 0.103863 ], [ 0.985566, 0.720782, 0.112229 ], [ 0.984865, 0.728427, 0.120785 ], [ 0.984075, 0.736087, 0.129527 ], [ 0.983196, 0.743758, 0.138453 ], [ 0.982228, 0.751442, 0.147565 ], [ 0.981173, 0.759135, 0.156863 ], [ 0.980032, 0.766837, 0.166353 ], [ 0.978806, 0.774545, 0.176037 ], [ 0.977497, 0.782258, 0.185923 ], [ 0.976108, 0.789974, 0.196018 ], [ 0.974638, 0.797692, 0.206332 ], [ 0.973088, 0.805409, 0.216877 ], [ 0.971468, 0.813122, 0.227658 ], [ 0.969783, 0.820825, 0.238686 ], [ 0.968041, 0.828515, 0.249972 ], [ 0.966243, 0.836191, 0.261534 ], [ 0.964394, 0.843848, 0.273391 ], [ 0.962517, 0.851476, 0.285546 ], [ 0.960626, 0.859069, 0.29801 ], [ 0.95872, 0.866624, 0.31082 ], [ 0.956834, 0.874129, 0.323974 ], [ 0.954997, 0.881569, 0.337475 ], [ 0.953215, 0.888942, 0.351369 ], [ 0.951546, 0.896226, 0.365627 ], [ 0.950018, 0.903409, 0.380271 ], [ 0.948683, 0.910473, 0.395289 ], [ 0.947594, 0.917399, 0.410665 ], [ 0.946809, 0.924168, 0.426373 ], [ 0.946392, 0.930761, 0.442367 ], [ 0.946403, 0.937159, 0.458592 ], [ 0.946903, 0.943348, 0.47497 ], [ 0.947937, 0.949318, 0.491426 ], [ 0.949545, 0.955063, 0.50786 ], [ 0.95174, 0.960587, 0.524203 ], [ 0.954529, 0.965896, 0.540361 ], [ 0.957896, 0.971003, 0.556275 ], [ 0.961812, 0.975924, 0.571925 ], [ 0.966249, 0.980678, 0.587206 ], [ 0.971162, 0.985282, 0.602154 ], [ 0.976511, 0.989753, 0.61676 ], [ 0.982257, 0.994109, 0.631017 ], [ 0.988362, 0.998364, 0.644924 ] ];
var inferno = matplotlibScale()(_inferno_data);
module.exports = {
    inferno: inferno, 
    magma: magma, 
    plasma: plasma, 
    viridis: viridis
};

},{"../Color":4,"../Color.Scale":2,"../Data.Array":38,"../Data.Array.Partial":33,"../Data.Foldable":60,"../Data.Functor":66,"../Partial.Unsafe":127,"../Prelude":130}],2:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Color = require("../Color");
var Color_Scheme_X11 = require("../Color.Scheme.X11");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var ColorStop = (function () {
    function ColorStop(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ColorStop.create = function (value0) {
        return function (value1) {
            return new ColorStop(value0, value1);
        };
    };
    return ColorStop;
})();
var ColorScale = (function () {
    function ColorScale(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    ColorScale.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new ColorScale(value0, value1, value2, value3);
                };
            };
        };
    };
    return ColorScale;
})();
var stopRatio = function (v) {
    return v.value1;
};
var stopColor = function (v) {
    return v.value0;
};
var ratio = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0);
var modify = function (f) {
    return function (v) {
        var f$prime = function (v1) {
            return new ColorStop(f(v1.value1)(v1.value0), v1.value1);
        };
        return new ColorScale(v.value0, f(0.0)(v.value1), Data_Functor.map(Data_List_Types.functorList)(f$prime)(v.value2), f(1.0)(v.value3));
    };
};
var colorStop = function (c) {
    return function (r) {
        return new ColorStop(c, ratio(r));
    };
};
var sample = function (v) {
    return function (x) {
        if (x < 0.0) {
            return v.value1;
        };
        if (x > 1.0) {
            return v.value3;
        };
        if (Data_Boolean.otherwise) {
            var go = function (__copy_v1) {
                return function (__copy_v2) {
                    return function (__copy_v3) {
                        var __tco_v1 = __copy_v1;
                        var __tco_v2 = __copy_v2;
                        var __tco_done = false;
                        var __tco_result;
                        function __tco_loop(v1, v2, v3) {
                            if (v3 instanceof Data_List_Types.Nil) {
                                __tco_done = true;
                                return v1;
                            };
                            if (v3 instanceof Data_List_Types.Cons) {
                                var $39 = Data_Ord.between(Data_Ord.ordNumber)(v2)(v3.value0.value1)(x);
                                if ($39) {
                                    var $40 = v2 === v3.value0.value1;
                                    if ($40) {
                                        __tco_done = true;
                                        return v1;
                                    };
                                    __tco_done = true;
                                    return Color.mix(v.value0)(v1)(v3.value0.value0)((x - v2) / (v3.value0.value1 - v2));
                                };
                                __tco_v1 = v3.value0.value0;
                                __tco_v2 = v3.value0.value1;
                                __copy_v3 = v3.value1;
                                return;
                            };
                            throw new Error("Failed pattern match at Color.Scale line 89, column 17 - line 97, column 30: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                        };
                        while (!__tco_done) {
                            __tco_result = __tco_loop(__tco_v1, __tco_v2, __copy_v3);
                        };
                        return __tco_result;
                    };
                };
            };
            return go(v.value1)(0.0)(Data_List.snoc(v.value2)(colorStop(v.value3)(1.0)));
        };
        throw new Error("Failed pattern match at Color.Scale line 86, column 1 - line 97, column 30: " + [ v.constructor.name, x.constructor.name ]);
    };
};
var colors = function (v) {
    return function (v1) {
        if (v1 === 0) {
            return Data_List_Types.Nil.value;
        };
        if (v1 === 1) {
            return Data_List.singleton(v.value1);
        };
        return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(v1 - 1 | 0))(function (v2) {
            return Control_Applicative.pure(Data_List_Types.applicativeList)(sample(v)(Data_Int.toNumber(v2) / Data_Int.toNumber(v1 - 1 | 0)));
        });
    };
};
var colorScale = ColorScale.create;
var cool = colorScale(Color.RGB.value)(Color.hsl(180.0)(1.0)(0.6))(Data_List_Types.Nil.value)(Color.hsl(300.0)(1.0)(0.5));
var grayscale = colorScale(Color.RGB.value)(Color.black)(Data_List_Types.Nil.value)(Color.white);
var hot = colorScale(Color.RGB.value)(Color.black)(new Data_List_Types.Cons(colorStop(Color_Scheme_X11.red)(0.5), new Data_List_Types.Cons(colorStop(Color_Scheme_X11.yellow)(0.75), Data_List_Types.Nil.value)))(Color.white);
var spectrum = (function () {
    var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
        var r = Data_Int.toNumber(v);
        return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.hsl(10.0 * r)(1.0)(0.5))(r / 36.0));
    });
    var end = Color.hsl(0.0)(1.0)(0.5);
    return colorScale(Color.HSL.value)(end)(stops)(end);
})();
var spectrumLCh = (function () {
    var end = Color.lch(70.0)(35.0)(0.0);
    var stops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(35))(function (v) {
        var r = Data_Int.toNumber(v);
        return Control_Applicative.pure(Data_List_Types.applicativeList)(colorStop(Color.lch(70.0)(35.0)(10.0 * r))(r / 36.0));
    });
    return colorScale(Color.LCh.value)(end)(stops)(end);
})();
var uniformScale = function (dictFoldable) {
    return function (mode) {
        return function (b) {
            return function (middle) {
                return function (e) {
                    var cs = Data_List.fromFoldable(dictFoldable)(middle);
                    var len = Data_List.length(cs);
                    var n = 1 + len | 0;
                    var makeStop = function (i) {
                        return function (col) {
                            return colorStop(col)(Data_Int.toNumber(i) / Data_Int.toNumber(n));
                        };
                    };
                    var stops = Data_List.zipWith(makeStop)(Data_List.range(1)(n))(cs);
                    return colorScale(mode)(b)(stops)(e);
                };
            };
        };
    };
};
var yellowToRed = (function () {
    var yellow = Color.fromInt(16777164);
    var red = Color.fromInt(8388646);
    var orange = Color.fromInt(16616764);
    return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(yellow)(new Data_List_Types.Cons(orange, Data_List_Types.Nil.value))(red);
})();
var blueToRed = (function () {
    var red = Color.fromInt(11671595);
    var gray = Color.fromInt(16250871);
    var blue = Color.fromInt(2188972);
    return uniformScale(Data_List_Types.foldableList)(Color.Lab.value)(blue)(new Data_List_Types.Cons(gray, Data_List_Types.Nil.value))(red);
})();
var addStop = function (v) {
    return function (c) {
        return function (r) {
            var stop = colorStop(c)(r);
            return new ColorScale(v.value0, v.value1, Data_List.insertBy(Data_Ord.comparing(Data_Ord.ordNumber)(stopRatio))(stop)(v.value2), v.value3);
        };
    };
};
var cssColorStops = function (__copy_v) {
    var __tco_done = false;
    var __tco_result;
    function __tco_loop(v) {
        if (v.value0 instanceof Color.RGB && v.value2 instanceof Data_List_Types.Nil) {
            __tco_done = true;
            return Color.cssStringHSLA(v.value1) + (", " + Color.cssStringHSLA(v.value3));
        };
        if (v.value0 instanceof Color.RGB) {
            var percentage = function (r) {
                return Data_Show.show(Data_Show.showNumber)(r * 100.0) + "%";
            };
            var toString = function (v1) {
                return Color.cssStringHSLA(v1.value0) + (" " + percentage(v1.value1));
            };
            __tco_done = true;
            return Color.cssStringHSLA(v.value1) + (", " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorList)(toString)(v.value2)) + (", " + Color.cssStringHSLA(v.value3))));
        };
        var csRGB$prime = new ColorScale(Color.RGB.value, v.value1, v.value2, v.value3);
        var additionalStops = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(9))(function (v1) {
            var frac = ratio(Data_Int.toNumber(v1) / 10.0);
            return Control_Applicative.pure(Data_List_Types.applicativeList)(new ColorStop(sample(v)(frac), frac));
        });
        var addStop$prime = function (scale$prime) {
            return function (v1) {
                return addStop(scale$prime)(v1.value0)(v1.value1);
            };
        };
        var csRGB = Data_Foldable.foldl(Data_List_Types.foldableList)(addStop$prime)(csRGB$prime)(additionalStops);
        __copy_v = csRGB;
        return;
    };
    while (!__tco_done) {
        __tco_result = __tco_loop(__copy_v);
    };
    return __tco_result;
};
module.exports = {
    addStop: addStop, 
    blueToRed: blueToRed, 
    colorScale: colorScale, 
    colorStop: colorStop, 
    colors: colors, 
    cool: cool, 
    cssColorStops: cssColorStops, 
    grayscale: grayscale, 
    hot: hot, 
    modify: modify, 
    sample: sample, 
    spectrum: spectrum, 
    spectrumLCh: spectrumLCh, 
    uniformScale: uniformScale, 
    yellowToRed: yellowToRed
};

},{"../Color":4,"../Color.Scheme.X11":3,"../Control.Applicative":7,"../Control.Bind":13,"../Data.Boolean":48,"../Data.Eq":55,"../Data.EuclideanRing":57,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.Int":73,"../Data.List":75,"../Data.List.Types":74,"../Data.Monoid":85,"../Data.Ord":92,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Prelude":130}],3:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Color = require("../Color");
var yellowgreen = Color.rgb(154)(205)(50);
var yellow = Color.rgb(255)(255)(0);
var whitesmoke = Color.rgb(245)(245)(245);
var wheat = Color.rgb(245)(222)(179);
var violet = Color.rgb(238)(130)(238);
var turquoise = Color.rgb(64)(224)(208);
var tomato = Color.rgb(255)(99)(71);
var thistle = Color.rgb(216)(191)(216);
var teal = Color.rgb(0)(128)(128);
var tan = Color.rgb(210)(180)(140);
var steelblue = Color.rgb(70)(130)(180);
var springgreen = Color.rgb(0)(255)(127);
var snow = Color.rgb(255)(250)(250);
var slategrey = Color.rgb(112)(128)(144);
var slategray = Color.rgb(112)(128)(144);
var slateblue = Color.rgb(106)(90)(205);
var skyblue = Color.rgb(135)(206)(235);
var silver = Color.rgb(192)(192)(192);
var sienna = Color.rgb(160)(82)(45);
var seashell = Color.rgb(255)(245)(238);
var seagreen = Color.rgb(46)(139)(87);
var sandybrown = Color.rgb(244)(164)(96);
var salmon = Color.rgb(250)(128)(114);
var saddlebrown = Color.rgb(139)(69)(19);
var royalblue = Color.rgb(65)(105)(225);
var rosybrown = Color.rgb(188)(143)(143);
var red = Color.rgb(255)(0)(0);
var purple = Color.rgb(128)(0)(128);
var powderblue = Color.rgb(176)(224)(230);
var plum = Color.rgb(221)(160)(221);
var pink = Color.rgb(255)(192)(203);
var peru = Color.rgb(205)(133)(63);
var peachpuff = Color.rgb(255)(218)(185);
var papayawhip = Color.rgb(255)(239)(213);
var palevioletred = Color.rgb(219)(112)(147);
var paleturquoise = Color.rgb(175)(238)(238);
var palegreen = Color.rgb(152)(251)(152);
var palegoldenrod = Color.rgb(238)(232)(170);
var orchid = Color.rgb(218)(112)(214);
var orangered = Color.rgb(255)(69)(0);
var orange = Color.rgb(255)(165)(0);
var olivedrab = Color.rgb(107)(142)(35);
var olive = Color.rgb(128)(128)(0);
var oldlace = Color.rgb(253)(245)(230);
var navy = Color.rgb(0)(0)(128);
var navajowhite = Color.rgb(255)(222)(173);
var moccasin = Color.rgb(255)(228)(181);
var mistyrose = Color.rgb(255)(228)(225);
var mintcream = Color.rgb(245)(255)(250);
var midnightblue = Color.rgb(25)(25)(112);
var mediumvioletred = Color.rgb(199)(21)(133);
var mediumturquoise = Color.rgb(72)(209)(204);
var mediumspringgreen = Color.rgb(0)(250)(154);
var mediumslateblue = Color.rgb(123)(104)(238);
var mediumseagreen = Color.rgb(60)(179)(113);
var mediumpurple = Color.rgb(147)(112)(219);
var mediumorchid = Color.rgb(186)(85)(211);
var mediumblue = Color.rgb(0)(0)(205);
var mediumaquamarine = Color.rgb(102)(205)(170);
var maroon = Color.rgb(128)(0)(0);
var magenta = Color.rgb(255)(0)(255);
var linen = Color.rgb(250)(240)(230);
var limegreen = Color.rgb(50)(205)(50);
var lime = Color.rgb(0)(255)(0);
var lightyellow = Color.rgb(255)(255)(224);
var lightsteelblue = Color.rgb(176)(196)(222);
var lightslategrey = Color.rgb(119)(136)(153);
var lightslategray = Color.rgb(119)(136)(153);
var lightskyblue = Color.rgb(135)(206)(250);
var lightseagreen = Color.rgb(32)(178)(170);
var lightsalmon = Color.rgb(255)(160)(122);
var lightpink = Color.rgb(255)(182)(193);
var lightgrey = Color.rgb(211)(211)(211);
var lightgreen = Color.rgb(144)(238)(144);
var lightgray = Color.rgb(211)(211)(211);
var lightgoldenrodyellow = Color.rgb(250)(250)(210);
var lightcyan = Color.rgb(224)(255)(255);
var lightcoral = Color.rgb(240)(128)(128);
var lightblue = Color.rgb(173)(216)(230);
var lemonchiffon = Color.rgb(255)(250)(205);
var lawngreen = Color.rgb(124)(252)(0);
var lavenderblush = Color.rgb(255)(240)(245);
var lavender = Color.rgb(230)(230)(250);
var khaki = Color.rgb(240)(230)(140);
var ivory = Color.rgb(255)(255)(240);
var indigo = Color.rgb(75)(0)(130);
var indianred = Color.rgb(205)(92)(92);
var hotpink = Color.rgb(255)(105)(180);
var honeydew = Color.rgb(240)(255)(240);
var grey = Color.rgb(128)(128)(128);
var greenyellow = Color.rgb(173)(255)(47);
var green = Color.rgb(0)(128)(0);
var gray = Color.rgb(128)(128)(128);
var goldenrod = Color.rgb(218)(165)(32);
var gold = Color.rgb(255)(215)(0);
var ghostwhite = Color.rgb(248)(248)(255);
var gainsboro = Color.rgb(220)(220)(220);
var fuchsia = Color.rgb(255)(0)(255);
var forestgreen = Color.rgb(34)(139)(34);
var floralwhite = Color.rgb(255)(250)(240);
var firebrick = Color.rgb(178)(34)(34);
var dodgerblue = Color.rgb(30)(144)(255);
var dimgrey = Color.rgb(105)(105)(105);
var dimgray = Color.rgb(105)(105)(105);
var deepskyblue = Color.rgb(0)(191)(255);
var deeppink = Color.rgb(255)(20)(147);
var darkviolet = Color.rgb(148)(0)(211);
var darkturquoise = Color.rgb(0)(206)(209);
var darkslategrey = Color.rgb(47)(79)(79);
var darkslategray = Color.rgb(47)(79)(79);
var darkslateblue = Color.rgb(72)(61)(139);
var darkseagreen = Color.rgb(143)(188)(143);
var darksalmon = Color.rgb(233)(150)(122);
var darkred = Color.rgb(139)(0)(0);
var darkorchid = Color.rgb(153)(50)(204);
var darkorange = Color.rgb(255)(140)(0);
var darkolivegreen = Color.rgb(85)(107)(47);
var darkmagenta = Color.rgb(139)(0)(139);
var darkkhaki = Color.rgb(189)(183)(107);
var darkgrey = Color.rgb(169)(169)(169);
var darkgreen = Color.rgb(0)(100)(0);
var darkgray = Color.rgb(169)(169)(169);
var darkgoldenrod = Color.rgb(184)(134)(11);
var darkcyan = Color.rgb(0)(139)(139);
var darkblue = Color.rgb(0)(0)(139);
var cyan = Color.rgb(0)(255)(255);
var crimson = Color.rgb(220)(20)(60);
var cornsilk = Color.rgb(255)(248)(220);
var cornflowerblue = Color.rgb(100)(149)(237);
var coral = Color.rgb(255)(127)(80);
var chocolate = Color.rgb(210)(105)(30);
var chartreuse = Color.rgb(127)(255)(0);
var cadetblue = Color.rgb(95)(158)(160);
var burlywood = Color.rgb(222)(184)(135);
var brown = Color.rgb(165)(42)(42);
var blueviolet = Color.rgb(138)(43)(226);
var blue = Color.rgb(0)(0)(255);
var blanchedalmond = Color.rgb(255)(235)(205);
var bisque = Color.rgb(255)(228)(196);
var beige = Color.rgb(245)(245)(220);
var azure = Color.rgb(240)(255)(255);
var aquamarine = Color.rgb(127)(255)(212);
var aqua = Color.rgb(0)(255)(255);
var antiquewhite = Color.rgb(250)(235)(215);
var aliceblue = Color.rgb(240)(248)(255);
module.exports = {
    aliceblue: aliceblue, 
    antiquewhite: antiquewhite, 
    aqua: aqua, 
    aquamarine: aquamarine, 
    azure: azure, 
    beige: beige, 
    bisque: bisque, 
    blanchedalmond: blanchedalmond, 
    blue: blue, 
    blueviolet: blueviolet, 
    brown: brown, 
    burlywood: burlywood, 
    cadetblue: cadetblue, 
    chartreuse: chartreuse, 
    chocolate: chocolate, 
    coral: coral, 
    cornflowerblue: cornflowerblue, 
    cornsilk: cornsilk, 
    crimson: crimson, 
    cyan: cyan, 
    darkblue: darkblue, 
    darkcyan: darkcyan, 
    darkgoldenrod: darkgoldenrod, 
    darkgray: darkgray, 
    darkgreen: darkgreen, 
    darkgrey: darkgrey, 
    darkkhaki: darkkhaki, 
    darkmagenta: darkmagenta, 
    darkolivegreen: darkolivegreen, 
    darkorange: darkorange, 
    darkorchid: darkorchid, 
    darkred: darkred, 
    darksalmon: darksalmon, 
    darkseagreen: darkseagreen, 
    darkslateblue: darkslateblue, 
    darkslategray: darkslategray, 
    darkslategrey: darkslategrey, 
    darkturquoise: darkturquoise, 
    darkviolet: darkviolet, 
    deeppink: deeppink, 
    deepskyblue: deepskyblue, 
    dimgray: dimgray, 
    dimgrey: dimgrey, 
    dodgerblue: dodgerblue, 
    firebrick: firebrick, 
    floralwhite: floralwhite, 
    forestgreen: forestgreen, 
    fuchsia: fuchsia, 
    gainsboro: gainsboro, 
    ghostwhite: ghostwhite, 
    gold: gold, 
    goldenrod: goldenrod, 
    gray: gray, 
    green: green, 
    greenyellow: greenyellow, 
    grey: grey, 
    honeydew: honeydew, 
    hotpink: hotpink, 
    indianred: indianred, 
    indigo: indigo, 
    ivory: ivory, 
    khaki: khaki, 
    lavender: lavender, 
    lavenderblush: lavenderblush, 
    lawngreen: lawngreen, 
    lemonchiffon: lemonchiffon, 
    lightblue: lightblue, 
    lightcoral: lightcoral, 
    lightcyan: lightcyan, 
    lightgoldenrodyellow: lightgoldenrodyellow, 
    lightgray: lightgray, 
    lightgreen: lightgreen, 
    lightgrey: lightgrey, 
    lightpink: lightpink, 
    lightsalmon: lightsalmon, 
    lightseagreen: lightseagreen, 
    lightskyblue: lightskyblue, 
    lightslategray: lightslategray, 
    lightslategrey: lightslategrey, 
    lightsteelblue: lightsteelblue, 
    lightyellow: lightyellow, 
    lime: lime, 
    limegreen: limegreen, 
    linen: linen, 
    magenta: magenta, 
    maroon: maroon, 
    mediumaquamarine: mediumaquamarine, 
    mediumblue: mediumblue, 
    mediumorchid: mediumorchid, 
    mediumpurple: mediumpurple, 
    mediumseagreen: mediumseagreen, 
    mediumslateblue: mediumslateblue, 
    mediumspringgreen: mediumspringgreen, 
    mediumturquoise: mediumturquoise, 
    mediumvioletred: mediumvioletred, 
    midnightblue: midnightblue, 
    mintcream: mintcream, 
    mistyrose: mistyrose, 
    moccasin: moccasin, 
    navajowhite: navajowhite, 
    navy: navy, 
    oldlace: oldlace, 
    olive: olive, 
    olivedrab: olivedrab, 
    orange: orange, 
    orangered: orangered, 
    orchid: orchid, 
    palegoldenrod: palegoldenrod, 
    palegreen: palegreen, 
    paleturquoise: paleturquoise, 
    palevioletred: palevioletred, 
    papayawhip: papayawhip, 
    peachpuff: peachpuff, 
    peru: peru, 
    pink: pink, 
    plum: plum, 
    powderblue: powderblue, 
    purple: purple, 
    red: red, 
    rosybrown: rosybrown, 
    royalblue: royalblue, 
    saddlebrown: saddlebrown, 
    salmon: salmon, 
    sandybrown: sandybrown, 
    seagreen: seagreen, 
    seashell: seashell, 
    sienna: sienna, 
    silver: silver, 
    skyblue: skyblue, 
    slateblue: slateblue, 
    slategray: slategray, 
    slategrey: slategrey, 
    snow: snow, 
    springgreen: springgreen, 
    steelblue: steelblue, 
    tan: tan, 
    teal: teal, 
    thistle: thistle, 
    tomato: tomato, 
    turquoise: turquoise, 
    violet: violet, 
    wheat: wheat, 
    whitesmoke: whitesmoke, 
    yellow: yellow, 
    yellowgreen: yellowgreen
};

},{"../Color":4}],4:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int = require("../Data.Int");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_Regex = require("../Data.String.Regex");
var $$Math = require("../Math");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var RGB = (function () {
    function RGB() {

    };
    RGB.value = new RGB();
    return RGB;
})();
var HSL = (function () {
    function HSL() {

    };
    HSL.value = new HSL();
    return HSL;
})();
var LCh = (function () {
    function LCh() {

    };
    LCh.value = new LCh();
    return LCh;
})();
var Lab = (function () {
    function Lab() {

    };
    Lab.value = new Lab();
    return Lab;
})();
var HSLA = (function () {
    function HSLA(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    HSLA.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new HSLA(value0, value1, value2, value3);
                };
            };
        };
    };
    return HSLA;
})();
var toRGBA$prime = function (v) {
    var h$prime = v.value0 / 60.0;
    var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
    var m = v.value2 - chr / 2.0;
    var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
    var col = (function () {
        if (h$prime < 1.0) {
            return {
                r: chr, 
                g: x, 
                b: 0.0
            };
        };
        if (1.0 <= h$prime && h$prime < 2.0) {
            return {
                r: x, 
                g: chr, 
                b: 0.0
            };
        };
        if (2.0 <= h$prime && h$prime < 3.0) {
            return {
                r: 0.0, 
                g: chr, 
                b: x
            };
        };
        if (3.0 <= h$prime && h$prime < 4.0) {
            return {
                r: 0.0, 
                g: x, 
                b: chr
            };
        };
        if (4.0 <= h$prime && h$prime < 5.0) {
            return {
                r: x, 
                g: 0.0, 
                b: chr
            };
        };
        if (Data_Boolean.otherwise) {
            return {
                r: chr, 
                g: 0.0, 
                b: x
            };
        };
        throw new Error("Failed pattern match at Color line 295, column 26 - line 306, column 61: " + [  ]);
    })();
    return {
        r: col.r + m, 
        g: col.g + m, 
        b: col.b + m, 
        a: v.value3
    };
};
var toXYZ = function (c) {
    var rec = toRGBA$prime(c);
    var finv = function (c$prime) {
        if (c$prime <= 4.045e-2) {
            return c$prime / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c$prime + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color line 314, column 11 - line 328, column 1: " + [ c$prime.constructor.name ]);
    };
    var g = finv(rec.g);
    var r = finv(rec.r);
    var b = finv(rec.b);
    var x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
    var y = 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
    var z = 1.93e-2 * r + 0.1192 * g + 0.9505 * b;
    return {
        x: x, 
        y: y, 
        z: z
    };
};
var toRGBA = function (v) {
    var c = toRGBA$prime(v);
    var g = Data_Int.round(255.0 * c.g);
    var r = Data_Int.round(255.0 * c.r);
    var b = Data_Int.round(255.0 * c.b);
    return {
        r: r, 
        g: g, 
        b: b, 
        a: v.value3
    };
};
var toHexString = function (color) {
    var toHex = function (num) {
        var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
        var $27 = Data_String.length(repr) === 1;
        if ($27) {
            return "0" + repr;
        };
        return repr;
    };
    var c = toRGBA(color);
    return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
};
var toHSLA = function (v) {
    return {
        h: v.value0, 
        s: v.value1, 
        l: v.value2, 
        a: v.value3
    };
};
var showColor = new Data_Show.Show(function (c) {
    var col = toRGBA(c);
    return "rgba " + (Data_Show.show(Data_Show.showInt)(col.r) + (" " + (Data_Show.show(Data_Show.showInt)(col.g) + (" " + (Data_Show.show(Data_Show.showInt)(col.b) + (" " + Data_Show.show(Data_Show.showNumber)(col.a)))))));
});
var modPos = function (x) {
    return function (y) {
        return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
    };
};
var rgba = function (red$prime) {
    return function (green$prime) {
        return function (blue$prime) {
            return function (alpha) {
                var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                var r = Data_Int.toNumber(red) / 255.0;
                var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                var g = Data_Int.toNumber(green) / 255.0;
                var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                var chroma = maxChroma - minChroma | 0;
                var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                var saturation = (function () {
                    if (chroma === 0) {
                        return 0.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                    };
                    throw new Error("Failed pattern match at Color line 118, column 32 - line 146, column 75: " + [  ]);
                })();
                var b = Data_Int.toNumber(blue) / 255.0;
                var hue$prime = function (v) {
                    if (v === 0) {
                        return 0.0;
                    };
                    if (maxChroma === red) {
                        return modPos((g - b) / chroma$prime)(6.0);
                    };
                    if (maxChroma === green) {
                        return (b - r) / chroma$prime + 2.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return (r - g) / chroma$prime + 4.0;
                    };
                    throw new Error("Failed pattern match at Color line 118, column 32 - line 146, column 75: " + [ v.constructor.name ]);
                };
                var hue = 60.0 * hue$prime(chroma);
                return new HSLA(hue, saturation, lightness, alpha);
            };
        };
    };
};
var rgb = function (r) {
    return function (g) {
        return function (b) {
            return rgba(r)(g)(b)(1.0);
        };
    };
};
var rgba$prime = function (r) {
    return function (g) {
        return function (b) {
            return function (a) {
                return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
            };
        };
    };
};
var rgb$prime = function (r) {
    return function (g) {
        return function (b) {
            return rgba$prime(r)(g)(b)(1.0);
        };
    };
};
var xyz = function (x) {
    return function (y) {
        return function (z) {
            var f = function (c) {
                if (c <= 3.1308e-3) {
                    return 12.92 * c;
                };
                if (Data_Boolean.otherwise) {
                    return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.5e-2;
                };
                throw new Error("Failed pattern match at Color line 193, column 5 - line 193, column 50: " + [ c.constructor.name ]);
            };
            var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
            var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
            var b = f((5.57e-2 * x - 0.204 * y) + 1.057 * z);
            return rgb$prime(r)(g)(b);
        };
    };
};
var luminance = function (col) {
    var val = toRGBA$prime(col);
    var f = function (c) {
        if (c <= 3.928e-2) {
            return c / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color line 521, column 17 - line 529, column 26: " + [ c.constructor.name ]);
    };
    var g = f(val.g);
    var r = f(val.r);
    var b = f(val.b);
    return 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
};
var interpolate = function (fraction) {
    return function (a) {
        return function (b) {
            return a + fraction * (b - a);
        };
    };
};
var interpolateAngle = function (fraction) {
    return function (a) {
        return function (b) {
            var paths = [ {
                from: a, 
                to: b
            }, {
                from: a, 
                to: b + 360.0
            }, {
                from: a + 360.0, 
                to: b
            } ];
            var dist = function (v) {
                return $$Math.abs(v.to - v.from);
            };
            var shortest = Data_Maybe.fromJust()(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(dist))(paths));
            return interpolate(fraction)(shortest.from)(shortest.to);
        };
    };
};
var hsla = function (h) {
    return function (s) {
        return function (l) {
            return function (a) {
                var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                var h$prime = modPos(h)(360.0);
                var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                return new HSLA(h$prime, s$prime, l$prime, a$prime);
            };
        };
    };
};
var lighten = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
    };
};
var rotateHue = function (angle) {
    return function (v) {
        return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
    };
};
var saturate = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
    };
};
var hsl = function (h) {
    return function (s) {
        return function (l) {
            return hsla(h)(s)(l)(1.0);
        };
    };
};
var white = hsl(0.0)(0.0)(1.0);
var graytone = function (l) {
    return hsl(0.0)(0.0)(l);
};
var fromInt = function (m) {
    var n = Data_Ord.clamp(Data_Ord.ordInt)(0)(16777215)(m);
    var r = n >> 16 & 255;
    var g = n >> 8 & 255;
    var b = n & 255;
    return rgb(r)(g)(b);
};
var fromHexString = function (str) {
    var parseHex = function ($79) {
        return Data_Maybe.fromMaybe(0)(Data_Int.fromStringAs(Data_Int.hexadecimal)($79));
    };
    var isShort = Data_String.length(str) === 4;
    var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
    var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
    var single = "(" + ("[0-9a-f]" + ")");
    var variant = (function () {
        if (isShort) {
            return single + (single + single);
        };
        return pair + (pair + pair);
    })();
    var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
    return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(v)(str))(function (v1) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(1))))(function (v2) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(2))))(function (v3) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(3))))(function (v4) {
                        if (isShort) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0)((16 * v4 | 0) + v4 | 0));
                        };
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(v2)(v3)(v4));
                    });
                });
            });
        });
    });
};
var eqColor = new Data_Eq.Eq(function (c1) {
    return function (c2) {
        var rgb2 = toRGBA(c2);
        var rgb1 = toRGBA(c1);
        return rgb1.r === rgb2.r && (rgb1.g === rgb2.g && (rgb1.b === rgb2.b && rgb1.a === rgb2.a));
    };
});
var desaturate = function (f) {
    return saturate(-f);
};
var darken = function (f) {
    return lighten(-f);
};
var d65 = {
    xn: 0.95047, 
    yn: 1.0, 
    zn: 1.08883
};
var lab = function (l) {
    return function (a) {
        return function (b) {
            var l$prime = (l + 16.0) / 116.0;
            var delta = 6.0 / 29.0;
            var finv = function (t) {
                if (t > delta) {
                    return $$Math.pow(t)(3.0);
                };
                if (Data_Boolean.otherwise) {
                    return 3.0 * delta * delta * (t - 4.0 / 29.0);
                };
                throw new Error("Failed pattern match at Color line 212, column 13 - line 221, column 64: " + [ t.constructor.name ]);
            };
            var x = d65.xn * finv(l$prime + a / 500.0);
            var y = d65.yn * finv(l$prime);
            var z = d65.zn * finv(l$prime - b / 200.0);
            return xyz(x)(y)(z);
        };
    };
};
var lch = function (l) {
    return function (c) {
        return function (h) {
            var deg2rad = $$Math.pi / 180.0;
            var b = c * $$Math.sin(h * deg2rad);
            var a = c * $$Math.cos(h * deg2rad);
            return lab(l)(a)(b);
        };
    };
};
var toLab = function (col) {
    var rec = toXYZ(col);
    var cut = $$Math.pow(6.0 / 29.0)(3.0);
    var f = function (t) {
        if (t > cut) {
            return $$Math.pow(t)(1.0 / 3.0);
        };
        if (Data_Boolean.otherwise) {
            return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
        };
        throw new Error("Failed pattern match at Color line 332, column 13 - line 346, column 1: " + [ t.constructor.name ]);
    };
    var fy = f(rec.y / d65.yn);
    var l = 116.0 * fy - 16.0;
    var b = 200.0 * (fy - f(rec.z / d65.zn));
    var a = 500.0 * (f(rec.x / d65.xn) - fy);
    return {
        l: l, 
        a: a, 
        b: b
    };
};
var distance = function (col1) {
    return function (col2) {
        var sq = function (x) {
            return $$Math.pow(x)(2.0);
        };
        var c2 = toLab(col2);
        var c1 = toLab(col1);
        return $$Math.sqrt(sq(c1.l - c2.l) + sq(c1.a - c2.a) + sq(c1.b - c2.b));
    };
};
var toLCh = function (col) {
    var rec = toLab(col);
    var rad2deg = 180.0 / $$Math.pi;
    var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
    var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
    return {
        l: rec.l, 
        c: c, 
        h: h
    };
};
var mix = function (v) {
    return function (c1) {
        return function (c2) {
            return function (frac) {
                if (v instanceof HSL) {
                    var t = toHSLA(c2);
                    var f = toHSLA(c1);
                    return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof RGB) {
                    var t = toRGBA$prime(c2);
                    var f = toRGBA$prime(c1);
                    return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof LCh) {
                    var t = toLCh(c2);
                    var f = toLCh(c1);
                    return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                };
                if (v instanceof Lab) {
                    var t = toLab(c2);
                    var f = toLab(c1);
                    return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                };
                throw new Error("Failed pattern match at Color line 475, column 1 - line 482, column 18: " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
            };
        };
    };
};
var toGray = function (col) {
    var res = toLCh(col);
    return desaturate(1.0)(lch(res.l)(0.0)(0.0));
};
var cssStringRGBA = function (col) {
    var c = toRGBA(col);
    var green = Data_Show.show(Data_Show.showInt)(c.g);
    var red = Data_Show.show(Data_Show.showInt)(c.r);
    var blue = Data_Show.show(Data_Show.showInt)(c.b);
    var alpha = Data_Show.show(Data_Show.showNumber)(c.a);
    var $70 = c.a === 1.0;
    if ($70) {
        return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
    };
    return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
};
var cssStringHSLA = function (v) {
    var toString = function (n) {
        return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
    };
    var saturation = toString(v.value1 * 100.0) + "%";
    var lightness = toString(v.value2 * 100.0) + "%";
    var hue = toString(v.value0);
    var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
    var $72 = v.value3 === 1.0;
    if ($72) {
        return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
    };
    return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
};
var contrast = function (c1) {
    return function (c2) {
        var l2 = luminance(c2);
        var l1 = luminance(c1);
        var $77 = l1 > l2;
        if ($77) {
            return (l1 + 5.0e-2) / (l2 + 5.0e-2);
        };
        return (l2 + 5.0e-2) / (l1 + 5.0e-2);
    };
};
var isReadable = function (c1) {
    return function (c2) {
        return contrast(c1)(c2) > 4.5;
    };
};
var complementary = rotateHue(180.0);
var brightness = function (col) {
    var c = toRGBA$prime(col);
    return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
};
var isLight = function (c) {
    return brightness(c) > 0.5;
};
var black = hsl(0.0)(0.0)(0.0);
var textColor = function (c) {
    if (isLight(c)) {
        return black;
    };
    if (Data_Boolean.otherwise) {
        return white;
    };
    throw new Error("Failed pattern match at Color line 566, column 1 - line 567, column 32: " + [ c.constructor.name ]);
};
module.exports = {
    RGB: RGB, 
    HSL: HSL, 
    LCh: LCh, 
    Lab: Lab, 
    black: black, 
    brightness: brightness, 
    complementary: complementary, 
    contrast: contrast, 
    cssStringHSLA: cssStringHSLA, 
    cssStringRGBA: cssStringRGBA, 
    darken: darken, 
    desaturate: desaturate, 
    distance: distance, 
    fromHexString: fromHexString, 
    fromInt: fromInt, 
    graytone: graytone, 
    hsl: hsl, 
    hsla: hsla, 
    isLight: isLight, 
    isReadable: isReadable, 
    lab: lab, 
    lch: lch, 
    lighten: lighten, 
    luminance: luminance, 
    mix: mix, 
    rgb: rgb, 
    "rgb'": rgb$prime, 
    rgba: rgba, 
    "rgba'": rgba$prime, 
    rotateHue: rotateHue, 
    saturate: saturate, 
    textColor: textColor, 
    toGray: toGray, 
    toHSLA: toHSLA, 
    toHexString: toHexString, 
    toLCh: toLCh, 
    toLab: toLab, 
    toRGBA: toRGBA, 
    "toRGBA'": toRGBA$prime, 
    toXYZ: toXYZ, 
    white: white, 
    xyz: xyz, 
    showColor: showColor, 
    eqColor: eqColor
};

},{"../Control.Applicative":7,"../Control.Bind":13,"../Control.Semigroupoid":32,"../Data.Array":38,"../Data.Boolean":48,"../Data.Either":53,"../Data.Eq":55,"../Data.EuclideanRing":57,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Int":73,"../Data.Int.Bits":71,"../Data.Maybe":78,"../Data.Ord":92,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.String":108,"../Data.String.Regex":104,"../Math":125,"../Partial.Unsafe":127,"../Prelude":130}],5:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Functor = require("../Data.Functor");
var Data_Semigroup = require("../Data.Semigroup");
var Alt = function (Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
module.exports = {
    Alt: Alt, 
    alt: alt, 
    altArray: altArray
};

},{"../Data.Functor":66,"../Data.Semigroup":97}],6:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Plus = require("../Control.Plus");
var Data_Functor = require("../Data.Functor");
var Alternative = function (Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
};
var alternativeArray = new Alternative(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Plus.plusArray;
});
module.exports = {
    Alternative: Alternative, 
    alternativeArray: alternativeArray
};

},{"../Control.Alt":5,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Plus":31,"../Data.Functor":66}],7:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative line 63, column 1 - line 63, column 19: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [ x ];
});
module.exports = {
    Applicative: Applicative, 
    liftA1: liftA1, 
    pure: pure, 
    unless: unless, 
    when: when, 
    applicativeFn: applicativeFn, 
    applicativeArray: applicativeArray
};

},{"../Control.Apply":9,"../Data.Functor":66,"../Data.Unit":115}],8:[function(require,module,exports){
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var result = [];
    var n = 0;
    for (var i = 0, l = fs.length; i < l; i++) {
      for (var j = 0, k = xs.length; j < k; j++) {
        result[n++] = fs[i](xs[j]);
      }
    }
    return result;
  };
};

},{}],9:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Category = require("../Control.Category");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return Data_Functor.functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
var apply = function (dict) {
    return dict.apply;
};
var applyFirst = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Apply: Apply, 
    apply: apply, 
    applyFirst: applyFirst, 
    applySecond: applySecond, 
    lift2: lift2, 
    lift3: lift3, 
    lift4: lift4, 
    lift5: lift5, 
    applyFn: applyFn, 
    applyArray: applyArray
};

},{"../Control.Category":14,"../Data.Function":63,"../Data.Functor":66,"./foreign":8}],10:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Biapply = require("../Control.Biapply");
var Biapplicative = function (Biapply0, bipure) {
    this.Biapply0 = Biapply0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    Biapplicative: Biapplicative, 
    bipure: bipure
};

},{"../Control.Biapply":11}],11:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Function = require("../Data.Function");
var Biapply = function (Bifunctor0, biapply) {
    this.Bifunctor0 = Bifunctor0;
    this.biapply = biapply;
};
var biapply = function (dict) {
    return dict.biapply;
};
var biapplyFirst = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.id(Control_Category.categoryFn))))(a))(b);
        };
    };
};
var biapplySecond = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
    };
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
module.exports = {
    Biapply: Biapply, 
    biapply: biapply, 
    biapplyFirst: biapplyFirst, 
    biapplySecond: biapplySecond, 
    bilift2: bilift2, 
    bilift3: bilift3
};

},{"../Control.Category":14,"../Data.Bifunctor":46,"../Data.Function":63}],12:[function(require,module,exports){
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

},{}],13:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var Discard = function (discard) {
    this.discard = discard;
};
var discard = function (dict) {
    return dict.discard;
};
var bindFn = new Bind(function () {
    return Control_Apply.applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function (dictBind) {
    return bind(dictBind);
});
var ifM = function (dictBind) {
    return function (cond) {
        return function (t) {
            return function (f) {
                return bind(dictBind)(cond)(function (cond$prime) {
                    if (cond$prime) {
                        return t;
                    };
                    return f;
                });
            };
        };
    };
};
var join = function (dictBind) {
    return function (m) {
        return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
    };
};
module.exports = {
    Bind: Bind, 
    Discard: Discard, 
    bind: bind, 
    bindFlipped: bindFlipped, 
    composeKleisli: composeKleisli, 
    composeKleisliFlipped: composeKleisliFlipped, 
    discard: discard, 
    ifM: ifM, 
    join: join, 
    bindFn: bindFn, 
    bindArray: bindArray, 
    discardUnit: discardUnit
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Data.Function":63,"../Data.Functor":66,"../Data.Unit":115,"./foreign":12}],14:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Category = function (Semigroupoid0, id) {
    this.Semigroupoid0 = Semigroupoid0;
    this.id = id;
};
var id = function (dict) {
    return dict.id;
};
var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
    return x;
});
module.exports = {
    Category: Category, 
    id: id, 
    categoryFn: categoryFn
};

},{"../Control.Semigroupoid":32}],15:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Extend = require("../Control.Extend");
var Data_Functor = require("../Data.Functor");
var Comonad = function (Extend0, extract) {
    this.Extend0 = Extend0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"../Control.Extend":16,"../Data.Functor":66}],16:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var Data_Functor = require("../Data.Functor");
var Data_Semigroup = require("../Data.Semigroup");
var Extend = function (Functor0, extend) {
    this.Functor0 = Functor0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Data_Functor.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extend = function (dict) {
    return dict.extend;
};
var extendFlipped = function (dictExtend) {
    return function (w) {
        return function (f) {
            return extend(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Control_Category.id(Control_Category.categoryFn));
};
var composeCoKleisliFlipped = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f(extend(dictExtend)(g)(w));
            };
        };
    };
};
var composeCoKleisli = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g(extend(dictExtend)(f)(w));
            };
        };
    };
};
module.exports = {
    Extend: Extend, 
    composeCoKleisli: composeCoKleisli, 
    composeCoKleisliFlipped: composeCoKleisliFlipped, 
    duplicate: duplicate, 
    extend: extend, 
    extendFlipped: extendFlipped, 
    extendFn: extendFn
};

},{"../Control.Category":14,"../Data.Functor":66,"../Data.Semigroup":97}],17:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Unit = require("../Data.Unit");
var Lazy = function (defer) {
    this.defer = defer;
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        return defer(dictLazy)(function (v) {
            return f(fix(dictLazy)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    defer: defer, 
    fix: fix
};

},{"../Data.Unit":115}],18:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var unsafeThrowException = function ($0) {
    return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
};
var unsafeThrow = function ($1) {
    return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
};
module.exports = {
    unsafeThrow: unsafeThrow, 
    unsafeThrowException: unsafeThrowException
};

},{"../Control.Monad.Eff.Exception":20,"../Control.Monad.Eff.Unsafe":22,"../Control.Semigroupoid":32}],19:[function(require,module,exports){
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};

},{}],20:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var $$try = function (action) {
    return $foreign.catchException(function ($0) {
        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
    })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
};
var $$throw = function ($1) {
    return $foreign.throwException($foreign.error($1));
};
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack, 
    "throw": $$throw, 
    "try": $$try, 
    showError: showError, 
    catchException: $foreign.catchException, 
    error: $foreign.error, 
    message: $foreign.message, 
    throwException: $foreign.throwException
};

},{"../Control.Applicative":7,"../Control.Monad.Eff":24,"../Control.Semigroupoid":32,"../Data.Either":53,"../Data.Functor":66,"../Data.Maybe":78,"../Data.Show":101,"../Prelude":130,"./foreign":19}],21:[function(require,module,exports){
"use strict";

exports.unsafeCoerceEff = function (f) {
  return f;
};

},{}],22:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var unsafePerformEff = function ($0) {
    return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
};
module.exports = {
    unsafePerformEff: unsafePerformEff, 
    unsafeCoerceEff: $foreign.unsafeCoerceEff
};

},{"../Control.Monad.Eff":24,"../Control.Semigroupoid":32,"./foreign":21}],23:[function(require,module,exports){
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.runPure = function (f) {
  return f();
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],24:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad = require("../Control.Monad");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var monadEff = new Control_Monad.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Control_Bind.Bind(function () {
    return applyEff;
}, $foreign.bindE);
var applyEff = new Control_Apply.Apply(function () {
    return functorEff;
}, Control_Monad.ap(monadEff));
var applicativeEff = new Control_Applicative.Applicative(function () {
    return applyEff;
}, $foreign.pureE);
var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
module.exports = {
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff, 
    forE: $foreign.forE, 
    foreachE: $foreign.foreachE, 
    runPure: $foreign.runPure, 
    untilE: $foreign.untilE, 
    whileE: $foreign.whileE
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Monad":28,"../Data.Functor":66,"../Data.Unit":115,"./foreign":23}],25:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Monad_ST = require("../Control.Monad.ST");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Either = require("../Data.Either");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_Unit = require("../Data.Unit");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Loop = (function () {
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var MonadRec = function (Monad0, tailRecM) {
    this.Monad0 = Monad0;
    this.tailRecM = tailRecM;
};
var tailRecM = function (dict) {
    return dict.tailRecM;
};
var tailRecM2 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return tailRecM(dictMonadRec)(function (o) {
                    return f(o.a)(o.b);
                })({
                    a: a, 
                    b: b
                });
            };
        };
    };
};
var tailRecM3 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return tailRecM(dictMonadRec)(function (o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a, 
                        b: b, 
                        c: c
                    });
                };
            };
        };
    };
};
var tailRecEff = function (f) {
    return function (a) {
        var fromDone = function (v) {
            var __unused = function (dictPartial1) {
                return function ($dollar15) {
                    return $dollar15;
                };
            };
            return __unused()((function () {
                if (v instanceof Done) {
                    return v.value0;
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Class line 129, column 28 - line 129, column 42: " + [ v.constructor.name ]);
            })());
        };
        var f$prime = function ($46) {
            return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($46));
        };
        return function __do() {
            var v = Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Monad_ST.newSTRef)(f$prime(a))();
            (function () {
                while (!(function __do() {
                    var v1 = v.value;
                    if (v1 instanceof Loop) {
                        var v2 = f$prime(v1.value0)();
                        var v3 = v.value = v2;
                        return false;
                    };
                    if (v1 instanceof Done) {
                        return true;
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class line 118, column 5 - line 123, column 26: " + [ v1.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v))();
        };
    };
};
var tailRec = function (f) {
    var go = function (__copy_v) {
        var __tco_done = false;
        var __tco_result;
        function __tco_loop(v) {
            if (v instanceof Loop) {
                __copy_v = f(v.value0);
                return;
            };
            if (v instanceof Done) {
                __tco_done = true;
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 93, column 13 - line 96, column 18: " + [ v.constructor.name ]);
        };
        while (!__tco_done) {
            __tco_result = __tco_loop(__copy_v);
        };
        return __tco_result;
    };
    return function ($47) {
        return go(f($47));
    };
};
var monadRecIdentity = new MonadRec(function () {
    return Data_Identity.monadIdentity;
}, function (f) {
    var runIdentity = function (v) {
        return v;
    };
    return function ($48) {
        return Data_Identity.Identity(tailRec(function ($49) {
            return runIdentity(f($49));
        })($48));
    };
});
var monadRecEither = new MonadRec(function () {
    return Data_Either.monadEither;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 108, column 7 - line 108, column 33: " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEff = new MonadRec(function () {
    return Control_Monad_Eff.monadEff;
}, tailRecEff);
var functorStep = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Loop) {
            return new Loop(v.value0);
        };
        if (v instanceof Done) {
            return new Done(f(v.value0));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Class line 28, column 3 - line 28, column 26: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var forever = function (dictMonadRec) {
    return function (ma) {
        return tailRecM(dictMonadRec)(function (u) {
            return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
            };
            if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 32, column 3 - line 32, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
module.exports = {
    Loop: Loop, 
    Done: Done, 
    MonadRec: MonadRec, 
    forever: forever, 
    tailRec: tailRec, 
    tailRecM: tailRecM, 
    tailRecM2: tailRecM2, 
    tailRecM3: tailRecM3, 
    functorStep: functorStep, 
    bifunctorStep: bifunctorStep, 
    monadRecIdentity: monadRecIdentity, 
    monadRecEff: monadRecEff, 
    monadRecEither: monadRecEither
};

},{"../Control.Applicative":7,"../Control.Bind":13,"../Control.Monad.Eff":24,"../Control.Monad.Eff.Unsafe":22,"../Control.Monad.ST":27,"../Control.Semigroupoid":32,"../Data.Bifunctor":46,"../Data.Either":53,"../Data.Functor":66,"../Data.Identity":69,"../Data.Unit":115,"../Partial.Unsafe":127,"../Prelude":130}],26:[function(require,module,exports){
"use strict";

exports.newSTRef = function (val) {
  return function () {
    return { value: val };
  };
};

exports.readSTRef = function (ref) {
  return function () {
    return ref.value;
  };
};

exports.modifySTRef = function (ref) {
  return function (f) {
    return function () {
      return ref.value = f(ref.value); // eslint-disable-line no-return-assign
    };
  };
};

exports.writeSTRef = function (ref) {
  return function (a) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};

exports.runST = function (f) {
  return f;
};

},{}],27:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var pureST = function (st) {
    return Control_Monad_Eff.runPure($foreign.runST(st));
};
module.exports = {
    pureST: pureST, 
    modifySTRef: $foreign.modifySTRef, 
    newSTRef: $foreign.newSTRef, 
    readSTRef: $foreign.readSTRef, 
    runST: $foreign.runST, 
    writeSTRef: $foreign.writeSTRef
};

},{"../Control.Monad.Eff":24,"./foreign":26}],28:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
            });
        };
    };
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad, 
    ap: ap, 
    liftM1: liftM1, 
    unlessM: unlessM, 
    whenM: whenM, 
    monadFn: monadFn, 
    monadArray: monadArray
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Data.Functor":66,"../Data.Unit":115}],29:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad = require("../Control.Monad");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Data_Functor = require("../Data.Functor");
var MonadPlus = function (MonadZero0) {
    this.MonadZero0 = MonadZero0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_MonadZero.monadZeroArray;
});
module.exports = {
    MonadPlus: MonadPlus, 
    monadPlusArray: monadPlusArray
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Monad":28,"../Control.MonadZero":30,"../Control.Plus":31,"../Data.Functor":66}],30:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad = require("../Control.Monad");
var Control_Plus = require("../Control.Plus");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var MonadZero = function (Alternative1, Monad0) {
    this.Alternative1 = Alternative1;
    this.Monad0 = Monad0;
};
var monadZeroArray = new MonadZero(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Control_Monad.monadArray;
});
var guard = function (dictMonadZero) {
    return function (v) {
        if (v) {
            return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
        };
        throw new Error("Failed pattern match at Control.MonadZero line 55, column 1 - line 55, column 23: " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadZero: MonadZero, 
    guard: guard, 
    monadZeroArray: monadZeroArray
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Monad":28,"../Control.Plus":31,"../Data.Functor":66,"../Data.Unit":115}],31:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Data_Functor = require("../Data.Functor");
var Plus = function (Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty, 
    plusArray: plusArray
};

},{"../Control.Alt":5,"../Data.Functor":66}],32:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
module.exports = {
    Semigroupoid: Semigroupoid, 
    compose: compose, 
    composeFlipped: composeFlipped, 
    semigroupoidFn: semigroupoidFn
};

},{}],33:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Array = require("../Data.Array");
var Data_Ring = require("../Data.Ring");
var Prelude = require("../Prelude");
var tail = function (dictPartial) {
    return function (xs) {
        return Data_Array.slice(1)(Data_Array.length(xs))(xs);
    };
};
var last = function (dictPartial) {
    return function (xs) {
        return xs[Data_Array.length(xs) - 1 | 0];
    };
};
var init = function (dictPartial) {
    return function (xs) {
        return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
    };
};
var head = function (dictPartial) {
    return function (xs) {
        return xs[0];
    };
};
module.exports = {
    head: head, 
    init: init, 
    last: last, 
    tail: tail
};

},{"../Data.Array":38,"../Data.Ring":95,"../Prelude":130}],34:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_ST = require("../Control.Monad.ST");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array_ST = require("../Data.Array.ST");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Semiring = require("../Data.Semiring");
var Prelude = require("../Prelude");
var Iterator = (function () {
    function Iterator(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Iterator.create = function (value0) {
        return function (value1) {
            return new Iterator(value0, value1);
        };
    };
    return Iterator;
})();
var peek = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST.readSTRef(v.value1)();
        return v.value0(v1);
    };
};
var next = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST.readSTRef(v.value1)();
        var v2 = Control_Monad_ST.modifySTRef(v.value1)(function (v2) {
            return v2 + 1 | 0;
        })();
        return v.value0(v1);
    };
};
var pushWhile = function (p) {
    return function (iter) {
        return function (array) {
            return function __do() {
                var v = Control_Monad_ST.newSTRef(false)();
                while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                    (function __do() {
                        var v1 = peek(iter)();
                        if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                            var v2 = Data_Array_ST.pushSTArray(array)(v1.value0)();
                            return Data_Functor["void"](Control_Monad_Eff.functorEff)(next(iter))();
                        };
                        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                    })();
                };
                return {};
            };
        };
    };
};
var pushAll = pushWhile(Data_Function["const"](true));
var iterator = function (f) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(Iterator.create(f))(Control_Monad_ST.newSTRef(0));
};
var iterate = function (iter) {
    return function (f) {
        return function __do() {
            var v = Control_Monad_ST.newSTRef(false)();
            while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                (function __do() {
                    var v1 = next(iter)();
                    if (v1 instanceof Data_Maybe.Just) {
                        return f(v1.value0)();
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                    };
                    throw new Error("Failed pattern match at Data.Array.ST.Iterator line 39, column 5 - line 41, column 46: " + [ v1.constructor.name ]);
                })();
            };
            return {};
        };
    };
};
var exhausted = function ($27) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.isNothing)(peek($27));
};
module.exports = {
    exhausted: exhausted, 
    iterate: iterate, 
    iterator: iterator, 
    next: next, 
    peek: peek, 
    pushAll: pushAll, 
    pushWhile: pushWhile
};

},{"../Control.Applicative":7,"../Control.Bind":13,"../Control.Monad.Eff":24,"../Control.Monad.ST":27,"../Control.Semigroupoid":32,"../Data.Array.ST":36,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.Semiring":99,"../Prelude":130}],35:[function(require,module,exports){
"use strict";

exports.runSTArray = function (f) {
  return f;
};

exports.emptySTArray = function () {
  return [];
};

exports.peekSTArrayImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.pokeSTArray = function (xs) {
  return function (i) {
    return function (a) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.pushAllSTArray = function (xs) {
  return function (as) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.spliceSTArray = function (xs) {
  return function (i) {
    return function (howMany) {
      return function (bs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.copyImpl = function (xs) {
  return function () {
    return xs.slice();
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);
    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
    return as;
  };
};

},{}],36:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_ST = require("../Control.Monad.ST");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Maybe = require("../Data.Maybe");
var Prelude = require("../Prelude");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var unsafeFreeze = function ($0) {
    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Unsafe_Coerce.unsafeCoerce($0));
};
var thaw = $foreign.copyImpl;
var pushSTArray = function (arr) {
    return function (a) {
        return $foreign.pushAllSTArray(arr)([ a ]);
    };
};
var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var freeze = $foreign.copyImpl;
module.exports = {
    freeze: freeze, 
    peekSTArray: peekSTArray, 
    pushSTArray: pushSTArray, 
    thaw: thaw, 
    unsafeFreeze: unsafeFreeze, 
    emptySTArray: $foreign.emptySTArray, 
    pokeSTArray: $foreign.pokeSTArray, 
    pushAllSTArray: $foreign.pushAllSTArray, 
    runSTArray: $foreign.runSTArray, 
    spliceSTArray: $foreign.spliceSTArray, 
    toAssocArray: $foreign.toAssocArray
};

},{"../Control.Applicative":7,"../Control.Monad.Eff":24,"../Control.Monad.ST":27,"../Control.Semigroupoid":32,"../Data.Maybe":78,"../Prelude":130,"../Unsafe.Coerce":132,"./foreign":35}],37:[function(require,module,exports){
"use strict";

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = [];
    var i = start, n = 0;
    while (i !== end) {
      result[n++] = i;
      i += step;
    }
    result[n] = i;
    return result;
  };
};

var replicate = function (count) {
  return function (value) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function (count) {
  return function (value) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }
    return result;
  };
};

// In browsers that have Array.prototype.fill we use it, as it's faster.
exports.replicate = typeof Array.prototype.fill === "function" ?
    replicate :
    replicatePolyfill;

exports.fromFoldableImpl = (function () {
  // jshint maxparams: 2
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }
  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
})();

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no  = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes: yes, no: no };
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    // jshint maxparams: 2
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

//------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};

},{}],38:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Monad_ST = require("../Control.Monad.ST");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array_ST = require("../Data.Array.ST");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unzip = $foreign["uncons'"](function (v) {
    return new Data_Tuple.Tuple([  ], [  ]);
})(function (v) {
    return function (ts) {
        var v1 = unzip(ts);
        return new Data_Tuple.Tuple($foreign.cons(v.value0)(v1.value0), $foreign.cons(v.value1)(v1.value1));
    };
});
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x, 
            tail: xs
        });
    };
});
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array line 132, column 19 - line 137, column 26: " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array line 462, column 15 - line 467, column 1: " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubBy = function (eq) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just) {
            return $foreign.cons(v.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                return !eq(v.value0.head)(y);
            })(v.value0.tail)));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        throw new Error("Failed pattern match at Data.Array line 570, column 3 - line 572, column 18: " + [ v.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};
var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array line 248, column 1 - line 250, column 55: " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v, 
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
var span = function (p) {
    return function (arr) {
        var go = function (__copy_i) {
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $64 = p(v.value0);
                    if ($64) {
                        __copy_i = i + 1 | 0;
                        return;
                    };
                    __tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    __tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array line 528, column 5 - line 530, column 25: " + [ v.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__copy_i);
            };
            return __tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ], 
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr), 
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr, 
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array line 515, column 3 - line 521, column 30: " + [ breakIndex.constructor.name ]);
    };
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var head = function (xs) {
    return index(xs)(0);
};
var groupBy = function (op) {
    return function (xs) {
        return Control_Monad_ST.pureST(function __do() {
            var v = Data_Array_ST.emptySTArray();
            var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                return index(xs)(v1);
            })();
            Data_Array_ST_Iterator.iterate(v1)(function (x) {
                return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                    var v2 = Data_Array_ST.emptySTArray();
                    Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                    var v3 = Data_Array_ST.unsafeFreeze(v2)();
                    return Data_Array_ST.pushSTArray(v)(new Data_NonEmpty.NonEmpty(x, v3))();
                });
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        });
    };
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    return function ($85) {
        return group(dictOrd.Eq0())(sort(dictOrd)($85));
    };
};
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: v, 
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array line 671, column 3 - line 675, column 42: " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
var mapMaybe = function (f) {
    return concatMap(function ($86) {
        return Data_Maybe.maybe([  ])(singleton)(f($86));
    });
};
var filterA = function (dictApplicative) {
    return function (p) {
        return function ($87) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                if (v.value1) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
            })($87));
        };
    };
};
var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array line 388, column 10 - line 390, column 32: " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    alterAt: alterAt, 
    catMaybes: catMaybes, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    difference: difference, 
    dropWhile: dropWhile, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filterA: filterA, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    foldM: foldM, 
    foldRecM: foldRecM, 
    fromFoldable: fromFoldable, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    index: index, 
    init: init, 
    insert: insert, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    many: many, 
    mapMaybe: mapMaybe, 
    mapWithIndex: mapWithIndex, 
    modifyAt: modifyAt, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    singleton: singleton, 
    some: some, 
    sort: sort, 
    sortBy: sortBy, 
    sortWith: sortWith, 
    span: span, 
    tail: tail, 
    takeWhile: takeWhile, 
    toUnfoldable: toUnfoldable, 
    uncons: uncons, 
    union: union, 
    unionBy: unionBy, 
    unsafeIndex: unsafeIndex, 
    unsnoc: unsnoc, 
    unzip: unzip, 
    updateAt: updateAt, 
    zip: zip, 
    zipWithA: zipWithA, 
    concat: $foreign.concat, 
    cons: $foreign.cons, 
    drop: $foreign.drop, 
    filter: $foreign.filter, 
    length: $foreign.length, 
    partition: $foreign.partition, 
    range: $foreign.range, 
    replicate: $foreign.replicate, 
    reverse: $foreign.reverse, 
    slice: $foreign.slice, 
    snoc: $foreign.snoc, 
    take: $foreign.take, 
    zipWith: $foreign.zipWith
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Category":14,"../Control.Lazy":17,"../Control.Monad.Eff":24,"../Control.Monad.Rec.Class":25,"../Control.Monad.ST":27,"../Control.Semigroupoid":32,"../Data.Array.ST":36,"../Data.Array.ST.Iterator":34,"../Data.Boolean":48,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.NonEmpty":88,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Traversable":110,"../Data.Tuple":111,"../Data.Unfoldable":113,"../Partial.Unsafe":127,"../Prelude":130,"./foreign":37}],39:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
module.exports = {};

},{}],40:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Monoid = require("../Data.Monoid");
var Data_Monoid_Conj = require("../Data.Monoid.Conj");
var Data_Monoid_Disj = require("../Data.Monoid.Disj");
var Data_Monoid_Dual = require("../Data.Monoid.Dual");
var Data_Monoid_Endo = require("../Data.Monoid.Endo");
var Data_Newtype = require("../Data.Newtype");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($97) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(f($97));
                })(function ($98) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(g($98));
                })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldableJoker = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                };
            };
        };
    });
};
var bifoldableClown = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                };
            };
        };
    });
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($99) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f($99));
                })(function ($100) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(g($100));
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldl(dictBifoldable)(function (m) {
                    return function (a) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                    };
                })(function (m) {
                    return function (b) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldableFlip = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldableWrap = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($101) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($101)));
                    })(function ($102) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($102)));
                    })(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($103) {
                        return Data_Monoid_Endo.Endo(f($103));
                    })(function ($104) {
                        return Data_Monoid_Endo.Endo(g($104));
                    })(p))(z);
                };
            };
        };
    };
};
var bifoldableProduct = function (dictBifoldable) {
    return function (dictBifoldable1) {
        return new Bifoldable(function (dictMonoid) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        });
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($105) {
                    return Data_Newtype.unwrap(Data_Monoid_Disj.newtypeDisj)(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($106) {
                        return Data_Monoid_Disj.Disj(p($106));
                    })(function ($107) {
                        return Data_Monoid_Disj.Disj(q($107));
                    })($105));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($108) {
                    return Data_Newtype.unwrap(Data_Monoid_Conj.newtypeConj)(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($109) {
                        return Data_Monoid_Conj.Conj(p($109));
                    })(function ($110) {
                        return Data_Monoid_Conj.Conj(q($110));
                    })($108));
                };
            };
        };
    };
};
module.exports = {
    Bifoldable: Bifoldable, 
    biall: biall, 
    biany: biany, 
    bifold: bifold, 
    bifoldMap: bifoldMap, 
    bifoldMapDefaultL: bifoldMapDefaultL, 
    bifoldMapDefaultR: bifoldMapDefaultR, 
    bifoldl: bifoldl, 
    bifoldlDefault: bifoldlDefault, 
    bifoldr: bifoldr, 
    bifoldrDefault: bifoldrDefault, 
    bifor_: bifor_, 
    bisequence_: bisequence_, 
    bitraverse_: bitraverse_, 
    bifoldableClown: bifoldableClown, 
    bifoldableJoker: bifoldableJoker, 
    bifoldableFlip: bifoldableFlip, 
    bifoldableProduct: bifoldableProduct, 
    bifoldableWrap: bifoldableWrap
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Control.Semigroupoid":32,"../Data.Bifunctor.Clown":41,"../Data.Bifunctor.Flip":42,"../Data.Bifunctor.Joker":43,"../Data.Bifunctor.Product":44,"../Data.Bifunctor.Wrap":45,"../Data.Foldable":60,"../Data.Function":63,"../Data.Monoid":85,"../Data.Monoid.Conj":80,"../Data.Monoid.Disj":81,"../Data.Monoid.Dual":82,"../Data.Monoid.Endo":83,"../Data.Newtype":87,"../Data.Semigroup":97,"../Data.Unit":115,"../Prelude":130}],41:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Clown = function (x) {
    return x;
};
var showClown = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordClown = function (dictOrd) {
    return dictOrd;
};
var newtypeClown = new Data_Newtype.Newtype(function (n) {
    return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
    return function (v1) {
        return v1;
    };
});
var eqClown = function (dictEq) {
    return dictEq;
};
var bifunctorClown = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(f)(v1);
            };
        };
    });
};
var biapplyClown = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorClown(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeClown = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyClown(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
module.exports = {
    Clown: Clown, 
    newtypeClown: newtypeClown, 
    eqClown: eqClown, 
    ordClown: ordClown, 
    showClown: showClown, 
    functorClown: functorClown, 
    bifunctorClown: bifunctorClown, 
    biapplyClown: biapplyClown, 
    biapplicativeClown: biapplicativeClown
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Biapplicative":10,"../Control.Biapply":11,"../Data.Bifunctor":46,"../Data.Eq":55,"../Data.Functor":66,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],42:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Flip = function (x) {
    return x;
};
var showFlip = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordFlip = function (dictOrd) {
    return dictOrd;
};
var newtypeFlip = new Data_Newtype.Newtype(function (n) {
    return n;
}, Flip);
var functorFlip = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
        };
    });
};
var eqFlip = function (dictEq) {
    return dictEq;
};
var bifunctorFlip = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
        };
    });
};
var biapplyFlip = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorFlip(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeFlip = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyFlip(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
        };
    });
};
module.exports = {
    Flip: Flip, 
    newtypeFlip: newtypeFlip, 
    eqFlip: eqFlip, 
    ordFlip: ordFlip, 
    showFlip: showFlip, 
    functorFlip: functorFlip, 
    bifunctorFlip: bifunctorFlip, 
    biapplyFlip: biapplyFlip, 
    biapplicativeFlip: biapplicativeFlip
};

},{"../Control.Biapplicative":10,"../Control.Biapply":11,"../Data.Bifunctor":46,"../Data.Eq":55,"../Data.Functor":66,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],43:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Joker = function (x) {
    return x;
};
var showJoker = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoker = function (dictOrd) {
    return dictOrd;
};
var newtypeJoker = new Data_Newtype.Newtype(function (n) {
    return n;
}, Joker);
var functorJoker = function (dictFunctor) {
    return new Data_Functor.Functor(function (g) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(g)(v);
        };
    });
};
var eqJoker = function (dictEq) {
    return dictEq;
};
var bifunctorJoker = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (v) {
        return function (g) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(g)(v1);
            };
        };
    });
};
var biapplyJoker = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorJoker(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeJoker = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyJoker(dictApplicative.Apply0());
    }, function (v) {
        return function (b) {
            return Control_Applicative.pure(dictApplicative)(b);
        };
    });
};
module.exports = {
    Joker: Joker, 
    newtypeJoker: newtypeJoker, 
    eqJoker: eqJoker, 
    ordJoker: ordJoker, 
    showJoker: showJoker, 
    functorJoker: functorJoker, 
    bifunctorJoker: bifunctorJoker, 
    biapplyJoker: biapplyJoker, 
    biapplicativeJoker: biapplicativeJoker
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Biapplicative":10,"../Control.Biapply":11,"../Data.Bifunctor":46,"../Data.Eq":55,"../Data.Functor":66,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],44:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var showProduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var eqProduct = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordProduct = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorProduct = function (dictBifunctor) {
    return function (dictBifunctor1) {
        return new Data_Bifunctor.Bifunctor(function (f) {
            return function (g) {
                return function (v) {
                    return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                };
            };
        });
    };
};
var biapplyProduct = function (dictBiapply) {
    return function (dictBiapply1) {
        return new Control_Biapply.Biapply(function () {
            return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
        }, function (v) {
            return function (v1) {
                return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
        });
    };
};
var biapplicativeProduct = function (dictBiapplicative) {
    return function (dictBiapplicative1) {
        return new Control_Biapplicative.Biapplicative(function () {
            return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
        }, function (a) {
            return function (b) {
                return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
        });
    };
};
module.exports = {
    Product: Product, 
    eqProduct: eqProduct, 
    ordProduct: ordProduct, 
    showProduct: showProduct, 
    bifunctorProduct: bifunctorProduct, 
    biapplyProduct: biapplyProduct, 
    biapplicativeProduct: biapplicativeProduct
};

},{"../Control.Biapplicative":10,"../Control.Biapply":11,"../Data.Bifunctor":46,"../Data.Eq":55,"../Data.HeytingAlgebra":68,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],45:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Wrap = function (x) {
    return x;
};
var showWrap = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordWrap = function (dictOrd) {
    return dictOrd;
};
var newtypeWrap = new Data_Newtype.Newtype(function (n) {
    return n;
}, Wrap);
var functorWrap = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
        };
    });
};
var eqWrap = function (dictEq) {
    return dictEq;
};
var bifunctorWrap = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
            };
        };
    });
};
var biapplyWrap = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorWrap(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeWrap = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyWrap(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
        };
    });
};
module.exports = {
    Wrap: Wrap, 
    newtypeWrap: newtypeWrap, 
    eqWrap: eqWrap, 
    ordWrap: ordWrap, 
    showWrap: showWrap, 
    functorWrap: functorWrap, 
    bifunctorWrap: bifunctorWrap, 
    biapplyWrap: biapplyWrap, 
    biapplicativeWrap: biapplicativeWrap
};

},{"../Control.Biapplicative":10,"../Control.Biapply":11,"../Data.Bifunctor":46,"../Data.Eq":55,"../Data.Functor":66,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],46:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
};
module.exports = {
    Bifunctor: Bifunctor, 
    bimap: bimap, 
    lmap: lmap, 
    rmap: rmap
};

},{"../Control.Category":14}],47:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Data_Bifoldable = require("../Data.Bifoldable");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap");
var Data_Functor = require("../Data.Functor");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");
var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
    this.Bifoldable1 = Bifoldable1;
    this.Bifunctor0 = Bifunctor0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var lfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
            };
        };
    };
};
var ltraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
    };
};
var rfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
            };
        };
    };
};
var rtraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
    };
};
var bitraversableJoker = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                };
            };
        };
    });
};
var bitraversableClown = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                };
            };
        };
    });
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraversableFlip = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraversableProduct = function (dictBitraversable) {
    return function (dictBitraversable1) {
        return new Bitraversable(function () {
            return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
        }, function () {
            return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                    };
                };
            };
        });
    };
};
var bitraversableWrap = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable, 
    bifor: bifor, 
    bisequence: bisequence, 
    bisequenceDefault: bisequenceDefault, 
    bitraverse: bitraverse, 
    bitraverseDefault: bitraverseDefault, 
    lfor: lfor, 
    ltraverse: ltraverse, 
    rfor: rfor, 
    rtraverse: rtraverse, 
    bitraversableClown: bitraversableClown, 
    bitraversableJoker: bitraversableJoker, 
    bitraversableFlip: bitraversableFlip, 
    bitraversableProduct: bitraversableProduct, 
    bitraversableWrap: bitraversableWrap
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Data.Bifoldable":40,"../Data.Bifunctor":46,"../Data.Bifunctor.Clown":41,"../Data.Bifunctor.Flip":42,"../Data.Bifunctor.Joker":43,"../Data.Bifunctor.Product":44,"../Data.Bifunctor.Wrap":45,"../Data.Functor":66,"../Data.Traversable":110,"../Prelude":130}],48:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var otherwise = true;
module.exports = {
    otherwise: otherwise
};

},{}],49:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Unit = require("../Data.Unit");
var BooleanAlgebra = function (HeytingAlgebra0) {
    this.HeytingAlgebra0 = HeytingAlgebra0;
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
    BooleanAlgebra: BooleanAlgebra, 
    booleanAlgebraBoolean: booleanAlgebraBoolean, 
    booleanAlgebraUnit: booleanAlgebraUnit, 
    booleanAlgebraFn: booleanAlgebraFn
};

},{"../Data.HeytingAlgebra":68,"../Data.Unit":115}],50:[function(require,module,exports){
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

},{}],51:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Unit = require("../Data.Unit");
var Bounded = function (Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
var top = function (dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function () {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
    return Data_Ord.ordBoolean;
}, false, true);
var bottom = function (dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded, 
    bottom: bottom, 
    top: top, 
    boundedBoolean: boundedBoolean, 
    boundedInt: boundedInt, 
    boundedChar: boundedChar, 
    boundedOrdering: boundedOrdering, 
    boundedUnit: boundedUnit
};

},{"../Data.Ord":92,"../Data.Ordering":93,"../Data.Unit":115,"./foreign":50}],52:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var CommutativeRing = function (Ring0) {
    this.Ring0 = Ring0;
};
var commutativeRingUnit = new CommutativeRing(function () {
    return Data_Ring.ringUnit;
});
var commutativeRingNumber = new CommutativeRing(function () {
    return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
    return Data_Ring.ringInt;
});
var commutativeRingFn = function (dictCommutativeRing) {
    return new CommutativeRing(function () {
        return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    });
};
module.exports = {
    CommutativeRing: CommutativeRing, 
    commutativeRingInt: commutativeRingInt, 
    commutativeRingNumber: commutativeRingNumber, 
    commutativeRingUnit: commutativeRingUnit, 
    commutativeRingFn: commutativeRingFn
};

},{"../Data.Ring":95,"../Data.Semiring":99,"../Data.Unit":115}],53:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bifoldable = require("../Data.Bifoldable");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Bitraversable = require("../Data.Bitraversable");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Left) {
                return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either line 161, column 3 - line 162, column 3: " + [ v.constructor.name ]);
        });
    };
};
var functorEither = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        if (v1 instanceof Right) {
            return new Right(v(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Either line 37, column 3 - line 37, column 26: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
var fromRight = function (dictPartial) {
    return function (v) {
        var __unused = function (dictPartial1) {
            return function ($dollar62) {
                return $dollar62;
            };
        };
        return __unused(dictPartial)((function () {
            if (v instanceof Right) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Data.Either line 253, column 1 - line 253, column 23: " + [ v.constructor.name ]);
        })());
    };
};
var fromLeft = function (dictPartial) {
    return function (v) {
        var __unused = function (dictPartial1) {
            return function ($dollar66) {
                return $dollar66;
            };
        };
        return __unused(dictPartial)((function () {
            if (v instanceof Left) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Data.Either line 248, column 1 - line 248, column 22: " + [ v.constructor.name ]);
        })());
    };
};
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 189, column 3 - line 189, column 31: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 187, column 3 - line 187, column 26: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either line 185, column 3 - line 185, column 26: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 203, column 3 - line 203, column 36: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 201, column 3 - line 201, column 39: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof Left) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof Left) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 176, column 1 - line 176, column 64: " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var eq1Either = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqEither(dictEq)(dictEq1));
    });
};
var ord1Either = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Either(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
    });
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 230, column 1 - line 230, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
var choose = function (dictAlt) {
    return function (a) {
        return function (b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
    };
};
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 44, column 3 - line 44, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 197, column 3 - line 197, column 31: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 195, column 3 - line 195, column 33: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either line 193, column 3 - line 193, column 33: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 209, column 3 - line 209, column 35: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either line 207, column 3 - line 207, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Control_Apply.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map(functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either line 80, column 3 - line 80, column 28: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Control_Bind.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
        };
    });
};
var semiringEither = function (dictSemiring) {
    return new Data_Semiring.Semiring(function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.add(dictSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.mul(dictSemiring))(x))(y);
        };
    }, new Right(Data_Semiring.one(dictSemiring)), new Right(Data_Semiring.zero(dictSemiring)));
};
var applicativeEither = new Control_Applicative.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left, 
    Right: Right, 
    choose: choose, 
    either: either, 
    fromLeft: fromLeft, 
    fromRight: fromRight, 
    isLeft: isLeft, 
    isRight: isRight, 
    functorEither: functorEither, 
    invariantEither: invariantEither, 
    bifunctorEither: bifunctorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    eq1Either: eq1Either, 
    ordEither: ordEither, 
    ord1Either: ord1Either, 
    boundedEither: boundedEither, 
    foldableEither: foldableEither, 
    bifoldableEither: bifoldableEither, 
    traversableEither: traversableEither, 
    bitraversableEither: bitraversableEither, 
    semiringEither: semiringEither, 
    semigroupEither: semigroupEither
};

},{"../Control.Alt":5,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bifoldable":40,"../Data.Bifunctor":46,"../Data.Bitraversable":47,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.Traversable":110,"../Prelude":130}],54:[function(require,module,exports){
"use strict";

exports.refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.refIneq = function (r1) {
  return function (r2) {
    return r1 !== r2;
  };
};

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

},{}],55:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");
var Eq = function (eq) {
    this.eq = eq;
};
var Eq1 = function (eq1) {
    this.eq1 = eq1;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq($foreign.refEq);
var eqNumber = new Eq($foreign.refEq);
var eqInt = new Eq($foreign.refEq);
var eqChar = new Eq($foreign.refEq);
var eqBoolean = new Eq($foreign.refEq);
var eq1 = function (dict) {
    return dict.eq1;
};
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function (dictEq) {
    return eq(eqArray(dictEq));
});
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function (dictEq1) {
    return function (dictEq) {
        return function (x) {
            return function (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
module.exports = {
    Eq: Eq, 
    Eq1: Eq1, 
    eq: eq, 
    eq1: eq1, 
    notEq: notEq, 
    notEq1: notEq1, 
    eqBoolean: eqBoolean, 
    eqInt: eqInt, 
    eqNumber: eqNumber, 
    eqChar: eqChar, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    eqVoid: eqVoid, 
    eqArray: eqArray, 
    eq1Array: eq1Array
};

},{"../Data.Unit":115,"../Data.Void":116,"./foreign":54}],56:[function(require,module,exports){
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
};

exports.intDiv = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.intMod = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

},{}],57:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var mod = function (dict) {
    return dict.mod;
};
var gcd = function (__copy_dictEq) {
    return function (__copy_dictEuclideanRing) {
        return function (__copy_a) {
            return function (__copy_b) {
                var __tco_dictEq = __copy_dictEq;
                var __tco_dictEuclideanRing = __copy_dictEuclideanRing;
                var __tco_a = __copy_a;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(dictEq, dictEuclideanRing, a, b) {
                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                    if ($7) {
                        __tco_done = true;
                        return a;
                    };
                    __tco_dictEq = dictEq;
                    __tco_dictEuclideanRing = dictEuclideanRing;
                    __tco_a = b;
                    __copy_b = mod(dictEuclideanRing)(a)(b);
                    return;
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_dictEq, __tco_dictEuclideanRing, __tco_a, __copy_b);
                };
                return __tco_result;
            };
        };
    };
};
var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
    return 1;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var euclideanRingInt = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function (dict) {
    return dict.div;
};
var lcm = function (dictEq) {
    return function (dictEuclideanRing) {
        return function (a) {
            return function (b) {
                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                if ($8) {
                    return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                };
                return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
        };
    };
};
var degree = function (dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing, 
    degree: degree, 
    div: div, 
    gcd: gcd, 
    lcm: lcm, 
    mod: mod, 
    euclideanRingInt: euclideanRingInt, 
    euclideanRingNumber: euclideanRingNumber
};

},{"../Data.BooleanAlgebra":49,"../Data.CommutativeRing":52,"../Data.Eq":55,"../Data.HeytingAlgebra":68,"../Data.Ring":95,"../Data.Semiring":99,"./foreign":56}],58:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Field = function (EuclideanRing0) {
    this.EuclideanRing0 = EuclideanRing0;
};
var fieldNumber = new Field(function () {
    return Data_EuclideanRing.euclideanRingNumber;
});
module.exports = {
    Field: Field, 
    fieldNumber: fieldNumber
};

},{"../Data.CommutativeRing":52,"../Data.EuclideanRing":57,"../Data.Ring":95,"../Data.Semiring":99}],59:[function(require,module,exports){
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],60:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_First = require("../Data.Maybe.First");
var Data_Maybe_Last = require("../Data.Maybe.Last");
var Data_Monoid = require("../Data.Monoid");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Monoid_Conj = require("../Data.Monoid.Conj");
var Data_Monoid_Disj = require("../Data.Monoid.Disj");
var Data_Monoid_Dual = require("../Data.Monoid.Dual");
var Data_Monoid_Endo = require("../Data.Monoid.Endo");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var $$null = function (dictFoldable) {
    return foldr(dictFoldable)(function (v) {
        return function (v1) {
            return false;
        };
    })(true);
};
var oneOf = function (dictFoldable) {
    return function (dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
    };
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)(function ($175) {
                return Control_Apply.applySecond(dictApplicative.Apply0())(f($175));
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var length = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(function (c) {
            return function (v) {
                return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
        })(Data_Semiring.zero(dictSemiring));
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $98 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                        if ($98) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 296, column 3 - line 296, column 27: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $102 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                        if ($102) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 309, column 3 - line 309, column 27: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 130, column 3 - line 130, column 30: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 128, column 3 - line 128, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable line 126, column 3 - line 126, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldr(dictFoldable)(function (x) {
                return function (acc) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldl(dictFoldable)(function (acc) {
                return function (x) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($176) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($176)));
                })(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($177) {
                    return Data_Monoid_Endo.Endo(c($177));
                })(xs))(u);
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
    };
};
var findMap = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return p(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var find = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing && p(v1)) {
                    return new Data_Maybe.Just(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        return function ($178) {
            return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($178));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            return function ($179) {
                return !elem(dictFoldable)(dictEq)(x)($179);
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
    };
};
var and = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable, 
    all: all, 
    and: and, 
    any: any, 
    elem: elem, 
    find: find, 
    findMap: findMap, 
    fold: fold, 
    foldMap: foldMap, 
    foldMapDefaultL: foldMapDefaultL, 
    foldMapDefaultR: foldMapDefaultR, 
    foldl: foldl, 
    foldlDefault: foldlDefault, 
    foldr: foldr, 
    foldrDefault: foldrDefault, 
    for_: for_, 
    intercalate: intercalate, 
    length: length, 
    maximum: maximum, 
    maximumBy: maximumBy, 
    minimum: minimum, 
    minimumBy: minimumBy, 
    notElem: notElem, 
    "null": $$null, 
    oneOf: oneOf, 
    or: or, 
    product: product, 
    sequence_: sequence_, 
    sum: sum, 
    traverse_: traverse_, 
    foldableArray: foldableArray, 
    foldableMaybe: foldableMaybe, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableDisj: foldableDisj, 
    foldableConj: foldableConj, 
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Alt":5,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Control.Plus":31,"../Control.Semigroupoid":32,"../Data.Eq":55,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.Maybe.First":76,"../Data.Maybe.Last":77,"../Data.Monoid":85,"../Data.Monoid.Additive":79,"../Data.Monoid.Conj":80,"../Data.Monoid.Disj":81,"../Data.Monoid.Dual":82,"../Data.Monoid.Endo":83,"../Data.Monoid.Multiplicative":84,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Unit":115,"../Prelude":130,"./foreign":59}],61:[function(require,module,exports){
"use strict";

// module Data.Function.Uncurried

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],62:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var runFn1 = function (f) {
    return f;
};
var mkFn1 = function (f) {
    return f;
};
module.exports = {
    mkFn1: mkFn1, 
    runFn1: runFn1, 
    mkFn0: $foreign.mkFn0, 
    mkFn10: $foreign.mkFn10, 
    mkFn2: $foreign.mkFn2, 
    mkFn3: $foreign.mkFn3, 
    mkFn4: $foreign.mkFn4, 
    mkFn5: $foreign.mkFn5, 
    mkFn6: $foreign.mkFn6, 
    mkFn7: $foreign.mkFn7, 
    mkFn8: $foreign.mkFn8, 
    mkFn9: $foreign.mkFn9, 
    runFn0: $foreign.runFn0, 
    runFn10: $foreign.runFn10, 
    runFn2: $foreign.runFn2, 
    runFn3: $foreign.runFn3, 
    runFn4: $foreign.runFn4, 
    runFn5: $foreign.runFn5, 
    runFn6: $foreign.runFn6, 
    runFn7: $foreign.runFn7, 
    runFn8: $foreign.runFn8, 
    runFn9: $foreign.runFn9
};

},{"../Data.Unit":115,"./foreign":61}],63:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};
var apply = function (f) {
    return function (x) {
        return f(x);
    };
};
module.exports = {
    apply: apply, 
    applyFlipped: applyFlipped, 
    "const": $$const, 
    flip: flip, 
    on: on
};

},{"../Control.Category":14}],64:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Functor = require("../Data.Functor");
var Invariant = function (imap) {
    this.imap = imap;
};
var imapF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    Invariant: Invariant, 
    imap: imap, 
    imapF: imapF, 
    invariantFn: invariantFn, 
    invariantArray: invariantArray
};

},{"../Data.Functor":66}],65:[function(require,module,exports){
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

},{}],66:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Unit = require("../Data.Unit");
var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var mapFlipped = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function (dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function (dictFunctor) {
    return function (f) {
        return function (x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function (dictFunctor) {
    return function (x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);
var flap = function (dictFunctor) {
    return function (ff) {
        return function (x) {
            return map(dictFunctor)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
module.exports = {
    Functor: Functor, 
    flap: flap, 
    map: map, 
    mapFlipped: mapFlipped, 
    "void": $$void, 
    voidLeft: voidLeft, 
    voidRight: voidRight, 
    functorFn: functorFn, 
    functorArray: functorArray
};

},{"../Control.Semigroupoid":32,"../Data.Function":63,"../Data.Unit":115,"./foreign":65}],67:[function(require,module,exports){
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

},{}],68:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};
var tt = function (dict) {
    return dict.tt;
};
var not = function (dict) {
    return dict.not;
};
var implies = function (dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
var ff = function (dict) {
    return dict.ff;
};
var disj = function (dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
var conj = function (dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function (dictHeytingAlgebra) {
    return new HeytingAlgebra(function (f) {
        return function (g) {
            return function (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (g) {
            return function (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (v) {
        return ff(dictHeytingAlgebra);
    }, function (f) {
        return function (g) {
            return function (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function (v) {
        return tt(dictHeytingAlgebra);
    });
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra, 
    conj: conj, 
    disj: disj, 
    ff: ff, 
    implies: implies, 
    not: not, 
    tt: tt, 
    heytingAlgebraBoolean: heytingAlgebraBoolean, 
    heytingAlgebraUnit: heytingAlgebraUnit, 
    heytingAlgebraFunction: heytingAlgebraFunction
};

},{"../Data.Unit":115,"./foreign":67}],69:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad = require("../Control.Monad");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Bounded = require("../Data.Bounded");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Field = require("../Data.Field");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");
var Identity = function (x) {
    return x;
};
var showIdentity = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringIdentity = function (dictSemiring) {
    return dictSemiring;
};
var semigroupIdenity = function (dictSemigroup) {
    return dictSemigroup;
};
var ringIdentity = function (dictRing) {
    return dictRing;
};
var ordIdentity = function (dictOrd) {
    return dictOrd;
};
var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
    return n;
}, Identity);
var monoidIdentity = function (dictMonoid) {
    return dictMonoid;
};
var lazyIdentity = function (dictLazy) {
    return dictLazy;
};
var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorIdentity = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
        };
    };
});
var fieldIdentity = function (dictField) {
    return dictField;
};
var extendIdentity = new Control_Extend.Extend(function () {
    return functorIdentity;
}, function (f) {
    return function (m) {
        return f(m);
    };
});
var euclideanRingIdentity = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqIdentity = function (dictEq) {
    return dictEq;
};
var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
    return eq1Identity;
}, function (dictOrd) {
    return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (v) {
    return v;
});
var commutativeRingIdentity = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedIdentity = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var applyIdentity = new Control_Apply.Apply(function () {
    return functorIdentity;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindIdentity = new Control_Bind.Bind(function () {
    return applyIdentity;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
    return functorIdentity;
}, function (x) {
    return function (v) {
        return x;
    };
});
module.exports = {
    Identity: Identity, 
    newtypeIdentity: newtypeIdentity, 
    eqIdentity: eqIdentity, 
    ordIdentity: ordIdentity, 
    boundedIdentity: boundedIdentity, 
    heytingAlgebraIdentity: heytingAlgebraIdentity, 
    booleanAlgebraIdentity: booleanAlgebraIdentity, 
    semigroupIdenity: semigroupIdenity, 
    monoidIdentity: monoidIdentity, 
    semiringIdentity: semiringIdentity, 
    euclideanRingIdentity: euclideanRingIdentity, 
    ringIdentity: ringIdentity, 
    commutativeRingIdentity: commutativeRingIdentity, 
    fieldIdentity: fieldIdentity, 
    lazyIdentity: lazyIdentity, 
    showIdentity: showIdentity, 
    eq1Identity: eq1Identity, 
    ord1Identity: ord1Identity, 
    functorIdentity: functorIdentity, 
    invariantIdentity: invariantIdentity, 
    altIdentity: altIdentity, 
    applyIdentity: applyIdentity, 
    applicativeIdentity: applicativeIdentity, 
    bindIdentity: bindIdentity, 
    monadIdentity: monadIdentity, 
    extendIdentity: extendIdentity, 
    comonadIdentity: comonadIdentity, 
    foldableIdentity: foldableIdentity, 
    traversableIdentity: traversableIdentity
};

},{"../Control.Alt":5,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Lazy":17,"../Control.Monad":28,"../Data.BooleanAlgebra":49,"../Data.Bounded":51,"../Data.CommutativeRing":52,"../Data.Eq":55,"../Data.EuclideanRing":57,"../Data.Field":58,"../Data.Foldable":60,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.HeytingAlgebra":68,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.Traversable":110,"../Prelude":130}],70:[function(require,module,exports){
"use strict";

// module Data.Int.Bits

exports.and = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 & n2;
  };
};

exports.or = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 | n2;
  };
};

exports.xor = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 ^ n2;
  };
};

exports.shl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 << n2;
  };
};

exports.shr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >> n2;
  };
};

exports.zshr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >>> n2;
  };
};

exports.complement = function (n) {
  /* jshint bitwise: false */
  return ~n;
};

},{}],71:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
module.exports = {
    and: $foreign.and, 
    complement: $foreign.complement, 
    or: $foreign.or, 
    shl: $foreign.shl, 
    shr: $foreign.shr, 
    xor: $foreign.xor, 
    zshr: $foreign.zshr
};

},{"./foreign":70}],72:[function(require,module,exports){
"use strict";

// module Data.Int

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x,y) | 0;
  };
};

},{}],73:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Boolean = require("../Data.Boolean");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Global = require("../Global");
var $$Math = require("../Math");
var Prelude = require("../Prelude");
var Radix = function (x) {
    return x;
};
var radix = function (n) {
    if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Int line 124, column 1 - line 125, column 38: " + [ n.constructor.name ]);
};
var odd = function (x) {
    return (x & 1) !== 0;
};
var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x === Global.infinity) {
        return 0;
    };
    if (x === -Global.infinity) {
        return 0;
    };
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
    };
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.fromMaybe(0)(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
};
var round = function ($2) {
    return unsafeClamp($$Math.round($2));
};
var floor = function ($3) {
    return unsafeClamp($$Math.floor($3));
};
var even = function (x) {
    return (x & 1) === 0;
};
var decimal = 10;
var ceil = function ($4) {
    return unsafeClamp($$Math.ceil($4));
};
var binary = 2;
var base36 = 36;
module.exports = {
    base36: base36, 
    binary: binary, 
    ceil: ceil, 
    decimal: decimal, 
    even: even, 
    floor: floor, 
    fromNumber: fromNumber, 
    fromString: fromString, 
    fromStringAs: fromStringAs, 
    hexadecimal: hexadecimal, 
    octal: octal, 
    odd: odd, 
    radix: radix, 
    round: round, 
    pow: $foreign.pow, 
    toNumber: $foreign.toNumber, 
    toStringAs: $foreign.toStringAs
};

},{"../Control.Semigroupoid":32,"../Data.Boolean":48,"../Data.Bounded":51,"../Data.Eq":55,"../Data.HeytingAlgebra":68,"../Data.Int.Bits":71,"../Data.Maybe":78,"../Data.Ord":92,"../Data.Ring":95,"../Global":118,"../Math":125,"../Prelude":130,"./foreign":72}],74:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Prelude = require("../Prelude");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var toList = function (v) {
    return new Cons(v.value0, v.value1);
};
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            return function ($116) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($116));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    var go = function (__copy_b) {
        return function (__copy_v) {
            var __tco_b = __copy_b;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(b, v) {
                if (v instanceof Nil) {
                    __tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    __tco_b = f(b)(v.value0);
                    __copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Types line 76, column 12 - line 78, column 30: " + [ v.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_b, __copy_v);
            };
            return __tco_result;
        };
    };
    return go;
}, function (f) {
    return function (b) {
        var rev = function (__copy_acc) {
            return function (__copy_v) {
                var __tco_acc = __copy_acc;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(acc, v) {
                    if (v instanceof Nil) {
                        __tco_done = true;
                        return acc;
                    };
                    if (v instanceof Cons) {
                        __tco_acc = new Cons(v.value0, acc);
                        __copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List.Types line 71, column 15 - line 73, column 33: " + [ v.constructor.name ]);
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_acc, __copy_v);
                };
                return __tco_result;
            };
        };
        return function ($117) {
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($117));
        };
    };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var functorList = new Data_Functor.Functor(function (f) {
    return Data_Foldable.foldr(foldableList)(function (x) {
        return function (acc) {
            return new Cons(f(x), acc);
        };
    })(Nil.value);
});
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Nil) {
            return "Nil";
        };
        return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
    });
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function ($118) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                return function ($119) {
                    return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($119));
                };
            })(Control_Applicative.pure(dictApplicative)(Nil.value))($118));
        };
    };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (__copy_source) {
            return function (__copy_memo) {
                var __tco_source = __copy_source;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        __tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        __tco_source = v.value0.value1;
                        __copy_memo = new Cons(v.value0.value0, memo);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List.Types line 84, column 22 - line 86, column 52: " + [ v.constructor.name ]);
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_source, __copy_memo);
                };
                return __tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val), 
                    acc: new Cons(a, v1.acc)
                };
            };
        };
        return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value, 
            acc: Nil.value
        })(v.value1)).val);
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (v) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            var go = function (a$prime) {
                return function (v1) {
                    var acc$prime = new Cons(a$prime, v1.acc);
                    return {
                        val: new Cons(f(acc$prime), v1.val), 
                        acc: acc$prime
                    };
                };
            };
            return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value, 
                acc: Nil.value
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Types line 118, column 3 - line 118, column 21: " + [ f.constructor.name, v.constructor.name ]);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    return function (__copy_v2) {
                        var __tco_v = __copy_v;
                        var __tco_v1 = __copy_v1;
                        var __tco_done = false;
                        var __tco_result;
                        function __tco_loop(v, v1, v2) {
                            if (!v2) {
                                __tco_done = true;
                                return false;
                            };
                            if (v instanceof Nil && v1 instanceof Nil) {
                                __tco_done = true;
                                return v2;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                __tco_v = v.value1;
                                __tco_v1 = v1.value1;
                                __copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                return;
                            };
                            __tco_done = true;
                            return false;
                        };
                        while (!__tco_done) {
                            __tco_result = __tco_loop(__tco_v, __tco_v1, __copy_v2);
                        };
                        return __tco_result;
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var __tco_v = __copy_v;
                    var __tco_done = false;
                    var __tco_result;
                    function __tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            __tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            __tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            __tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                __tco_v = v.value1;
                                __copy_v1 = v1.value1;
                                return;
                            };
                            __tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Types line 49, column 20 - line 57, column 23: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!__tco_done) {
                        __tco_result = __tco_loop(__tco_v, __copy_v1);
                    };
                    return __tco_result;
                };
            };
            return go(xs)(ys);
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types line 93, column 3 - line 93, column 20: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types line 100, column 3 - line 100, column 19: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = f(v.value0);
        return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($120) {
            return toList(f($120));
        })));
    };
});
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, function ($121) {
    return NonEmptyList(Data_NonEmpty.singleton(plusList)($121));
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    NonEmptyList: NonEmptyList, 
    toList: toList, 
    showList: showList, 
    eqList: eqList, 
    eq1List: eq1List, 
    ordList: ordList, 
    ord1List: ord1List, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadZeroList: monadZeroList, 
    monadPlusList: monadPlusList, 
    extendList: extendList, 
    newtypeNonEmptyList: newtypeNonEmptyList, 
    eqNonEmptyList: eqNonEmptyList, 
    ordNonEmptyList: ordNonEmptyList, 
    showNonEmptyList: showNonEmptyList, 
    functorNonEmptyList: functorNonEmptyList, 
    applyNonEmptyList: applyNonEmptyList, 
    applicativeNonEmptyList: applicativeNonEmptyList, 
    bindNonEmptyList: bindNonEmptyList, 
    monadNonEmptyList: monadNonEmptyList, 
    altNonEmptyList: altNonEmptyList, 
    extendNonEmptyList: extendNonEmptyList, 
    comonadNonEmptyList: comonadNonEmptyList, 
    semigroupNonEmptyList: semigroupNonEmptyList, 
    foldableNonEmptyList: foldableNonEmptyList, 
    traversableNonEmptyList: traversableNonEmptyList
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Category":14,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Control.MonadPlus":29,"../Control.MonadZero":30,"../Control.Plus":31,"../Control.Semigroupoid":32,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.NonEmpty":88,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Show":101,"../Data.Traversable":110,"../Data.Tuple":111,"../Data.Unfoldable":113,"../Prelude":130}],75:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var updateAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(updateAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
var uncons = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0, 
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List line 253, column 1 - line 253, column 21: " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value1);
    };
    throw new Error("Failed pattern match at Data.List line 239, column 1 - line 239, column 19: " + [ v.constructor.name ]);
};
var span = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
                init: new Data_List_Types.Cons(v1.value0, v2.init), 
                rest: v2.rest
            };
        };
        return {
            init: Data_List_Types.Nil.value, 
            rest: v1
        };
    };
};
var singleton = function (a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                    return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return v;
            };
            throw new Error("Failed pattern match at Data.List line 468, column 3 - line 470, column 41: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var mergePairs = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        };
        return v;
    };
    var mergeAll = function (__copy_v) {
        var __tco_done = false;
        var __tco_result;
        function __tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                __tco_done = true;
                return v.value0;
            };
            __copy_v = mergePairs(v);
            return;
        };
        while (!__tco_done) {
            __tco_result = __tco_loop(__copy_v);
        };
        return __tco_result;
    };
    var sequences = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            };
            if (Data_Boolean.otherwise) {
                return ascending(v.value1.value0)(function (v1) {
                    return new Data_List_Types.Cons(v.value0, v1);
                })(v.value1.value1);
            };
        };
        return singleton(v);
    };
    var descending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy_v) {
                var __tco_a = __copy_a;
                var __tco_as = __copy_as;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        __tco_a = v.value0;
                        __tco_as = new Data_List_Types.Cons(a, as);
                        __copy_v = v.value1;
                        return;
                    };
                    __tco_done = true;
                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_a, __tco_as, __copy_v);
                };
                return __tco_result;
            };
        };
    };
    var ascending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy_v) {
                var __tco_a = __copy_a;
                var __tco_as = __copy_as;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        __tco_a = v.value0;
                        __tco_as = function (ys) {
                            return as(new Data_List_Types.Cons(a, ys));
                        };
                        __copy_v = v.value1;
                        return;
                    };
                    __tco_done = true;
                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_a, __tco_as, __copy_v);
                };
                return __tco_result;
            };
        };
    };
    return function ($304) {
        return mergeAll(sequences($304));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var __tco_acc = __copy_acc;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                    __copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List line 359, column 11 - line 362, column 36: " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_acc, __copy_v);
            };
            return __tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var snoc = function (xs) {
    return function (x) {
        return reverse(new Data_List_Types.Cons(x, reverse(xs)));
    };
};
var take = (function () {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            return function (__copy_v1) {
                var __tco_acc = __copy_acc;
                var __tco_v = __copy_v;
                var __tco_done = false;
                var __tco_result;
                function __tco_loop(acc, v, v1) {
                    if (v === 0) {
                        __tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Nil) {
                        __tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        __tco_acc = new Data_List_Types.Cons(v1.value0, acc);
                        __tco_v = v - 1 | 0;
                        __copy_v1 = v1.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List line 486, column 8 - line 490, column 46: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                };
                while (!__tco_done) {
                    __tco_result = __tco_loop(__tco_acc, __tco_v, __copy_v1);
                };
                return __tco_result;
            };
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var takeWhile = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var __tco_acc = __copy_acc;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                    __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                    __copy_v = v.value1;
                    return;
                };
                __tco_done = true;
                return reverse(acc);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_acc, __copy_v);
            };
            return __tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var unsnoc = function (lst) {
    var go = function (__copy_v) {
        return function (__copy_acc) {
            var __tco_v = __copy_v;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(v, acc) {
                if (v instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return new Data_Maybe.Just({
                        revInit: acc, 
                        last: v.value0
                    });
                };
                if (v instanceof Data_List_Types.Cons) {
                    __tco_v = v.value1;
                    __copy_acc = new Data_List_Types.Cons(v.value0, acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.List line 261, column 14 - line 265, column 36: " + [ v.constructor.name, acc.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_v, __copy_acc);
            };
            return __tco_result;
        };
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
        return {
            init: reverse(h.revInit), 
            last: h.last
        };
    })(go(lst)(Data_List_Types.Nil.value));
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    return function (__copy_acc) {
                        var __tco_v = __copy_v;
                        var __tco_v1 = __copy_v1;
                        var __tco_done = false;
                        var __tco_result;
                        function __tco_loop(v, v1, acc) {
                            if (v instanceof Data_List_Types.Nil) {
                                __tco_done = true;
                                return acc;
                            };
                            if (v1 instanceof Data_List_Types.Nil) {
                                __tco_done = true;
                                return acc;
                            };
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                __tco_v = v.value1;
                                __tco_v1 = v1.value1;
                                __copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                return;
                            };
                            throw new Error("Failed pattern match at Data.List line 650, column 19 - line 654, column 52: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                        };
                        while (!__tco_done) {
                            __tco_result = __tco_loop(__tco_v, __tco_v1, __copy_acc);
                        };
                        return __tco_result;
                    };
                };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Data_Boolean.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step) {
                        return function (__copy_rest) {
                            var __tco_s = __copy_s;
                            var __tco_e = __copy_e;
                            var __tco_step = __copy_step;
                            var __tco_done = false;
                            var __tco_result;
                            function __tco_loop(s, e, step, rest) {
                                if (s === e) {
                                    __tco_done = true;
                                    return new Data_List_Types.Cons(s, rest);
                                };
                                if (Data_Boolean.otherwise) {
                                    __tco_s = s + step | 0;
                                    __tco_e = e;
                                    __tco_step = step;
                                    __copy_rest = new Data_List_Types.Cons(s, rest);
                                    return;
                                };
                                throw new Error("Failed pattern match at Data.List line 139, column 31 - line 142, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                            while (!__tco_done) {
                                __tco_result = __tco_loop(__tco_s, __tco_e, __tco_step, __copy_rest);
                            };
                            return __tco_result;
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $195 = start > end;
                if ($195) {
                    return 1;
                };
                return -1 | 0;
            })())(Data_List_Types.Nil.value);
        };
        throw new Error("Failed pattern match at Data.List line 138, column 1 - line 142, column 65: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $$null = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var mapWithIndex = function (f) {
    return function (lst) {
        var go = function (__copy_v) {
            return function (__copy_v1) {
                return function (__copy_acc) {
                    var __tco_v = __copy_v;
                    var __tco_v1 = __copy_v1;
                    var __tco_done = false;
                    var __tco_result;
                    function __tco_loop(v, v1, acc) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            __tco_done = true;
                            return acc;
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            __tco_v = v + 1 | 0;
                            __tco_v1 = v1.value1;
                            __copy_acc = new Data_List_Types.Cons(f(v)(v1.value0), acc);
                            return;
                        };
                        throw new Error("Failed pattern match at Data.List line 424, column 22 - line 427, column 48: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                    };
                    while (!__tco_done) {
                        __tco_result = __tco_loop(__tco_v, __tco_v1, __copy_acc);
                    };
                    return __tco_result;
                };
            };
        };
        return reverse(go(0)(lst)(Data_List_Types.Nil.value));
    };
};
var mapMaybe = function (f) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var __tco_acc = __copy_acc;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        __tco_acc = acc;
                        __copy_v = v.value1;
                        return;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        __tco_acc = new Data_List_Types.Cons(v1.value0, acc);
                        __copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List line 412, column 5 - line 414, column 32: " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List line 408, column 14 - line 414, column 32: " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_acc, __copy_v);
            };
            return __tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var manyRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (p) {
            var go = function (acc) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                        return new Data_List_Types.Cons(v1, acc);
                    })(function (v1) {
                        return reverse(acc);
                    })(v));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
    };
};
var someRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var last = function (__copy_v) {
    var __tco_done = false;
    var __tco_result;
    function __tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            __tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Data_List_Types.Cons) {
            __copy_v = v.value1;
            return;
        };
        __tco_done = true;
        return Data_Maybe.Nothing.value;
    };
    while (!__tco_done) {
        __tco_result = __tco_loop(__copy_v);
    };
    return __tco_result;
};
var insertBy = function (v) {
    return function (x) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return singleton(x);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                var v2 = v(x)(v1.value0);
                if (v2 instanceof Data_Ordering.GT) {
                    return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                };
                return new Data_List_Types.Cons(x, v1);
            };
            throw new Error("Failed pattern match at Data.List line 210, column 1 - line 210, column 31: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
        };
    };
};
var insertAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(insertAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var init = function (lst) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.init;
    })(unsnoc(lst));
};
var index = function (__copy_v) {
    return function (__copy_v1) {
        var __tco_v = __copy_v;
        var __tco_done = false;
        var __tco_result;
        function __tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
                __tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                __tco_done = true;
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Data_List_Types.Cons) {
                __tco_v = v.value1;
                __copy_v1 = v1 - 1 | 0;
                return;
            };
            throw new Error("Failed pattern match at Data.List line 275, column 1 - line 275, column 22: " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!__tco_done) {
            __tco_result = __tco_loop(__tco_v, __copy_v1);
        };
        return __tco_result;
    };
};
var head = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.List line 224, column 1 - line 224, column 19: " + [ v.constructor.name ]);
};
var transpose = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
        return transpose(v.value1);
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
    };
    throw new Error("Failed pattern match at Data.List line 687, column 1 - line 687, column 20: " + [ v.constructor.name ]);
};
var groupBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        };
        throw new Error("Failed pattern match at Data.List line 560, column 1 - line 560, column 20: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var group$prime = function (dictOrd) {
    return function ($305) {
        return group(dictOrd.Eq0())(sort(dictOrd)($305));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var foldM = function (dictMonad) {
    return function (v) {
        return function (a) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                        return foldM(dictMonad)(v)(a$prime)(v1.value1);
                    });
                };
                throw new Error("Failed pattern match at Data.List line 698, column 1 - line 698, column 23: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (__copy_v) {
        return function (__copy_v1) {
            var __tco_v = __copy_v;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(v, v1) {
                if (v1 instanceof Data_List_Types.Cons) {
                    if (fn(v1.value0)) {
                        __tco_done = true;
                        return new Data_Maybe.Just(v);
                    };
                    if (Data_Boolean.otherwise) {
                        __tco_v = v + 1 | 0;
                        __copy_v1 = v1.value1;
                        return;
                    };
                };
                if (v1 instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List line 295, column 3 - line 296, column 44: " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_v, __copy_v1);
            };
            return __tco_result;
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (v2) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (v2) {
                                return new Data_List_Types.Cons(v1.value0, v3);
                            };
                            return v3;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List line 397, column 1 - line 397, column 25: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var __tco_acc = __copy_acc;
            var __tco_done = false;
            var __tco_result;
            function __tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    __tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (p(v.value0)) {
                        __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                        __copy_v = v.value1;
                        return;
                    };
                    if (Data_Boolean.otherwise) {
                        __tco_acc = acc;
                        __copy_v = v.value1;
                        return;
                    };
                };
                throw new Error("Failed pattern match at Data.List line 381, column 12 - line 386, column 28: " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!__tco_done) {
                __tco_result = __tco_loop(__tco_acc, __copy_v);
            };
            return __tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var intersectBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                return !v(v1.value0)(y);
            })(v1.value1)));
        };
        throw new Error("Failed pattern match at Data.List line 579, column 1 - line 579, column 22: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function (__copy_v) {
        var __tco_done = false;
        var __tco_result;
        function __tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                __copy_v = v.value1;
                return;
            };
            __tco_done = true;
            return v;
        };
        while (!__tco_done) {
            __tco_result = __tco_loop(__copy_v);
        };
        return __tco_result;
    };
    return go;
};
var drop = function (__copy_v) {
    return function (__copy_v1) {
        var __tco_v = __copy_v;
        var __tco_done = false;
        var __tco_result;
        function __tco_loop(v, v1) {
            if (v === 0) {
                __tco_done = true;
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                __tco_done = true;
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons) {
                __tco_v = v - 1 | 0;
                __copy_v1 = v1.value1;
                return;
            };
            throw new Error("Failed pattern match at Data.List line 505, column 1 - line 505, column 15: " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!__tco_done) {
            __tco_result = __tco_loop(__tco_v, __copy_v1);
        };
        return __tco_result;
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                return v2.value1;
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            };
            throw new Error("Failed pattern match at Data.List line 606, column 1 - line 606, column 23: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (v) {
    return function (v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(v1.value1);
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                return new Data_List_Types.Cons(v1.value0, v2);
            })(deleteAt(v - 1 | 0)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.id(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
var alterAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return Data_Maybe.Just.create((function () {
                    var v3 = v1(v2.value0);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return v2.value1;
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v3.value0, v2.value1);
                    };
                    throw new Error("Failed pattern match at Data.List line 345, column 3 - line 347, column 23: " + [ v3.constructor.name ]);
                })());
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(alterAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($306) {
            return Data_Maybe.Just.create(f($306));
        });
    };
};
module.exports = {
    alterAt: alterAt, 
    catMaybes: catMaybes, 
    concat: concat, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    difference: difference, 
    drop: drop, 
    dropWhile: dropWhile, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filter: filter, 
    filterM: filterM, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    foldM: foldM, 
    fromFoldable: fromFoldable, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    index: index, 
    init: init, 
    insert: insert, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    length: length, 
    many: many, 
    manyRec: manyRec, 
    mapMaybe: mapMaybe, 
    mapWithIndex: mapWithIndex, 
    modifyAt: modifyAt, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    range: range, 
    reverse: reverse, 
    singleton: singleton, 
    slice: slice, 
    snoc: snoc, 
    some: some, 
    someRec: someRec, 
    sort: sort, 
    sortBy: sortBy, 
    span: span, 
    tail: tail, 
    take: take, 
    takeWhile: takeWhile, 
    toUnfoldable: toUnfoldable, 
    transpose: transpose, 
    uncons: uncons, 
    union: union, 
    unionBy: unionBy, 
    unsnoc: unsnoc, 
    unzip: unzip, 
    updateAt: updateAt, 
    zip: zip, 
    zipWith: zipWith, 
    zipWithA: zipWithA
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Category":14,"../Control.Lazy":17,"../Control.Monad.Rec.Class":25,"../Control.Semigroupoid":32,"../Data.Bifunctor":46,"../Data.Boolean":48,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.List.Types":74,"../Data.Maybe":78,"../Data.NonEmpty":88,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Traversable":110,"../Data.Tuple":111,"../Data.Unfoldable":113,"../Data.Unit":115,"../Prelude":130}],76:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var ordFirst = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;
var eqFirst = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1First = Data_Maybe.eq1Maybe;
var boundedFirst = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
module.exports = {
    First: First, 
    newtypeFirst: newtypeFirst, 
    eqFirst: eqFirst, 
    eq1First: eq1First, 
    ordFirst: ordFirst, 
    ord1First: ord1First, 
    boundedFirst: boundedFirst, 
    functorFirst: functorFirst, 
    invariantFirst: invariantFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],77:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last line 54, column 3 - line 54, column 39: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordLast = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
    return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;
var eqLast = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1Last = Data_Maybe.eq1Maybe;
var boundedLast = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
module.exports = {
    Last: Last, 
    newtypeLast: newtypeLast, 
    eqLast: eqLast, 
    eq1Last: eq1Last, 
    ordLast: ordLast, 
    ord1Last: ord1Last, 
    boundedLast: boundedLast, 
    functorLast: functorLast, 
    invariantLast: invariantLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],78:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Just) {
            return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe line 208, column 3 - line 209, column 3: " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe line 177, column 3 - line 177, column 23: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Data_Unit.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 233, column 1 - line 233, column 28: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Control_Category.id(Control_Category.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Control_Category.id(Control_Category.categoryFn));
};
var fromJust = function (dictPartial) {
    return function (v) {
        var __unused = function (dictPartial1) {
            return function ($dollar34) {
                return $dollar34;
            };
        };
        return __unused(dictPartial)((function () {
            if (v instanceof Just) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Data.Maybe line 271, column 1 - line 271, column 21: " + [ v.constructor.name ]);
        })());
    };
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return true;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMaybe(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Nothing) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Nothing) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 196, column 1 - line 196, column 51: " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
    return eq1Maybe;
}, function (dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
});
var boundedMaybe = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordMaybe(dictBounded.Ord0());
    }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};
var applyMaybe = new Control_Apply.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Data_Functor.map(functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Control_Bind.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 128, column 3 - line 128, column 24: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return applicativeMaybe;
}, function () {
    return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    fromJust: fromJust, 
    fromMaybe: fromMaybe, 
    "fromMaybe'": fromMaybe$prime, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    "maybe'": maybe$prime, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadZeroMaybe: monadZeroMaybe, 
    extendMaybe: extendMaybe, 
    invariantMaybe: invariantMaybe, 
    semigroupMaybe: semigroupMaybe, 
    monoidMaybe: monoidMaybe, 
    eqMaybe: eqMaybe, 
    eq1Maybe: eq1Maybe, 
    ordMaybe: ordMaybe, 
    ord1Maybe: ord1Maybe, 
    boundedMaybe: boundedMaybe, 
    showMaybe: showMaybe
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Category":14,"../Control.Extend":16,"../Control.Monad":28,"../Control.MonadZero":30,"../Control.Plus":31,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Function":63,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Show":101,"../Data.Unit":115,"../Prelude":130}],79:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return dictOrd;
};
var newtypeAdditive = new Data_Newtype.Newtype(function (n) {
    return n;
}, Additive);
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Data_Semiring.zero(dictSemiring));
};
var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorAdditive = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendAdditive = new Control_Extend.Extend(function () {
    return functorAdditive;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqAdditive = function (dictEq) {
    return dictEq;
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, Data_Newtype.unwrap(newtypeAdditive));
var boundedAdditive = function (dictBounded) {
    return dictBounded;
};
var applyAdditive = new Control_Apply.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Control_Bind.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    newtypeAdditive: newtypeAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    boundedAdditive: boundedAdditive, 
    functorAdditive: functorAdditive, 
    invariantAdditive: invariantAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Prelude":130}],80:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var semigroupConj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return dictOrd;
};
var newtypeConj = new Data_Newtype.Newtype(function (n) {
    return n;
}, Conj);
var monoidConj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var invariantConj = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorConj = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendConj = new Control_Extend.Extend(function () {
    return functorConj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqConj = function (dictEq) {
    return dictEq;
};
var comonadConj = new Control_Comonad.Comonad(function () {
    return extendConj;
}, Data_Newtype.unwrap(newtypeConj));
var boundedConj = function (dictBounded) {
    return dictBounded;
};
var applyConj = new Control_Apply.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Control_Bind.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj, 
    newtypeConj: newtypeConj, 
    eqConj: eqConj, 
    ordConj: ordConj, 
    boundedConj: boundedConj, 
    functorConj: functorConj, 
    invariantConj: invariantConj, 
    applyConj: applyConj, 
    applicativeConj: applicativeConj, 
    bindConj: bindConj, 
    monadConj: monadConj, 
    extendConj: extendConj, 
    comonadConj: comonadConj, 
    showConj: showConj, 
    semigroupConj: semigroupConj, 
    monoidConj: monoidConj, 
    semiringConj: semiringConj
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.HeytingAlgebra":68,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Prelude":130}],81:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var semigroupDisj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return dictOrd;
};
var newtypeDisj = new Data_Newtype.Newtype(function (n) {
    return n;
}, Disj);
var monoidDisj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var invariantDisj = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorDisj = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDisj = new Control_Extend.Extend(function () {
    return functorDisj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDisj = function (dictEq) {
    return dictEq;
};
var comonadDisj = new Control_Comonad.Comonad(function () {
    return extendDisj;
}, Data_Newtype.unwrap(newtypeDisj));
var boundedDisj = function (dictBounded) {
    return dictBounded;
};
var applyDisj = new Control_Apply.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Control_Bind.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj, 
    newtypeDisj: newtypeDisj, 
    eqDisj: eqDisj, 
    ordDisj: ordDisj, 
    boundedDisj: boundedDisj, 
    functorDisj: functorDisj, 
    invariantDisj: invariantDisj, 
    applyDisj: applyDisj, 
    applicativeDisj: applicativeDisj, 
    bindDisj: bindDisj, 
    monadDisj: monadDisj, 
    extendDisj: extendDisj, 
    comonadDisj: comonadDisj, 
    showDisj: showDisj, 
    semigroupDisj: semigroupDisj, 
    monoidDisj: monoidDisj, 
    semiringDisj: semiringDisj
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.HeytingAlgebra":68,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Prelude":130}],82:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
        };
    });
};
var ordDual = function (dictOrd) {
    return dictOrd;
};
var newtypeDual = new Data_Newtype.Newtype(function (n) {
    return n;
}, Dual);
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid.Semigroup0());
    }, Data_Monoid.mempty(dictMonoid));
};
var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorDual = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDual = new Control_Extend.Extend(function () {
    return functorDual;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDual = function (dictEq) {
    return dictEq;
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, Data_Newtype.unwrap(newtypeDual));
var boundedDual = function (dictBounded) {
    return dictBounded;
};
var applyDual = new Control_Apply.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Control_Bind.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    newtypeDual: newtypeDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    boundedDual: boundedDual, 
    functorDual: functorDual, 
    invariantDual: invariantDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],83:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Semigroup = require("../Data.Semigroup");
var Prelude = require("../Prelude");
var Endo = function (x) {
    return x;
};
var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function ($11) {
            return v(v1($11));
        };
    };
});
var newtypeEndo = new Data_Newtype.Newtype(function (n) {
    return n;
}, Endo);
var monoidEndo = new Data_Monoid.Monoid(function () {
    return semigroupEndo;
}, Control_Category.id(Control_Category.categoryFn));
var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($12) {
                return ab(v(ba($12)));
            };
        };
    };
});
module.exports = {
    Endo: Endo, 
    newtypeEndo: newtypeEndo, 
    invariantEndo: invariantEndo, 
    semigroupEndo: semigroupEndo, 
    monoidEndo: monoidEndo
};

},{"../Control.Category":14,"../Control.Semigroupoid":32,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Semigroup":97,"../Prelude":130}],84:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return dictOrd;
};
var newtypeMultiplicative = new Data_Newtype.Newtype(function (n) {
    return n;
}, Multiplicative);
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Data_Semiring.one(dictSemiring));
};
var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorMultiplicative = new Data_Functor.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendMultiplicative = new Control_Extend.Extend(function () {
    return functorMultiplicative;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqMultiplicative = function (dictEq) {
    return dictEq;
};
var comonadMultiplicative = new Control_Comonad.Comonad(function () {
    return extendMultiplicative;
}, Data_Newtype.unwrap(newtypeMultiplicative));
var boundedMultiplicative = function (dictBounded) {
    return dictBounded;
};
var applyMultiplicative = new Control_Apply.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    newtypeMultiplicative: newtypeMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    boundedMultiplicative: boundedMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    invariantMultiplicative: invariantMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendMultiplicative: extendMultiplicative, 
    comonadMultiplicative: comonadMultiplicative, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Monad":28,"../Data.Bounded":51,"../Data.Eq":55,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Prelude":130}],85:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Function = require("../Data.Function");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Monoid = function (Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
    return Data_Semigroup.semigroupString;
}, "");
var monoidArray = new Monoid(function () {
    return Data_Semigroup.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }, Data_Function["const"](mempty(dictMonoid)));
};
var power = function (dictMonoid) {
    return function (x) {
        var go = function (p) {
            if (p <= 0) {
                return mempty(dictMonoid);
            };
            if (p === 1) {
                return x;
            };
            if (p % 2 === 0) {
                var x$prime = go(p / 2 | 0);
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            };
            if (Data_Boolean.otherwise) {
                var x$prime = go(p / 2 | 0);
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            };
            throw new Error("Failed pattern match at Data.Monoid line 49, column 3 - line 53, column 57: " + [ p.constructor.name ]);
        };
        return go;
    };
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    power: power, 
    monoidUnit: monoidUnit, 
    monoidFn: monoidFn, 
    monoidString: monoidString, 
    monoidArray: monoidArray
};

},{"../Data.Boolean":48,"../Data.Eq":55,"../Data.EuclideanRing":57,"../Data.Function":63,"../Data.Ord":92,"../Data.Semigroup":97,"../Data.Unit":115,"../Prelude":130}],86:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],87:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Prelude = require("../Prelude");
var Newtype = function (unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
};
var wrap = function (dict) {
    return dict.wrap;
};
var unwrap = function (dict) {
    return dict.unwrap;
};
var underF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($50) {
                            return function ($51) {
                                return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)))($50)($51));
                            };
                        };
                    };
                };
            };
        };
    };
};
var underF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($52) {
                            return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($52)));
                        };
                    };
                };
            };
        };
    };
};
var under2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($53) {
                    return function ($54) {
                        return unwrap(dictNewtype1)(Data_Function.on(f)(wrap(dictNewtype))($53)($54));
                    };
                };
            };
        };
    };
};
var under = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($55) {
                    return unwrap(dictNewtype1)(f(wrap(dictNewtype)($55)));
                };
            };
        };
    };
};
var un = function (dictNewtype) {
    return function (v) {
        return unwrap(dictNewtype);
    };
};
var traverse = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                return function ($56) {
                    return Data_Functor.map(dictFunctor)(wrap(dictNewtype))(f(unwrap(dictNewtype)($56)));
                };
            };
        };
    };
};
var overF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($57) {
                            return function ($58) {
                                return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)))($57)($58));
                            };
                        };
                    };
                };
            };
        };
    };
};
var overF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($59) {
                            return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($59)));
                        };
                    };
                };
            };
        };
    };
};
var over2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($60) {
                    return function ($61) {
                        return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($60)($61));
                    };
                };
            };
        };
    };
};
var over = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($62) {
                    return wrap(dictNewtype1)(f(unwrap(dictNewtype)($62)));
                };
            };
        };
    };
};
var op = function (dictNewtype) {
    return un(dictNewtype);
};
var collect = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                return function ($63) {
                    return wrap(dictNewtype)(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($63)));
                };
            };
        };
    };
};
var alaF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($64) {
                            return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                        };
                    };
                };
            };
        };
    };
};
var ala = function (dictFunctor) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (v) {
                return function (f) {
                    return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                };
            };
        };
    };
};
module.exports = {
    Newtype: Newtype, 
    ala: ala, 
    alaF: alaF, 
    collect: collect, 
    op: op, 
    over: over, 
    over2: over2, 
    overF: overF, 
    overF2: overF2, 
    traverse: traverse, 
    un: un, 
    under: under, 
    under2: under2, 
    underF: underF, 
    underF2: underF2, 
    unwrap: unwrap, 
    wrap: wrap
};

},{"../Control.Semigroupoid":32,"../Data.Function":63,"../Data.Functor":66,"../Prelude":130}],88:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Plus = require("../Control.Plus");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");
var NonEmpty = (function () {
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    return NonEmpty;
})();
var tail = function (v) {
    return v.value1;
};
var singleton = function (dictPlus) {
    return function (a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
    };
};
var showNonEmpty = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var oneOf = function (dictAlternative) {
    return function (v) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
    };
};
var head = function (v) {
    return v.value0;
};
var functorNonEmpty = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
        };
    });
};
var fromNonEmpty = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var foldl1 = function (dictFoldable) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
        };
    };
};
var foldableNonEmpty = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
        };
    });
};
var traversableNonEmpty = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableNonEmpty(dictTraversable.Foldable1());
    }, function () {
        return functorNonEmpty(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var foldMap1 = function (dictSemigroup) {
    return function (dictFoldable) {
        return function (f) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(function (s) {
                    return function (a1) {
                        return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                    };
                })(f(v.value0))(v.value1);
            };
        };
    };
};
var fold1 = function (dictSemigroup) {
    return function (dictFoldable) {
        return foldMap1(dictSemigroup)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
    };
};
var eq1NonEmpty = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return function (v) {
            return function (v1) {
                return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq1)(dictEq)(v.value1)(v1.value1);
            };
        };
    });
};
var eqNonEmpty = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(Data_Eq.eq1(eq1NonEmpty(dictEq1))(dictEq));
    };
};
var ord1NonEmpty = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1NonEmpty(dictOrd1.Eq10());
    }, function (dictOrd) {
        return function (v) {
            return function (v1) {
                var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                if (v2 instanceof Data_Ordering.EQ) {
                    return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value1)(v1.value1);
                };
                return v2;
            };
        };
    });
};
var ordNonEmpty = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
        }, Data_Ord.compare1(ord1NonEmpty(dictOrd1))(dictOrd));
    };
};
module.exports = {
    NonEmpty: NonEmpty, 
    fold1: fold1, 
    foldMap1: foldMap1, 
    foldl1: foldl1, 
    fromNonEmpty: fromNonEmpty, 
    head: head, 
    oneOf: oneOf, 
    singleton: singleton, 
    tail: tail, 
    showNonEmpty: showNonEmpty, 
    eqNonEmpty: eqNonEmpty, 
    eq1NonEmpty: eq1NonEmpty, 
    ordNonEmpty: ordNonEmpty, 
    ord1NonEmpty: ord1NonEmpty, 
    functorNonEmpty: functorNonEmpty, 
    foldableNonEmpty: foldableNonEmpty, 
    traversableNonEmpty: traversableNonEmpty
};

},{"../Control.Alt":5,"../Control.Alternative":6,"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Control.Plus":31,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Semigroup":97,"../Data.Show":101,"../Data.Traversable":110,"../Prelude":130}],89:[function(require,module,exports){
"use strict";

exports.unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

},{}],90:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Ordering = require("../Data.Ordering");
var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
    unsafeCompare: unsafeCompare
};

},{"../Data.Ordering":93,"./foreign":89}],91:[function(require,module,exports){
"use strict";

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

},{}],92:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Ord_Unsafe = require("../Data.Ord.Unsafe");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");
var Ord = function (Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
var Ord1 = function (Eq10, compare1) {
    this.Eq10 = Eq10;
    this.compare1 = compare1;
};
var ordVoid = new Ord(function () {
    return Data_Eq.eqVoid;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordUnit = new Ord(function () {
    return Data_Eq.eqUnit;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordString = new Ord(function () {
    return Data_Eq.eqString;
}, Data_Ord_Unsafe.unsafeCompare);
var ordOrdering = new Ord(function () {
    return Data_Ordering.eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.GT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        throw new Error("Failed pattern match at Data.Ord line 69, column 3 - line 69, column 21: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordNumber = new Ord(function () {
    return Data_Eq.eqNumber;
}, Data_Ord_Unsafe.unsafeCompare);
var ordInt = new Ord(function () {
    return Data_Eq.eqInt;
}, Data_Ord_Unsafe.unsafeCompare);
var ordChar = new Ord(function () {
    return Data_Eq.eqChar;
}, Data_Ord_Unsafe.unsafeCompare);
var ordBoolean = new Ord(function () {
    return Data_Eq.eqBoolean;
}, Data_Ord_Unsafe.unsafeCompare);
var compare1 = function (dict) {
    return dict.compare1;
};
var compare = function (dict) {
    return dict.compare;
};
var comparing = function (dictOrd) {
    return function (f) {
        return Data_Function.on(compare(dictOrd))(f);
    };
};
var greaterThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return true;
            };
            return false;
        };
    };
};
var greaterThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return false;
            };
            return true;
        };
    };
};
var signum = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($33) {
                return Data_Semiring.one(dictRing.Semiring0());
            };
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
    };
};
var lessThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return true;
            };
            return false;
        };
    };
};
var lessThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return false;
            };
            return true;
        };
    };
};
var max = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return y;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return x;
            };
            throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
        };
    };
};
var min = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return x;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return y;
            };
            throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
        };
    };
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return Data_Eq.eqArray(dictOrd.Eq0());
    }, (function () {
        var toDelta = function (x) {
            return function (y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.GT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Ord line 61, column 7 - line 66, column 1: " + [ v.constructor.name ]);
            };
        };
        return function (xs) {
            return function (ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    })());
};
var ord1Array = new Ord1(function () {
    return Data_Eq.eq1Array;
}, function (dictOrd) {
    return compare(ordArray(dictOrd));
});
var clamp = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
};
var between = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                if (lessThan(dictOrd)(x)(low)) {
                    return false;
                };
                if (greaterThan(dictOrd)(x)(hi)) {
                    return false;
                };
                return true;
            };
        };
    };
};
var abs = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($42) {
                return x;
            };
            return Data_Ring.negate(dictRing)(x);
        };
    };
};
module.exports = {
    Ord: Ord, 
    Ord1: Ord1, 
    abs: abs, 
    between: between, 
    clamp: clamp, 
    compare: compare, 
    compare1: compare1, 
    comparing: comparing, 
    greaterThan: greaterThan, 
    greaterThanOrEq: greaterThanOrEq, 
    lessThan: lessThan, 
    lessThanOrEq: lessThanOrEq, 
    max: max, 
    min: min, 
    signum: signum, 
    ordBoolean: ordBoolean, 
    ordInt: ordInt, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordChar: ordChar, 
    ordUnit: ordUnit, 
    ordVoid: ordVoid, 
    ordArray: ordArray, 
    ordOrdering: ordOrdering, 
    ord1Array: ord1Array
};

},{"../Data.Eq":55,"../Data.Function":63,"../Data.Ord.Unsafe":90,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semiring":99,"../Data.Unit":115,"../Data.Void":116,"./foreign":91}],93:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Eq = require("../Data.Eq");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var showOrdering = new Data_Show.Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Data.Ordering line 27, column 3 - line 28, column 3: " + [ v.constructor.name ]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Data.Ordering line 22, column 3 - line 22, column 19: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invert = function (v) {
    if (v instanceof GT) {
        return LT.value;
    };
    if (v instanceof EQ) {
        return EQ.value;
    };
    if (v instanceof LT) {
        return GT.value;
    };
    throw new Error("Failed pattern match at Data.Ordering line 34, column 1 - line 34, column 15: " + [ v.constructor.name ]);
};
var eqOrdering = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
module.exports = {
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    invert: invert, 
    eqOrdering: eqOrdering, 
    semigroupOrdering: semigroupOrdering, 
    showOrdering: showOrdering
};

},{"../Data.Eq":55,"../Data.Semigroup":97,"../Data.Show":101}],94:[function(require,module,exports){
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

},{}],95:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Ring = function (Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
var sub = function (dict) {
    return dict.sub;
};
var ringUnit = new Ring(function () {
    return Data_Semiring.semiringUnit;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
var ringFn = function (dictRing) {
    return new Ring(function () {
        return Data_Semiring.semiringFn(dictRing.Semiring0());
    }, function (f) {
        return function (g) {
            return function (x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
};
var negate = function (dictRing) {
    return function (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
    };
};
module.exports = {
    Ring: Ring, 
    negate: negate, 
    sub: sub, 
    ringInt: ringInt, 
    ringNumber: ringNumber, 
    ringUnit: ringUnit, 
    ringFn: ringFn
};

},{"../Data.Semiring":99,"../Data.Unit":115,"./foreign":94}],96:[function(require,module,exports){
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

},{}],97:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");
var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupArray = new Semigroup($foreign.concatArray);
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
module.exports = {
    Semigroup: Semigroup, 
    append: append, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupVoid: semigroupVoid, 
    semigroupFn: semigroupFn, 
    semigroupArray: semigroupArray
};

},{"../Data.Unit":115,"../Data.Void":116,"./foreign":96}],98:[function(require,module,exports){
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

},{}],99:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var zero = function (dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var one = function (dict) {
    return dict.one;
};
var mul = function (dict) {
    return dict.mul;
};
var add = function (dict) {
    return dict.add;
};
var semiringFn = function (dictSemiring) {
    return new Semiring(function (f) {
        return function (g) {
            return function (x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (f) {
        return function (g) {
            return function (x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (v) {
        return one(dictSemiring);
    }, function (v) {
        return zero(dictSemiring);
    });
};
module.exports = {
    Semiring: Semiring, 
    add: add, 
    mul: mul, 
    one: one, 
    zero: zero, 
    semiringInt: semiringInt, 
    semiringNumber: semiringNumber, 
    semiringFn: semiringFn, 
    semiringUnit: semiringUnit
};

},{"../Data.Unit":115,"./foreign":98}],100:[function(require,module,exports){
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
    function (c, i) {
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

},{}],101:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Show = function (show) {
    this.show = show;
};
var showString = new Show($foreign.showStringImpl);
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
module.exports = {
    Show: Show, 
    show: show, 
    showBoolean: showBoolean, 
    showInt: showInt, 
    showNumber: showNumber, 
    showChar: showChar, 
    showString: showString, 
    showArray: showArray
};

},{"./foreign":100}],102:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_MonadZero = require("../Control.MonadZero");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Prelude = require("../Prelude");
var RegexFlags = (function () {
    function RegexFlags(value0) {
        this.value0 = value0;
    };
    RegexFlags.create = function (value0) {
        return new RegexFlags(value0);
    };
    return RegexFlags;
})();
var unicode = new RegexFlags({
    global: false, 
    ignoreCase: false, 
    multiline: false, 
    sticky: false, 
    unicode: true
});
var sticky = new RegexFlags({
    global: false, 
    ignoreCase: false, 
    multiline: false, 
    sticky: true, 
    unicode: false
});
var showRegexFlags = new Data_Show.Show(function (v) {
    var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
    var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
    if ($6) {
        return "noFlags";
    };
    return "(" + (Data_String.joinWith(" <> ")(usedFlags) + ")");
});
var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return new RegexFlags({
            global: v.value0.global || v1.value0.global, 
            ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase, 
            multiline: v.value0.multiline || v1.value0.multiline, 
            sticky: v.value0.sticky || v1.value0.sticky, 
            unicode: v.value0.unicode || v1.value0.unicode
        });
    };
});
var noFlags = new RegexFlags({
    global: false, 
    ignoreCase: false, 
    multiline: false, 
    sticky: false, 
    unicode: false
});
var multiline = new RegexFlags({
    global: false, 
    ignoreCase: false, 
    multiline: true, 
    sticky: false, 
    unicode: false
});
var monoidRegexFlags = new Data_Monoid.Monoid(function () {
    return semigroupRegexFlags;
}, noFlags);
var ignoreCase = new RegexFlags({
    global: false, 
    ignoreCase: true, 
    multiline: false, 
    sticky: false, 
    unicode: false
});
var global = new RegexFlags({
    global: true, 
    ignoreCase: false, 
    multiline: false, 
    sticky: false, 
    unicode: false
});
var eqRegexFlags = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
    };
});
module.exports = {
    RegexFlags: RegexFlags, 
    global: global, 
    ignoreCase: ignoreCase, 
    multiline: multiline, 
    noFlags: noFlags, 
    sticky: sticky, 
    unicode: unicode, 
    semigroupRegexFlags: semigroupRegexFlags, 
    monoidRegexFlags: monoidRegexFlags, 
    eqRegexFlags: eqRegexFlags, 
    showRegexFlags: showRegexFlags
};

},{"../Control.MonadPlus":29,"../Control.MonadZero":30,"../Data.Eq":55,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.Monoid":85,"../Data.Semigroup":97,"../Data.Show":101,"../Data.String":108,"../Prelude":130}],103:[function(require,module,exports){
"use strict";

exports["showRegex'"] = function (r) {
  return "" + r;
};

exports["regex'"] = function (left) {
  return function (right) {
    return function (s1) {
      return function (s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};

exports.source = function (r) {
  return r.source;
};

exports["flags'"] = function (r) {
  return {
    multiline: r.multiline,
    ignoreCase: r.ignoreCase,
    global: r.global,
    sticky: !!r.sticky,
    unicode: !!r.unicode
  };
};

exports.test = function (r) {
  return function (s) {
    var lastIndex = r.lastIndex;
    var result = r.test(s);
    r.lastIndex = lastIndex;
    return result;
  };
};

exports._match = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var m = s.match(r);
        if (m == null) {
          return nothing;
        } else {
          var list = [];
          for (var i = 0; i < m.length; i++) {
            list.push(m[i] == null ? nothing : just(m[i]));
          }
          return just(list);
        }
      };
    };
  };
};

exports.replace = function (r) {
  return function (s1) {
    return function (s2) {
      return s2.replace(r, s1);
    };
  };
};

exports["replace'"] = function (r) {
  return function (f) {
    return function (s2) {
      return s2.replace(r, function (match) {
        return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
      });
    };
  };
};

exports._search = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

exports.split = function (r) {
  return function (s) {
    return s.split(r);
  };
};

},{}],104:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags");
var Prelude = require("../Prelude");
var showRegex = new Data_Show.Show($foreign["showRegex'"]);
var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var renderFlags = function (v) {
    return (function () {
        if (v.value0.global) {
            return "g";
        };
        return "";
    })() + ((function () {
        if (v.value0.ignoreCase) {
            return "i";
        };
        return "";
    })() + ((function () {
        if (v.value0.multiline) {
            return "m";
        };
        return "";
    })() + ((function () {
        if (v.value0.sticky) {
            return "y";
        };
        return "";
    })() + (function () {
        if (v.value0.unicode) {
            return "u";
        };
        return "";
    })())));
};
var regex = function (s) {
    return function (f) {
        return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
    };
};
var parseFlags = function (s) {
    return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String.contains("g")(s), 
        ignoreCase: Data_String.contains("i")(s), 
        multiline: Data_String.contains("m")(s), 
        sticky: Data_String.contains("y")(s), 
        unicode: Data_String.contains("u")(s)
    });
};
var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var flags = function ($8) {
    return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
};
module.exports = {
    flags: flags, 
    match: match, 
    parseFlags: parseFlags, 
    regex: regex, 
    renderFlags: renderFlags, 
    search: search, 
    showRegex: showRegex, 
    replace: $foreign.replace, 
    "replace'": $foreign["replace'"], 
    source: $foreign.source, 
    split: $foreign.split, 
    test: $foreign.test
};

},{"../Control.Semigroupoid":32,"../Data.Either":53,"../Data.Function":63,"../Data.Maybe":78,"../Data.Semigroup":97,"../Data.Show":101,"../Data.String":108,"../Data.String.Regex.Flags":102,"../Prelude":130,"./foreign":103}],105:[function(require,module,exports){
"use strict";

exports.charCodeAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charCodeAt(i);
    throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
  };
};

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],106:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
module.exports = {
    "char": $foreign["char"], 
    charAt: $foreign.charAt, 
    charCodeAt: $foreign.charCodeAt
};

},{"./foreign":105}],107:[function(require,module,exports){
"use strict";

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports.singleton = function (c) {
  return c;
};

exports._charCodeAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.fromCharArray = function (a) {
  return a.join("");
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_indexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_lastIndexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports.count = function (p) {
  return function (s) {
    var i = 0;
    while (i < s.length && p(s.charAt(i))) i++;
    return i;
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports._splitAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ?
               just({ before: s.substring(0, i), after: s.substring(i) }) :
               nothing;
      };
    };
  };
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};

},{}],108:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String_Unsafe = require("../Data.String.Unsafe");
var Prelude = require("../Prelude");
var Replacement = function (x) {
    return x;
};
var Pattern = function (x) {
    return x;
};
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v), 
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.count(p)(s))(s);
    };
};
var splitAt = $foreign._splitAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showReplacement = new Data_Show.Show(function (v) {
    return "(Replacement " + (v + ")");
});
var showPattern = new Data_Show.Show(function (v) {
    return "(Pattern " + (v + ")");
});
var $$null = function (s) {
    return s === "";
};
var newtypeReplacement = new Data_Newtype.Newtype(function (n) {
    return n;
}, Replacement);
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var localeCompare = $foreign._localeCompare(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripSuffix = function (v) {
    return function (str) {
        var v1 = lastIndexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
            return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripPrefix = function (v) {
    return function (str) {
        var v1 = indexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
            return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var eqReplacement = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordReplacement = new Data_Ord.Ord(function () {
    return eqReplacement;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqPattern = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordPattern = new Data_Ord.Ord(function () {
    return eqPattern;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.count(p)(s))(s);
    };
};
var contains = function (pat) {
    return function ($48) {
        return Data_Maybe.isJust(indexOf(pat)($48));
    };
};
var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    Pattern: Pattern, 
    Replacement: Replacement, 
    charAt: charAt, 
    charCodeAt: charCodeAt, 
    contains: contains, 
    dropWhile: dropWhile, 
    indexOf: indexOf, 
    "indexOf'": indexOf$prime, 
    lastIndexOf: lastIndexOf, 
    "lastIndexOf'": lastIndexOf$prime, 
    localeCompare: localeCompare, 
    "null": $$null, 
    splitAt: splitAt, 
    stripPrefix: stripPrefix, 
    stripSuffix: stripSuffix, 
    takeWhile: takeWhile, 
    toChar: toChar, 
    uncons: uncons, 
    eqPattern: eqPattern, 
    ordPattern: ordPattern, 
    newtypePattern: newtypePattern, 
    showPattern: showPattern, 
    eqReplacement: eqReplacement, 
    ordReplacement: ordReplacement, 
    newtypeReplacement: newtypeReplacement, 
    showReplacement: showReplacement, 
    count: $foreign.count, 
    drop: $foreign.drop, 
    fromCharArray: $foreign.fromCharArray, 
    joinWith: $foreign.joinWith, 
    length: $foreign.length, 
    replace: $foreign.replace, 
    replaceAll: $foreign.replaceAll, 
    singleton: $foreign.singleton, 
    split: $foreign.split, 
    take: $foreign.take, 
    toCharArray: $foreign.toCharArray, 
    toLower: $foreign.toLower, 
    toUpper: $foreign.toUpper, 
    trim: $foreign.trim
};

},{"../Control.Semigroupoid":32,"../Data.Eq":55,"../Data.Function":63,"../Data.Maybe":78,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.String.Unsafe":106,"../Prelude":130,"./foreign":107}],109:[function(require,module,exports){
"use strict";

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function Cont(fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function consList(x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          var buildFrom = function (x, ys) {
            return apply(map(consList)(f(x)))(ys);
          };

          var go = function (acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last = xs[currentLen - 1];
              return new Cont(function () {
                return go(buildFrom(last, acc), currentLen - 1, xs);
              });
            }
          };

          return function (array) {
            var result = go(pure(emptyList), array.length, array);
            while (result instanceof Cont) {
              result = result.fn();
            }

            return map(listToArray)(result);
          };
        };
      };
    };
  };
}();

},{}],110:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_First = require("../Data.Maybe.First");
var Data_Maybe_Last = require("../Data.Maybe.Last");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Monoid_Conj = require("../Data.Monoid.Conj");
var Data_Monoid_Disj = require("../Data.Monoid.Disj");
var Data_Monoid_Dual = require("../Data.Monoid.Dual");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative");
var Prelude = require("../Prelude");
var StateL = function (x) {
    return x;
};
var StateR = function (x) {
    return x;
};
var Traversable = function (Foldable1, Functor0, sequence, traverse) {
    this.Foldable1 = Foldable1;
    this.Functor0 = Functor0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable line 87, column 3 - line 87, column 35: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable line 85, column 3 - line 85, column 37: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Functor.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
        };
    };
};
var functorStateR = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateR(k)(s);
            return {
                accum: v.accum, 
                value: f(v.value)
            };
        };
    };
});
var functorStateL = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateL(k)(s);
            return {
                accum: v.accum, 
                value: f(v.value)
            };
        };
    };
});
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
var applyStateR = new Control_Apply.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
                accum: v1.accum, 
                value: v1.value(v.value)
            };
        };
    };
});
var applyStateL = new Control_Apply.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
                accum: v1.accum, 
                value: v.value(v1.value)
            };
        };
    };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var applicativeStateL = new Control_Applicative.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    "for": $$for, 
    mapAccumL: mapAccumL, 
    mapAccumR: mapAccumR, 
    scanl: scanl, 
    scanr: scanr, 
    sequence: sequence, 
    sequenceDefault: sequenceDefault, 
    traverse: traverse, 
    traverseDefault: traverseDefault, 
    traversableArray: traversableArray, 
    traversableMaybe: traversableMaybe, 
    traversableFirst: traversableFirst, 
    traversableLast: traversableLast, 
    traversableAdditive: traversableAdditive, 
    traversableDual: traversableDual, 
    traversableConj: traversableConj, 
    traversableDisj: traversableDisj, 
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Category":14,"../Data.Foldable":60,"../Data.Functor":66,"../Data.Maybe":78,"../Data.Maybe.First":76,"../Data.Maybe.Last":77,"../Data.Monoid.Additive":79,"../Data.Monoid.Conj":80,"../Data.Monoid.Disj":81,"../Data.Monoid.Dual":82,"../Data.Monoid.Multiplicative":84,"../Prelude":130,"./foreign":109}],111:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Biapplicative = require("../Control.Biapplicative");
var Control_Biapply = require("../Control.Biapply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad = require("../Control.Monad");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Bifoldable = require("../Data.Bifoldable");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Bitraversable = require("../Data.Bitraversable");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Bounded = require("../Data.Bounded");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_First = require("../Data.Maybe.First");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Data_Semiring.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Data_Ring.Ring(function () {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            return function ($261) {
                return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                    var $143 = Data_Eq.eq(dictEq)(a)(v.value0);
                    if ($143) {
                        return new Data_Maybe.Just(v.value1);
                    };
                    return Data_Maybe.Nothing.value;
                })($261));
            };
        };
    };
};
var heytingAlgebraTuple = function (dictHeytingAlgebra) {
    return function (dictHeytingAlgebra1) {
        return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
        }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
    };
};
var functorTuple = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v.value1));
    };
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Data_Unit.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var eq1Tuple = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
    });
};
var ord1Tuple = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Tuple(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
    });
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var commutativeRingTuple = function (dictCommutativeRing) {
    return function (dictCommutativeRing1) {
        return new Data_CommutativeRing.CommutativeRing(function () {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
        });
    };
};
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Data_BooleanAlgebra.BooleanAlgebra(function () {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyTuple(dictMonoid.Semigroup0());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Control_Monad.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid.Semigroup0());
    });
};
module.exports = {
    Tuple: Tuple, 
    curry: curry, 
    fst: fst, 
    lookup: lookup, 
    snd: snd, 
    swap: swap, 
    uncurry: uncurry, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    eq1Tuple: eq1Tuple, 
    ordTuple: ordTuple, 
    ord1Tuple: ord1Tuple, 
    boundedTuple: boundedTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    semiringTuple: semiringTuple, 
    ringTuple: ringTuple, 
    commutativeRingTuple: commutativeRingTuple, 
    heytingAlgebraTuple: heytingAlgebraTuple, 
    booleanAlgebraTuple: booleanAlgebraTuple, 
    functorTuple: functorTuple, 
    invariantTuple: invariantTuple, 
    bifunctorTuple: bifunctorTuple, 
    applyTuple: applyTuple, 
    biapplyTuple: biapplyTuple, 
    applicativeTuple: applicativeTuple, 
    biapplicativeTuple: biapplicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    foldableTuple: foldableTuple, 
    bifoldableTuple: bifoldableTuple, 
    traversableTuple: traversableTuple, 
    bitraversableTuple: bitraversableTuple
};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Biapplicative":10,"../Control.Biapply":11,"../Control.Bind":13,"../Control.Comonad":15,"../Control.Extend":16,"../Control.Lazy":17,"../Control.Monad":28,"../Control.Semigroupoid":32,"../Data.Bifoldable":40,"../Data.Bifunctor":46,"../Data.Bitraversable":47,"../Data.BooleanAlgebra":49,"../Data.Bounded":51,"../Data.CommutativeRing":52,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.Functor.Invariant":64,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.Maybe.First":76,"../Data.Monoid":85,"../Data.Newtype":87,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.Traversable":110,"../Data.Unit":115,"../Prelude":130}],112:[function(require,module,exports){
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};

},{}],113:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Unfoldable = function (unfoldr) {
    this.unfoldr = unfoldr;
};
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $8 = i <= 0;
                if ($8) {
                    return Data_Maybe.Nothing.value;
                };
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var singleton = function (dictUnfoldable) {
    return replicate(dictUnfoldable)(1);
};
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};
var fromMaybe = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable, 
    fromMaybe: fromMaybe, 
    none: none, 
    replicate: replicate, 
    replicateA: replicateA, 
    singleton: singleton, 
    unfoldr: unfoldr, 
    unfoldableArray: unfoldableArray
};

},{"../Data.Function":63,"../Data.Functor":66,"../Data.Maybe":78,"../Data.Ord":92,"../Data.Ring":95,"../Data.Traversable":110,"../Data.Tuple":111,"../Data.Unit":115,"../Partial.Unsafe":127,"../Prelude":130,"./foreign":112}],114:[function(require,module,exports){
"use strict";

exports.unit = {};

},{}],115:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Data_Show = require("../Data.Show");
var showUnit = new Data_Show.Show(function (v) {
    return "unit";
});
module.exports = {
    showUnit: showUnit, 
    unit: $foreign.unit
};

},{"../Data.Show":101,"./foreign":114}],116:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Data_Show = require("../Data.Show");
var Void = function (x) {
    return x;
};
var absurd = function (a) {
    var spin = function (__copy_v) {
        var __tco_result;
        function __tco_loop(v) {
            __copy_v = v;
            return;
        };
        while (!false) {
            __tco_result = __tco_loop(__copy_v);
        };
        return __tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
module.exports = {
    absurd: absurd, 
    showVoid: showVoid
};

},{"../Data.Show":101}],117:[function(require,module,exports){
/* globals exports */
"use strict";

// module Global

exports.nan = NaN;

exports.isNaN = isNaN;

exports.infinity = Infinity;

exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

exports.decodeURI = decodeURI;
exports.encodeURI = encodeURI;
exports.decodeURIComponent = decodeURIComponent;
exports.encodeURIComponent = encodeURIComponent;

},{}],118:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
module.exports = {
    "decodeURI": $foreign["decodeURI"], 
    "decodeURIComponent": $foreign["decodeURIComponent"], 
    "encodeURI": $foreign["encodeURI"], 
    "encodeURIComponent": $foreign["encodeURIComponent"], 
    infinity: $foreign.infinity, 
    "isFinite": $foreign["isFinite"], 
    "isNaN": $foreign["isNaN"], 
    nan: $foreign.nan, 
    readFloat: $foreign.readFloat, 
    readInt: $foreign.readInt
};

},{"./foreign":117}],119:[function(require,module,exports){
/* global exports */
"use strict";

exports.canvasElementToImageSource = function(e) {
    return e;
};

exports.tryLoadImageImpl = function (src) {
  return function(e) {
        return function(f) {
            return function () {
                var img = new Image();
                img.src = src;
                img.addEventListener("load", function() {
                    f(img)();
                }, false);
                img.addEventListener("error", function(error) {
                    e();
                }, false);

                return {};
            }
        }
    };
};

exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
    return function() {
        var el = document.getElementById(id);
        if (el && el instanceof HTMLCanvasElement) {
            return Just(el);
        } else {
            return Nothing;
        }
    };
};

exports.getContext2D = function(c) {
    return function() {
        return c.getContext('2d');
    };
};

exports.getCanvasWidth = function(canvas) {
    return function() {
        return canvas.width;
    };
};

exports.getCanvasHeight = function(canvas) {
    return function() {
        return canvas.height;
    };
};

exports.setCanvasWidth = function(width) {
    return function(canvas) {
        return function() {
            canvas.width = width;
            return canvas;
        };
    };
};

exports.setCanvasHeight = function(height) {
    return function(canvas) {
        return function() {
            canvas.height = height;
            return canvas;
        };
    };
};

exports.canvasToDataURL = function(canvas) {
    return function() {
        return canvas.toDataURL();
    };
};

exports.setLineWidth = function(width) {
    return function(ctx) {
        return function() {
            ctx.lineWidth = width;
            return ctx;
        };
    };
};

exports.setFillStyle = function(style) {
    return function(ctx) {
        return function() {
            ctx.fillStyle = style;
            return ctx;
        };
    };
};

exports.setStrokeStyle = function(style) {
    return function(ctx) {
        return function() {
            ctx.strokeStyle = style;
            return ctx;
        };
    };
};

exports.setShadowColor = function(color) {
    return function(ctx) {
        return function() {
            ctx.shadowColor = color;
            return ctx;
        };
    };
};

exports.setShadowBlur = function(blur) {
    return function(ctx) {
        return function() {
            ctx.shadowBlur = blur;
            return ctx;
        };
    };
};

exports.setShadowOffsetX = function(offsetX) {
    return function(ctx) {
        return function() {
            ctx.shadowOffsetX = offsetX;
            return ctx;
        };
    };
};

exports.setShadowOffsetY = function(offsetY) {
    return function(ctx) {
        return function() {
            ctx.shadowOffsetY = offsetY;
            return ctx;
        };
    };
};

exports.setMiterLimit = function(limit) {
    return function(ctx) {
        return function() {
            ctx.miterLimit = limit;
            return ctx;
        };
    };
};

exports.setLineCapImpl = function(cap) {
    return function(ctx) {
        return function() {
            ctx.lineCap = cap;
            return ctx;
        };
    };
};

exports.setLineJoinImpl = function(join) {
    return function(ctx) {
        return function() {
            ctx.lineJoin = join;
            return ctx;
        };
    };
};

exports.setGlobalCompositeOperationImpl = function(ctx) {
    return function(op) {
        return function() {
            ctx.globalCompositeOperation = op;
            return ctx;
        };
    };
};

exports.setGlobalAlpha = function(ctx) {
    return function(alpha) {
        return function() {
            ctx.globalAlpha = alpha;
            return ctx;
        };
    };
};

exports.beginPath = function(ctx) {
    return function() {
        ctx.beginPath();
        return ctx;
    };
};

exports.stroke = function(ctx) {
    return function() {
        ctx.stroke();
        return ctx;
    };
};

exports.fill = function(ctx) {
    return function() {
        ctx.fill();
        return ctx;
    };
};

exports.clip = function(ctx) {
    return function() {
        ctx.clip();
        return ctx;
    };
};

exports.lineTo = function(ctx) {
    return function(x) {
        return function(y) {
            return function() {
                ctx.lineTo(x, y);
                return ctx;
            };
        };
    };
};

exports.moveTo = function(ctx) {
    return function(x) {
        return function(y) {
            return function() {
                ctx.moveTo(x, y);
                return ctx;
            };
        };
    };
};

exports.closePath = function(ctx) {
    return function() {
        ctx.closePath();
        return ctx;
    };
};

exports.arc = function(ctx) {
    return function(a) {
        return function() {
            ctx.arc(a.x, a.y, a.r, a.start, a.end);
            return ctx;
        };
    };
};

exports.rect = function(ctx) {
    return function(r) {
        return function() {
            ctx.rect(r.x, r.y, r.w, r.h);
            return ctx;
        };
    };
};

exports.fillRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.fillRect(r.x, r.y, r.w, r.h);
            return ctx;
        };
    };
};

exports.strokeRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.strokeRect(r.x, r.y, r.w, r.h);
            return ctx;
        };
    };
};

exports.scale = function(t) {
    return function(ctx) {
        return function() {
            ctx.scale(t.scaleX, t.scaleY);
            return ctx;
        };
    };
};

exports.rotate = function(angle) {
    return function(ctx) {
        return function() {
            ctx.rotate(angle);
            return ctx;
        };
    };
};

exports.translate = function(t) {
    return function(ctx) {
        return function() {
            ctx.translate(t.translateX, t.translateY);
            return ctx;
        };
    };
};

exports.transform = function(t) {
    return function(ctx) {
        return function() {
            ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
            return ctx;
        };
    };
};

exports.clearRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.clearRect(r.x, r.y, r.w, r.h);
            return ctx;
        };
    };
};

exports.textAlignImpl = function(ctx) {
    return function() {
        return ctx.textAlign;
    }
};

exports.setTextAlignImpl = function(ctx) {
    return function(textAlign) {
        return function() {
            ctx.textAlign = textAlign;
            return ctx;
        }
    }
};

exports.font = function(ctx) {
    return function() {
        return ctx.font;
    };
};

exports.setFont = function(fontspec) {
    return function(ctx) {
        return function() {
            ctx.font = fontspec;
            return ctx;
        };
    };
};

exports.fillText = function(ctx) {
    return function(text) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.fillText(text, x, y);
                    return ctx;
                };
            };
        };
    };
};

exports.strokeText = function(ctx) {
    return function(text) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.strokeText(text, x, y);
                    return ctx;
                };
            };
        };
    };
};

exports.measureText = function(ctx) {
    return function(text) {
        return function() {
            return ctx.measureText(text);
        };
    };
};

exports.save = function(ctx) {
    return function() {
        ctx.save();
        return ctx;
    };
};

exports.restore = function(ctx) {
    return function() {
        ctx.restore();
        return ctx;
    };
};

exports.imageDataWidth = function(image) {
    return image.width;
};

exports.imageDataHeight = function(image) {
    return image.height;
};

exports.imageDataBuffer = function(image) {
    return image.data;
};

exports.getImageData = function(ctx) {
    return function(x) {
        return function(y) {
            return function(w) {
                return function(h) {
                    return function() {
                        return ctx.getImageData(x, y, w, h);
                    };
                };
            };
        };
    };
};

exports.putImageDataFull = function(ctx) {
    return function(image_data) {
        return function(x) {
            return function(y) {
                return function(dx) {
                    return function(dy) {
                        return function(dw) {
                            return function(dh) {
                                return function() {
                                    ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                    return ctx;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

exports.putImageData = function(ctx) {
    return function(image_data) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.putImageData(image_data, x, y);
                    return ctx;
                };
            };
        };
    };
};

exports.createImageData = function(ctx) {
    return function(sw) {
        return function(sh) {
            return function() {
                return ctx.createImageData(sw, sh);
            };
        };
    };
};

exports.createImageDataCopy = function(ctx) {
    return function(image_data) {
        return function() {
            return ctx.createImageData(image_data);
        };
    };
};

exports.drawImage = function(ctx) {
    return function(image_source) {
        return function(dx) {
            return function(dy) {
                return function() {
                    ctx.drawImage(image_source, dx, dy);
                    return ctx;
                };
            };
        };
    };
};

exports.drawImageScale = function(ctx) {
    return function(image_source) {
        return function(dx) {
            return function(dy) {
                return function(dWidth) {
                    return function(dHeight) {
                        return function() {
                            ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                            return ctx;
                        };
                    };
                };
            };
        };
    };
};

exports.drawImageFull = function(ctx) {
    return function(image_source) {
        return function(sx) {
            return function(sy) {
                return function(sWidth) {
                    return function(sHeight) {
                        return function(dx) {
                            return function(dy) {
                                return function(dWidth) {
                                    return function(dHeight) {
                                        return function() {
                                            ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                            return ctx;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

exports.createPatternImpl = function(img) {
    return function(repeat) {
        return function(ctx) {
            return function() {
                return ctx.createPattern(img, repeat);
            };
        };
    };
};

exports.setPatternFillStyle = function(pattern) {
    return function(ctx) {
        return function() {
            ctx.fillStyle = pattern;
            return ctx;
        };
    };
};

exports.createLinearGradient = function(linearGradient) {
    return function(ctx) {
        return function() {
            return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
        };
    };
};

exports.createRadialGradient = function(radialGradient) {
    return function(ctx) {
        return function() {
            return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
        };
    };
};

exports.addColorStop = function(stop) {
    return function(color) {
        return function(gradient) {
            return function() {
                gradient.addColorStop(stop, color);
                return gradient;
            };
        };
    };
};

exports.setGradientFillStyle = function(gradient) {
    return function(ctx) {
        return function() {
            ctx.fillStyle = gradient;
            return ctx;
        };
    };
};

exports.quadraticCurveTo = function(qCurve) {
    return function(ctx) {
        return function() {
            ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
            return ctx;
        };
    };
};

exports.bezierCurveTo = function(bCurve) {
    return function(ctx) {
        return function() {
            ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
            return ctx;
        };
    };
};

},{}],120:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception_Unsafe = require("../Control.Monad.Eff.Exception.Unsafe");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_ArrayBuffer_Types = require("../Data.ArrayBuffer.Types");
var Data_Function = require("../Data.Function");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var AlignLeft = (function () {
    function AlignLeft() {

    };
    AlignLeft.value = new AlignLeft();
    return AlignLeft;
})();
var AlignRight = (function () {
    function AlignRight() {

    };
    AlignRight.value = new AlignRight();
    return AlignRight;
})();
var AlignCenter = (function () {
    function AlignCenter() {

    };
    AlignCenter.value = new AlignCenter();
    return AlignCenter;
})();
var AlignStart = (function () {
    function AlignStart() {

    };
    AlignStart.value = new AlignStart();
    return AlignStart;
})();
var AlignEnd = (function () {
    function AlignEnd() {

    };
    AlignEnd.value = new AlignEnd();
    return AlignEnd;
})();
var Repeat = (function () {
    function Repeat() {

    };
    Repeat.value = new Repeat();
    return Repeat;
})();
var RepeatX = (function () {
    function RepeatX() {

    };
    RepeatX.value = new RepeatX();
    return RepeatX;
})();
var RepeatY = (function () {
    function RepeatY() {

    };
    RepeatY.value = new RepeatY();
    return RepeatY;
})();
var NoRepeat = (function () {
    function NoRepeat() {

    };
    NoRepeat.value = new NoRepeat();
    return NoRepeat;
})();
var BevelJoin = (function () {
    function BevelJoin() {

    };
    BevelJoin.value = new BevelJoin();
    return BevelJoin;
})();
var RoundJoin = (function () {
    function RoundJoin() {

    };
    RoundJoin.value = new RoundJoin();
    return RoundJoin;
})();
var MiterJoin = (function () {
    function MiterJoin() {

    };
    MiterJoin.value = new MiterJoin();
    return MiterJoin;
})();
var Round = (function () {
    function Round() {

    };
    Round.value = new Round();
    return Round;
})();
var Square = (function () {
    function Square() {

    };
    Square.value = new Square();
    return Square;
})();
var Butt = (function () {
    function Butt() {

    };
    Butt.value = new Butt();
    return Butt;
})();
var SourceOver = (function () {
    function SourceOver() {

    };
    SourceOver.value = new SourceOver();
    return SourceOver;
})();
var SourceIn = (function () {
    function SourceIn() {

    };
    SourceIn.value = new SourceIn();
    return SourceIn;
})();
var SourceOut = (function () {
    function SourceOut() {

    };
    SourceOut.value = new SourceOut();
    return SourceOut;
})();
var SourceAtop = (function () {
    function SourceAtop() {

    };
    SourceAtop.value = new SourceAtop();
    return SourceAtop;
})();
var DestinationOver = (function () {
    function DestinationOver() {

    };
    DestinationOver.value = new DestinationOver();
    return DestinationOver;
})();
var DestinationIn = (function () {
    function DestinationIn() {

    };
    DestinationIn.value = new DestinationIn();
    return DestinationIn;
})();
var DestinationOut = (function () {
    function DestinationOut() {

    };
    DestinationOut.value = new DestinationOut();
    return DestinationOut;
})();
var DestinationAtop = (function () {
    function DestinationAtop() {

    };
    DestinationAtop.value = new DestinationAtop();
    return DestinationAtop;
})();
var Lighter = (function () {
    function Lighter() {

    };
    Lighter.value = new Lighter();
    return Lighter;
})();
var Copy = (function () {
    function Copy() {

    };
    Copy.value = new Copy();
    return Copy;
})();
var Xor = (function () {
    function Xor() {

    };
    Xor.value = new Xor();
    return Xor;
})();
var Multiply = (function () {
    function Multiply() {

    };
    Multiply.value = new Multiply();
    return Multiply;
})();
var Screen = (function () {
    function Screen() {

    };
    Screen.value = new Screen();
    return Screen;
})();
var Overlay = (function () {
    function Overlay() {

    };
    Overlay.value = new Overlay();
    return Overlay;
})();
var Darken = (function () {
    function Darken() {

    };
    Darken.value = new Darken();
    return Darken;
})();
var Lighten = (function () {
    function Lighten() {

    };
    Lighten.value = new Lighten();
    return Lighten;
})();
var ColorDodge = (function () {
    function ColorDodge() {

    };
    ColorDodge.value = new ColorDodge();
    return ColorDodge;
})();
var ColorBurn = (function () {
    function ColorBurn() {

    };
    ColorBurn.value = new ColorBurn();
    return ColorBurn;
})();
var HardLight = (function () {
    function HardLight() {

    };
    HardLight.value = new HardLight();
    return HardLight;
})();
var SoftLight = (function () {
    function SoftLight() {

    };
    SoftLight.value = new SoftLight();
    return SoftLight;
})();
var Difference = (function () {
    function Difference() {

    };
    Difference.value = new Difference();
    return Difference;
})();
var Exclusion = (function () {
    function Exclusion() {

    };
    Exclusion.value = new Exclusion();
    return Exclusion;
})();
var Hue = (function () {
    function Hue() {

    };
    Hue.value = new Hue();
    return Hue;
})();
var Saturation = (function () {
    function Saturation() {

    };
    Saturation.value = new Saturation();
    return Saturation;
})();
var Color = (function () {
    function Color() {

    };
    Color.value = new Color();
    return Color;
})();
var Luminosity = (function () {
    function Luminosity() {

    };
    Luminosity.value = new Luminosity();
    return Luminosity;
})();
var withContext = function (ctx) {
    return function (action) {
        return function __do() {
            var v = $foreign.save(ctx)();
            var v1 = action();
            var v2 = $foreign.restore(ctx)();
            return v1;
        };
    };
};
var tryLoadImage = function (path) {
    return function (k) {
        return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($34) {
            return k(Data_Maybe.Just.create($34));
        });
    };
};
var textAlign = function (ctx) {
    var unsafeParseTextAlign = function (v) {
        if (v === "left") {
            return AlignLeft.value;
        };
        if (v === "right") {
            return AlignRight.value;
        };
        if (v === "center") {
            return AlignCenter.value;
        };
        if (v === "start") {
            return AlignStart.value;
        };
        if (v === "end") {
            return AlignEnd.value;
        };
        return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
    };
    return Data_Functor.map(Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
};
var strokePath = function (ctx) {
    return function (path) {
        return function __do() {
            var v = $foreign.beginPath(ctx)();
            var v1 = path();
            var v2 = $foreign.stroke(ctx)();
            return v1;
        };
    };
};
var showTextAlign = new Data_Show.Show(function (v) {
    if (v instanceof AlignLeft) {
        return "AlignLeft";
    };
    if (v instanceof AlignRight) {
        return "AlignRight";
    };
    if (v instanceof AlignCenter) {
        return "AlignCenter";
    };
    if (v instanceof AlignStart) {
        return "AlignStart";
    };
    if (v instanceof AlignEnd) {
        return "AlignEnd";
    };
    throw new Error("Failed pattern match at Graphics.Canvas line 485, column 3 - line 486, column 3: " + [ v.constructor.name ]);
});
var showPatternRepeat = new Data_Show.Show(function (v) {
    if (v instanceof Repeat) {
        return "Repeat";
    };
    if (v instanceof RepeatX) {
        return "RepeatX";
    };
    if (v instanceof RepeatY) {
        return "RepeatY";
    };
    if (v instanceof NoRepeat) {
        return "NoRepeat";
    };
    throw new Error("Failed pattern match at Graphics.Canvas line 595, column 3 - line 596, column 3: " + [ v.constructor.name ]);
});
var showComposite = new Data_Show.Show(function (v) {
    if (v instanceof SourceOver) {
        return "SourceOver";
    };
    if (v instanceof SourceIn) {
        return "SourceIn";
    };
    if (v instanceof SourceOut) {
        return "SourceOut";
    };
    if (v instanceof SourceAtop) {
        return "SourceAtop";
    };
    if (v instanceof DestinationOver) {
        return "DestinationOver";
    };
    if (v instanceof DestinationIn) {
        return "DestinationIn";
    };
    if (v instanceof DestinationOut) {
        return "DestinationOut";
    };
    if (v instanceof DestinationAtop) {
        return "DestinationAtop";
    };
    if (v instanceof Lighter) {
        return "Lighter";
    };
    if (v instanceof Copy) {
        return "Copy";
    };
    if (v instanceof Xor) {
        return "Xor";
    };
    if (v instanceof Multiply) {
        return "Multiply";
    };
    if (v instanceof Screen) {
        return "Screen";
    };
    if (v instanceof Overlay) {
        return "Overlay";
    };
    if (v instanceof Darken) {
        return "Darken";
    };
    if (v instanceof Lighten) {
        return "Lighten";
    };
    if (v instanceof ColorDodge) {
        return "ColorDodge";
    };
    if (v instanceof ColorBurn) {
        return "ColorBurn";
    };
    if (v instanceof HardLight) {
        return "HardLight";
    };
    if (v instanceof SoftLight) {
        return "SoftLight";
    };
    if (v instanceof Difference) {
        return "Difference";
    };
    if (v instanceof Exclusion) {
        return "Exclusion";
    };
    if (v instanceof Hue) {
        return "Hue";
    };
    if (v instanceof Saturation) {
        return "Saturation";
    };
    if (v instanceof Color) {
        return "Color";
    };
    if (v instanceof Luminosity) {
        return "Luminosity";
    };
    throw new Error("Failed pattern match at Graphics.Canvas line 283, column 3 - line 284, column 3: " + [ v.constructor.name ]);
});
var setTextAlign = function (ctx) {
    return function (textalign) {
        var toString = function (v) {
            if (v instanceof AlignLeft) {
                return "left";
            };
            if (v instanceof AlignRight) {
                return "right";
            };
            if (v instanceof AlignCenter) {
                return "center";
            };
            if (v instanceof AlignStart) {
                return "start";
            };
            if (v instanceof AlignEnd) {
                return "end";
            };
            throw new Error("Failed pattern match at Graphics.Canvas line 513, column 5 - line 514, column 5: " + [ v.constructor.name ]);
        };
        return $foreign.setTextAlignImpl(ctx)(toString(textalign));
    };
};
var setLineJoin = function (v) {
    if (v instanceof BevelJoin) {
        return $foreign.setLineJoinImpl("bevel");
    };
    if (v instanceof RoundJoin) {
        return $foreign.setLineJoinImpl("round");
    };
    if (v instanceof MiterJoin) {
        return $foreign.setLineJoinImpl("miter");
    };
    throw new Error("Failed pattern match at Graphics.Canvas line 246, column 1 - line 247, column 1: " + [ v.constructor.name ]);
};
var setLineCap = function (v) {
    if (v instanceof Round) {
        return $foreign.setLineCapImpl("round");
    };
    if (v instanceof Square) {
        return $foreign.setLineCapImpl("square");
    };
    if (v instanceof Butt) {
        return $foreign.setLineCapImpl("butt");
    };
    throw new Error("Failed pattern match at Graphics.Canvas line 233, column 1 - line 234, column 1: " + [ v.constructor.name ]);
};
var setGlobalCompositeOperation = function (ctx) {
    return function (composite) {
        var toString = function (v) {
            if (v instanceof SourceOver) {
                return "source-over";
            };
            if (v instanceof SourceIn) {
                return "source-in";
            };
            if (v instanceof SourceOut) {
                return "source-out";
            };
            if (v instanceof SourceAtop) {
                return "source-atop";
            };
            if (v instanceof DestinationOver) {
                return "destination-over";
            };
            if (v instanceof DestinationIn) {
                return "destination-in";
            };
            if (v instanceof DestinationOut) {
                return "destination-out";
            };
            if (v instanceof DestinationAtop) {
                return "destination-atop";
            };
            if (v instanceof Lighter) {
                return "lighter";
            };
            if (v instanceof Copy) {
                return "copy";
            };
            if (v instanceof Xor) {
                return "xor";
            };
            if (v instanceof Multiply) {
                return "multiply";
            };
            if (v instanceof Screen) {
                return "screen";
            };
            if (v instanceof Overlay) {
                return "overlay";
            };
            if (v instanceof Darken) {
                return "darken";
            };
            if (v instanceof Lighten) {
                return "lighten";
            };
            if (v instanceof ColorDodge) {
                return "color-dodge";
            };
            if (v instanceof ColorBurn) {
                return "color-burn";
            };
            if (v instanceof HardLight) {
                return "hard-light";
            };
            if (v instanceof SoftLight) {
                return "soft-light";
            };
            if (v instanceof Difference) {
                return "difference";
            };
            if (v instanceof Exclusion) {
                return "exclusion";
            };
            if (v instanceof Hue) {
                return "hue";
            };
            if (v instanceof Saturation) {
                return "saturation";
            };
            if (v instanceof Color) {
                return "color";
            };
            if (v instanceof Luminosity) {
                return "luminosity";
            };
            throw new Error("Failed pattern match at Graphics.Canvas line 316, column 5 - line 317, column 5: " + [ v.constructor.name ]);
        };
        return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
    };
};
var setCanvasDimensions = function (d) {
    return function (ce) {
        return Control_Bind.bind(Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
    };
};
var getCanvasElementById = function (elId) {
    return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
};
var getCanvasDimensions = function (ce) {
    return function __do() {
        var v = $foreign.getCanvasWidth(ce)();
        var v1 = $foreign.getCanvasHeight(ce)();
        return {
            width: v, 
            height: v1
        };
    };
};
var fillPath = function (ctx) {
    return function (path) {
        return function __do() {
            var v = $foreign.beginPath(ctx)();
            var v1 = path();
            var v2 = $foreign.fill(ctx)();
            return v1;
        };
    };
};
var createPattern = function (img) {
    return function (repeat) {
        var toString = function (v) {
            if (v instanceof Repeat) {
                return "repeat";
            };
            if (v instanceof RepeatX) {
                return "repeat-x";
            };
            if (v instanceof RepeatY) {
                return "repeat-y";
            };
            if (v instanceof NoRepeat) {
                return "no-repeat";
            };
            throw new Error("Failed pattern match at Graphics.Canvas line 606, column 5 - line 607, column 5: " + [ v.constructor.name ]);
        };
        return $foreign.createPatternImpl(img)(toString(repeat));
    };
};
module.exports = {
    SourceOver: SourceOver, 
    SourceIn: SourceIn, 
    SourceOut: SourceOut, 
    SourceAtop: SourceAtop, 
    DestinationOver: DestinationOver, 
    DestinationIn: DestinationIn, 
    DestinationOut: DestinationOut, 
    DestinationAtop: DestinationAtop, 
    Lighter: Lighter, 
    Copy: Copy, 
    Xor: Xor, 
    Multiply: Multiply, 
    Screen: Screen, 
    Overlay: Overlay, 
    Darken: Darken, 
    Lighten: Lighten, 
    ColorDodge: ColorDodge, 
    ColorBurn: ColorBurn, 
    HardLight: HardLight, 
    SoftLight: SoftLight, 
    Difference: Difference, 
    Exclusion: Exclusion, 
    Hue: Hue, 
    Saturation: Saturation, 
    Color: Color, 
    Luminosity: Luminosity, 
    Round: Round, 
    Square: Square, 
    Butt: Butt, 
    BevelJoin: BevelJoin, 
    RoundJoin: RoundJoin, 
    MiterJoin: MiterJoin, 
    Repeat: Repeat, 
    RepeatX: RepeatX, 
    RepeatY: RepeatY, 
    NoRepeat: NoRepeat, 
    AlignLeft: AlignLeft, 
    AlignRight: AlignRight, 
    AlignCenter: AlignCenter, 
    AlignStart: AlignStart, 
    AlignEnd: AlignEnd, 
    createPattern: createPattern, 
    fillPath: fillPath, 
    getCanvasDimensions: getCanvasDimensions, 
    getCanvasElementById: getCanvasElementById, 
    setCanvasDimensions: setCanvasDimensions, 
    setGlobalCompositeOperation: setGlobalCompositeOperation, 
    setLineCap: setLineCap, 
    setLineJoin: setLineJoin, 
    setTextAlign: setTextAlign, 
    strokePath: strokePath, 
    textAlign: textAlign, 
    tryLoadImage: tryLoadImage, 
    withContext: withContext, 
    showComposite: showComposite, 
    showTextAlign: showTextAlign, 
    showPatternRepeat: showPatternRepeat, 
    addColorStop: $foreign.addColorStop, 
    arc: $foreign.arc, 
    beginPath: $foreign.beginPath, 
    bezierCurveTo: $foreign.bezierCurveTo, 
    canvasElementToImageSource: $foreign.canvasElementToImageSource, 
    canvasToDataURL: $foreign.canvasToDataURL, 
    clearRect: $foreign.clearRect, 
    clip: $foreign.clip, 
    closePath: $foreign.closePath, 
    createImageData: $foreign.createImageData, 
    createImageDataCopy: $foreign.createImageDataCopy, 
    createLinearGradient: $foreign.createLinearGradient, 
    createRadialGradient: $foreign.createRadialGradient, 
    drawImage: $foreign.drawImage, 
    drawImageFull: $foreign.drawImageFull, 
    drawImageScale: $foreign.drawImageScale, 
    fill: $foreign.fill, 
    fillRect: $foreign.fillRect, 
    fillText: $foreign.fillText, 
    font: $foreign.font, 
    getCanvasHeight: $foreign.getCanvasHeight, 
    getCanvasWidth: $foreign.getCanvasWidth, 
    getContext2D: $foreign.getContext2D, 
    getImageData: $foreign.getImageData, 
    imageDataBuffer: $foreign.imageDataBuffer, 
    imageDataHeight: $foreign.imageDataHeight, 
    imageDataWidth: $foreign.imageDataWidth, 
    lineTo: $foreign.lineTo, 
    measureText: $foreign.measureText, 
    moveTo: $foreign.moveTo, 
    putImageData: $foreign.putImageData, 
    putImageDataFull: $foreign.putImageDataFull, 
    quadraticCurveTo: $foreign.quadraticCurveTo, 
    rect: $foreign.rect, 
    restore: $foreign.restore, 
    rotate: $foreign.rotate, 
    save: $foreign.save, 
    scale: $foreign.scale, 
    setCanvasHeight: $foreign.setCanvasHeight, 
    setCanvasWidth: $foreign.setCanvasWidth, 
    setFillStyle: $foreign.setFillStyle, 
    setFont: $foreign.setFont, 
    setGlobalAlpha: $foreign.setGlobalAlpha, 
    setGradientFillStyle: $foreign.setGradientFillStyle, 
    setLineWidth: $foreign.setLineWidth, 
    setMiterLimit: $foreign.setMiterLimit, 
    setPatternFillStyle: $foreign.setPatternFillStyle, 
    setShadowBlur: $foreign.setShadowBlur, 
    setShadowColor: $foreign.setShadowColor, 
    setShadowOffsetX: $foreign.setShadowOffsetX, 
    setShadowOffsetY: $foreign.setShadowOffsetY, 
    setStrokeStyle: $foreign.setStrokeStyle, 
    stroke: $foreign.stroke, 
    strokeRect: $foreign.strokeRect, 
    strokeText: $foreign.strokeText, 
    transform: $foreign.transform, 
    translate: $foreign.translate
};

},{"../Control.Applicative":7,"../Control.Bind":13,"../Control.Monad.Eff":24,"../Control.Monad.Eff.Exception.Unsafe":18,"../Control.Semigroupoid":32,"../Data.ArrayBuffer.Types":39,"../Data.Function":63,"../Data.Function.Uncurried":62,"../Data.Functor":66,"../Data.Maybe":78,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130,"./foreign":119}],121:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var FontOptions = function (x) {
    return x;
};
var FontFamily = function (x) {
    return x;
};
var Font = (function () {
    function Font(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Font.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Font(value0, value1, value2);
            };
        };
    };
    return Font;
})();
var smallCaps = {
    style: Data_Maybe.Nothing.value, 
    variant: new Data_Maybe.Just("small-caps"), 
    weight: Data_Maybe.Nothing.value
};
var serif = "serif";
var semigroupFontOptions = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            style: Control_Alt.alt(Data_Maybe.altMaybe)(v.style)(v1.style), 
            variant: Control_Alt.alt(Data_Maybe.altMaybe)(v.variant)(v1.variant), 
            weight: Control_Alt.alt(Data_Maybe.altMaybe)(v.weight)(v1.weight)
        };
    };
});
var sansSerif = "sans-serif";
var optionsString = function (v) {
    return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
};
var oblique = {
    style: new Data_Maybe.Just("oblique"), 
    variant: Data_Maybe.Nothing.value, 
    weight: Data_Maybe.Nothing.value
};
var monospace = "monospace";
var monoidFontOptions = new Data_Monoid.Monoid(function () {
    return semigroupFontOptions;
}, {
    style: Data_Maybe.Nothing.value, 
    variant: Data_Maybe.Nothing.value, 
    weight: Data_Maybe.Nothing.value
});
var light = {
    style: Data_Maybe.Nothing.value, 
    variant: Data_Maybe.Nothing.value, 
    weight: new Data_Maybe.Just("lighter")
};
var italic = {
    style: new Data_Maybe.Just("italic"), 
    variant: Data_Maybe.Nothing.value, 
    weight: Data_Maybe.Nothing.value
};
var fontString = function (v) {
    return optionsString(v.value2) + (" " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("px " + v.value0)));
};
var font = Font.create;
var fantasy = "fantasy";
var eqFontOptions = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v.style)(v1.style) && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v.variant)(v1.variant) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v.weight)(v1.weight));
    };
});
var eqFontFamily = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var eqFont = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqFontFamily)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(eqFontOptions)(x.value2)(y.value2);
    };
});
var customFont = FontFamily;
var cursive = "cursive";
var bolder = {
    style: Data_Maybe.Nothing.value, 
    variant: Data_Maybe.Nothing.value, 
    weight: new Data_Maybe.Just("bolder")
};
var bold = {
    style: Data_Maybe.Nothing.value, 
    variant: Data_Maybe.Nothing.value, 
    weight: new Data_Maybe.Just("bold")
};
module.exports = {
    bold: bold, 
    bolder: bolder, 
    cursive: cursive, 
    customFont: customFont, 
    fantasy: fantasy, 
    font: font, 
    fontString: fontString, 
    italic: italic, 
    light: light, 
    monospace: monospace, 
    oblique: oblique, 
    sansSerif: sansSerif, 
    serif: serif, 
    smallCaps: smallCaps, 
    eqFont: eqFont, 
    eqFontFamily: eqFontFamily, 
    eqFontOptions: eqFontOptions, 
    semigroupFontOptions: semigroupFontOptions, 
    monoidFontOptions: monoidFontOptions
};

},{"../Control.Alt":5,"../Data.Eq":55,"../Data.Foldable":60,"../Data.HeytingAlgebra":68,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Semigroup":97,"../Data.Show":101,"../Prelude":130}],122:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Color = require("../Color");
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Graphics_Canvas = require("../Graphics.Canvas");
var Graphics_Drawing_Font = require("../Graphics.Drawing.Font");
var $$Math = require("../Math");
var Prelude = require("../Prelude");
var Shadow = function (x) {
    return x;
};
var Path = (function () {
    function Path(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Path.create = function (value0) {
        return function (value1) {
            return new Path(value0, value1);
        };
    };
    return Path;
})();
var Rectangle = (function () {
    function Rectangle(value0) {
        this.value0 = value0;
    };
    Rectangle.create = function (value0) {
        return new Rectangle(value0);
    };
    return Rectangle;
})();
var Arc = (function () {
    function Arc(value0) {
        this.value0 = value0;
    };
    Arc.create = function (value0) {
        return new Arc(value0);
    };
    return Arc;
})();
var Composite = (function () {
    function Composite(value0) {
        this.value0 = value0;
    };
    Composite.create = function (value0) {
        return new Composite(value0);
    };
    return Composite;
})();
var OutlineStyle = function (x) {
    return x;
};
var FillStyle = function (x) {
    return x;
};
var Fill = (function () {
    function Fill(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fill.create = function (value0) {
        return function (value1) {
            return new Fill(value0, value1);
        };
    };
    return Fill;
})();
var Outline = (function () {
    function Outline(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Outline.create = function (value0) {
        return function (value1) {
            return new Outline(value0, value1);
        };
    };
    return Outline;
})();
var Text = (function () {
    function Text(value0, value1, value2, value3, value4) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
    };
    Text.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return new Text(value0, value1, value2, value3, value4);
                    };
                };
            };
        };
    };
    return Text;
})();
var Many = (function () {
    function Many(value0) {
        this.value0 = value0;
    };
    Many.create = function (value0) {
        return new Many(value0);
    };
    return Many;
})();
var Scale = (function () {
    function Scale(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Scale.create = function (value0) {
        return function (value1) {
            return new Scale(value0, value1);
        };
    };
    return Scale;
})();
var Translate = (function () {
    function Translate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Translate.create = function (value0) {
        return function (value1) {
            return new Translate(value0, value1);
        };
    };
    return Translate;
})();
var Rotate = (function () {
    function Rotate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Rotate.create = function (value0) {
        return function (value1) {
            return new Rotate(value0, value1);
        };
    };
    return Rotate;
})();
var Clipped = (function () {
    function Clipped(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Clipped.create = function (value0) {
        return function (value1) {
            return new Clipped(value0, value1);
        };
    };
    return Clipped;
})();
var WithShadow = (function () {
    function WithShadow(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WithShadow.create = function (value0) {
        return function (value1) {
            return new WithShadow(value0, value1);
        };
    };
    return WithShadow;
})();
var translate = function (tx) {
    return function (ty) {
        return Translate.create({
            translateX: tx, 
            translateY: ty
        });
    };
};
var text = Text.create;
var shadowOffset = function (x) {
    return function (y) {
        return {
            color: Data_Maybe.Nothing.value, 
            blur: Data_Maybe.Nothing.value, 
            offset: new Data_Maybe.Just({
                x: x, 
                y: y
            })
        };
    };
};
var shadowColor = function (c) {
    return {
        color: new Data_Maybe.Just(c), 
        blur: Data_Maybe.Nothing.value, 
        offset: Data_Maybe.Nothing.value
    };
};
var shadowBlur = function (b) {
    return {
        color: Data_Maybe.Nothing.value, 
        blur: new Data_Maybe.Just(b), 
        offset: Data_Maybe.Nothing.value
    };
};
var shadow = WithShadow.create;
var semigroupShape = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Composite) {
            return new Composite(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
        };
        if (v1 instanceof Composite) {
            return new Composite(new Data_List_Types.Cons(v, v1.value0));
        };
        return new Composite(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
    };
});
var semigroupShadow = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color), 
            blur: Control_Alt.alt(Data_Maybe.altMaybe)(v.blur)(v1.blur), 
            offset: Control_Alt.alt(Data_Maybe.altMaybe)(v.offset)(v1.offset)
        };
    };
});
var semigroupOutlineStyle = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color), 
            lineWidth: Control_Alt.alt(Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
        };
    };
});
var semigroupFillStyle = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color)
        };
    };
});
var semigroupDrawing = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Many) {
            return new Many(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
        };
        if (v1 instanceof Many) {
            return new Many(new Data_List_Types.Cons(v, v1.value0));
        };
        return new Many(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
    };
});
var scale = function (sx) {
    return function (sy) {
        return Scale.create({
            scaleX: sx, 
            scaleY: sy
        });
    };
};
var rotate = Rotate.create;
var render = function (ctx) {
    var renderShape = function (v) {
        if (v instanceof Path && v.value1 instanceof Data_List_Types.Nil) {
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
        };
        if (v instanceof Path && v.value1 instanceof Data_List_Types.Cons) {
            return function __do() {
                var v1 = Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value1.value1)(function (pt) {
                    return Graphics_Canvas.lineTo(ctx)(pt.x)(pt.y);
                })();
                return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v.value0)(Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
            };
        };
        if (v instanceof Rectangle) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
        };
        if (v instanceof Arc) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)(v.value0));
        };
        if (v instanceof Composite) {
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value0)(renderShape);
        };
        throw new Error("Failed pattern match at Graphics.Drawing line 288, column 3 - line 288, column 39: " + [ v.constructor.name ]);
    };
    var applyShadow = function (v) {
        return function __do() {
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                return Graphics_Canvas.setShadowColor(Color.cssStringHSLA(color))(ctx);
            })();
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                return Graphics_Canvas.setShadowBlur(blur)(ctx);
            })();
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                return function __do() {
                    var v1 = Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                    return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                };
            })();
        };
    };
    var applyOutlineStyle = function (v) {
        return function __do() {
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                return Graphics_Canvas.setStrokeStyle(Color.cssStringHSLA(color))(ctx);
            })();
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                return Graphics_Canvas.setLineWidth(width)(ctx);
            })();
        };
    };
    var applyFillStyle = function (v) {
        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
            return Graphics_Canvas.setFillStyle(Color.cssStringHSLA(color))(ctx);
        });
    };
    var go = function (v) {
        if (v instanceof Fill) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyFillStyle(v.value1)();
                return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
            }));
        };
        if (v instanceof Outline) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyOutlineStyle(v.value1)();
                return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
            }));
        };
        if (v instanceof Many) {
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(v.value0)(go);
        };
        if (v instanceof Scale) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.scale(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Translate) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.translate(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Rotate) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.rotate(v.value0)(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Clipped) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                renderShape(v.value0)();
                var v1 = Graphics_Canvas.clip(ctx)();
                return go(v.value1)();
            }));
        };
        if (v instanceof WithShadow) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                applyShadow(v.value0)();
                return go(v.value1)();
            }));
        };
        if (v instanceof Text) {
            return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                var v1 = Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                applyFillStyle(v.value3)();
                return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
            }));
        };
        throw new Error("Failed pattern match at Graphics.Drawing line 238, column 14 - line 295, column 40: " + [ v.constructor.name ]);
    };
    return go;
};
var rectangle = function (x) {
    return function (y) {
        return function (w) {
            return function (h) {
                return new Rectangle({
                    x: x, 
                    y: y, 
                    w: w, 
                    h: h
                });
            };
        };
    };
};
var path = function (dictFoldable) {
    return function ($203) {
        return Path.create(false)(Data_List.fromFoldable(dictFoldable)($203));
    };
};
var outlined = Data_Function.flip(Outline.create);
var outlineColor = function (c) {
    return {
        color: new Data_Maybe.Just(c), 
        lineWidth: Data_Maybe.Nothing.value
    };
};
var monoidShape = new Data_Monoid.Monoid(function () {
    return semigroupShape;
}, new Composite(Data_Monoid.mempty(Data_List_Types.monoidList)));
var monoidShadow = new Data_Monoid.Monoid(function () {
    return semigroupShadow;
}, {
    color: Data_Maybe.Nothing.value, 
    blur: Data_Maybe.Nothing.value, 
    offset: Data_Maybe.Nothing.value
});
var monoidOutlineStyle = new Data_Monoid.Monoid(function () {
    return semigroupOutlineStyle;
}, {
    color: Data_Maybe.Nothing.value, 
    lineWidth: Data_Maybe.Nothing.value
});
var monoidFillStyle = new Data_Monoid.Monoid(function () {
    return semigroupFillStyle;
}, {
    color: Data_Maybe.Nothing.value
});
var monoidDrawing = new Data_Monoid.Monoid(function () {
    return semigroupDrawing;
}, new Many(Data_Monoid.mempty(Data_List_Types.monoidList)));
var lineWidth = function (c) {
    return {
        color: Data_Maybe.Nothing.value, 
        lineWidth: new Data_Maybe.Just(c)
    };
};
var filled = Data_Function.flip(Fill.create);
var fillColor = function (c) {
    return {
        color: new Data_Maybe.Just(c)
    };
};
var everywhere = function (f) {
    var go = function (v) {
        if (v instanceof Many) {
            return f(new Many(Data_Functor.map(Data_List_Types.functorList)(go)(v.value0)));
        };
        if (v instanceof Scale) {
            return f(new Scale(v.value0, go(v.value1)));
        };
        if (v instanceof Translate) {
            return f(new Translate(v.value0, go(v.value1)));
        };
        if (v instanceof Rotate) {
            return f(new Rotate(v.value0, go(v.value1)));
        };
        if (v instanceof Clipped) {
            return f(new Clipped(v.value0, go(v.value1)));
        };
        if (v instanceof WithShadow) {
            return f(new WithShadow(v.value0, go(v.value1)));
        };
        return f(v);
    };
    return go;
};
var eqShape = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof Path && v1 instanceof Path) {
            return v.value0 === v1.value0 && (Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqNumber))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.x;
            })(v.value1))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.x;
            })(v1.value1)) && Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqNumber))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.y;
            })(v.value1))(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                return v2.y;
            })(v1.value1)));
        };
        if (v instanceof Rectangle && v1 instanceof Rectangle) {
            return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.w === v1.value0.w && v.value0.h === v1.value0.h));
        };
        if (v instanceof Arc && v1 instanceof Arc) {
            return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.start === v1.value0.start && (v.value0.end === v1.value0.end && v.value0.r === v1.value0.r)));
        };
        if (v instanceof Composite && v1 instanceof Composite) {
            return Data_Eq.eq(Data_List_Types.eqList(eqShape))(v.value0)(v1.value0);
        };
        return false;
    };
});
var eqShadow = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(v.color)(v1.color) && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqNumber))(v.blur)(v1.blur) && Data_Maybe.maybe(Data_Maybe.isNothing(v1.offset))(function (o) {
            return Data_Maybe.maybe(false)(function (o$prime) {
                return o.x === o$prime.x && o.y === o$prime.y;
            })(v1.offset);
        })(v.offset));
    };
});
var eqOutlineStyle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(x.color)(y.color) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqNumber))(x.lineWidth)(y.lineWidth);
    };
});
var eqFillStyle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Color.eqColor))(x.color)(y.color);
    };
});
var eqDrawing = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Fill && y instanceof Fill) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqFillStyle)(x.value1)(y.value1);
        };
        if (x instanceof Outline && y instanceof Outline) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqOutlineStyle)(x.value1)(y.value1);
        };
        if (x instanceof Text && y instanceof Text) {
            return Data_Eq.eq(Graphics_Drawing_Font.eqFont)(x.value0)(y.value0) && x.value1 === y.value1 && x.value2 === y.value2 && Data_Eq.eq(eqFillStyle)(x.value3)(y.value3) && x.value4 === y.value4;
        };
        if (x instanceof Many && y instanceof Many) {
            return Data_Eq.eq(Data_List_Types.eqList(eqDrawing))(x.value0)(y.value0);
        };
        if (x instanceof Scale && y instanceof Scale) {
            return x.value0.scaleX === y.value0.scaleX && x.value0.scaleY === y.value0.scaleY && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Translate && y instanceof Translate) {
            return x.value0.translateX === y.value0.translateX && x.value0.translateY === y.value0.translateY && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Rotate && y instanceof Rotate) {
            return x.value0 === y.value0 && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof Clipped && y instanceof Clipped) {
            return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        if (x instanceof WithShadow && y instanceof WithShadow) {
            return Data_Eq.eq(eqShadow)(x.value0)(y.value0) && Data_Eq.eq(eqDrawing)(x.value1)(y.value1);
        };
        return false;
    };
});
var closed = function (dictFoldable) {
    return function ($204) {
        return Path.create(true)(Data_List.fromFoldable(dictFoldable)($204));
    };
};
var clipped = Clipped.create;
var arc = function (x) {
    return function (y) {
        return function (start) {
            return function (end) {
                return function (r) {
                    return new Arc({
                        x: x, 
                        y: y, 
                        start: start, 
                        end: end, 
                        r: r
                    });
                };
            };
        };
    };
};
var circle = function (x) {
    return function (y) {
        return arc(x)(y)(0.0)($$Math.pi * 2.0);
    };
};
module.exports = {
    arc: arc, 
    circle: circle, 
    clipped: clipped, 
    closed: closed, 
    everywhere: everywhere, 
    fillColor: fillColor, 
    filled: filled, 
    lineWidth: lineWidth, 
    outlineColor: outlineColor, 
    outlined: outlined, 
    path: path, 
    rectangle: rectangle, 
    render: render, 
    rotate: rotate, 
    scale: scale, 
    shadow: shadow, 
    shadowBlur: shadowBlur, 
    shadowColor: shadowColor, 
    shadowOffset: shadowOffset, 
    text: text, 
    translate: translate, 
    semigroupShape: semigroupShape, 
    monoidShape: monoidShape, 
    eqShape: eqShape, 
    semigroupFillStyle: semigroupFillStyle, 
    monoidFillStyle: monoidFillStyle, 
    eqFillStyle: eqFillStyle, 
    semigroupOutlineStyle: semigroupOutlineStyle, 
    monoidOutlineStyle: monoidOutlineStyle, 
    eqOutlineStyle: eqOutlineStyle, 
    eqShadow: eqShadow, 
    semigroupShadow: semigroupShadow, 
    monoidShadow: monoidShadow, 
    semigroupDrawing: semigroupDrawing, 
    monoidDrawing: monoidDrawing, 
    eqDrawing: eqDrawing
};

},{"../Color":4,"../Control.Alt":5,"../Control.Applicative":7,"../Control.Bind":13,"../Control.Monad.Eff":24,"../Control.Semigroupoid":32,"../Data.Eq":55,"../Data.Foldable":60,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.List":75,"../Data.List.Types":74,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Unit":115,"../Graphics.Canvas":120,"../Graphics.Drawing.Font":121,"../Math":125,"../Prelude":130}],123:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Color_Scale = require("../Color.Scale");
var Color_Scale_Perceptual = require("../Color.Scale.Perceptual");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Array = require("../Data.Array");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Graphics_Canvas = require("../Graphics.Canvas");
var Graphics_Drawing = require("../Graphics.Drawing");
var $$Math = require("../Math");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var main = (function () {
    var cube = Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
        x: 0.0 * 100.0, 
        y: 0.0 * 100.0
    }, {
        x: 1.0 * 100.0, 
        y: 0.0 * 100.0
    }, {
        x: 1.0 * 100.0, 
        y: 1.0 * 100.0
    }, {
        x: 0.0 * 100.0, 
        y: 1.0 * 100.0
    }, {
        x: 0.0 * 100.0, 
        y: 0.0 * 100.0
    }, {
        x: 0.5 * 100.0, 
        y: -0.5 * 100.0
    }, {
        x: 1.5 * 100.0, 
        y: -0.5 * 100.0
    }, {
        x: 1.0 * 100.0, 
        y: 0.0 * 100.0
    }, {
        x: 1.5 * 100.0, 
        y: -0.5 * 100.0
    }, {
        x: 1.5 * 100.0, 
        y: 0.5 * 100.0
    }, {
        x: 1.0 * 100.0, 
        y: 1.0 * 100.0
    }, {
        x: 0.0 * 100.0, 
        y: 1.0 * 100.0
    }, {
        x: 0.5 * 100.0, 
        y: 0.5 * 100.0
    }, {
        x: 0.5 * 100.0, 
        y: -0.5 * 100.0
    }, {
        x: 0.5 * 100.0, 
        y: 0.5 * 100.0
    }, {
        x: 1.5 * 100.0, 
        y: 0.5 * 100.0
    } ]);
    var go = function (v) {
        if (v === 0) {
            return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
        };
        var dr = Graphics_Drawing.scale(0.375)(0.375)(go(v - 1 | 0));
        return Graphics_Drawing.outlined(Graphics_Drawing.outlineColor(Color_Scale.sample(Color_Scale_Perceptual.magma)(1.0 - Data_Int.toNumber(v - 1 | 0) / 5.0)))(cube);
    };
    return function __do() {
        var v = Graphics_Canvas.getCanvasElementById("canvas")();
        var canvas = Data_Maybe.fromJust()(v);
        var v1 = Graphics_Canvas.getContext2D(canvas)();
        return Graphics_Drawing.render(v1)(Graphics_Drawing.translate(400.0)(200.0)(go(5)))();
    };
})();
module.exports = {
    main: main
};

},{"../Color.Scale":2,"../Color.Scale.Perceptual":1,"../Control.Bind":13,"../Control.Monad.Eff":24,"../Data.Array":38,"../Data.EuclideanRing":57,"../Data.Foldable":60,"../Data.Function":63,"../Data.Int":73,"../Data.Maybe":78,"../Data.Monoid":85,"../Data.Ring":95,"../Data.Semiring":99,"../Graphics.Canvas":120,"../Graphics.Drawing":122,"../Math":125,"../Partial.Unsafe":127,"../Prelude":130}],124:[function(require,module,exports){
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],125:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
module.exports = {
    abs: $foreign.abs, 
    acos: $foreign.acos, 
    asin: $foreign.asin, 
    atan: $foreign.atan, 
    atan2: $foreign.atan2, 
    ceil: $foreign.ceil, 
    cos: $foreign.cos, 
    e: $foreign.e, 
    exp: $foreign.exp, 
    floor: $foreign.floor, 
    ln10: $foreign.ln10, 
    ln2: $foreign.ln2, 
    log: $foreign.log, 
    log10e: $foreign.log10e, 
    log2e: $foreign.log2e, 
    max: $foreign.max, 
    min: $foreign.min, 
    pi: $foreign.pi, 
    pow: $foreign.pow, 
    remainder: $foreign.remainder, 
    round: $foreign.round, 
    sin: $foreign.sin, 
    sqrt: $foreign.sqrt, 
    sqrt1_2: $foreign.sqrt1_2, 
    sqrt2: $foreign.sqrt2, 
    tan: $foreign.tan, 
    trunc: $foreign.trunc
};

},{"./foreign":124}],126:[function(require,module,exports){
"use strict";

// module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};

exports.unsafePartialBecause = function (reason) {
  return function (f) {
    try {
      return exports.unsafePartial(f);
    } catch (err) {
      throw new Error("unsafePartial failed. The following " +
                      "assumption was incorrect: '" + reason + "'.");
    }
  };
};

},{}],127:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Partial = require("../Partial");
var unsafeCrashWith = function (msg) {
    return $foreign.unsafePartial(function (dictPartial) {
        return Partial.crashWith(dictPartial)(msg);
    });
};
module.exports = {
    unsafeCrashWith: unsafeCrashWith, 
    unsafePartial: $foreign.unsafePartial, 
    unsafePartialBecause: $foreign.unsafePartialBecause
};

},{"../Partial":129,"./foreign":126}],128:[function(require,module,exports){
"use strict";

// module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};

},{}],129:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var crash = function (dictPartial) {
    return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
};
module.exports = {
    crash: crash, 
    crashWith: $foreign.crashWith
};

},{"./foreign":128}],130:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad = require("../Control.Monad");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Boolean = require("../Data.Boolean");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Bounded = require("../Data.Bounded");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Field = require("../Data.Field");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_NaturalTransformation = require("../Data.NaturalTransformation");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");
module.exports = {};

},{"../Control.Applicative":7,"../Control.Apply":9,"../Control.Bind":13,"../Control.Category":14,"../Control.Monad":28,"../Control.Semigroupoid":32,"../Data.Boolean":48,"../Data.BooleanAlgebra":49,"../Data.Bounded":51,"../Data.CommutativeRing":52,"../Data.Eq":55,"../Data.EuclideanRing":57,"../Data.Field":58,"../Data.Function":63,"../Data.Functor":66,"../Data.HeytingAlgebra":68,"../Data.NaturalTransformation":86,"../Data.Ord":92,"../Data.Ordering":93,"../Data.Ring":95,"../Data.Semigroup":97,"../Data.Semiring":99,"../Data.Show":101,"../Data.Unit":115,"../Data.Void":116}],131:[function(require,module,exports){
"use strict";

// module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};

},{}],132:[function(require,module,exports){
// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
module.exports = {
    unsafeCoerce: $foreign.unsafeCoerce
};

},{"./foreign":131}],133:[function(require,module,exports){
require('Main').main();

},{"Main":123}]},{},[133]);
